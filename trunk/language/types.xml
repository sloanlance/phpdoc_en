<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.198 $ -->
<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>Types</title>

 <sect1 xml:id="language.types.intro">
  <title>Introduction</title>
  
  <simpara>
   PHP supports eight primitive types.
  </simpara>
  
  <para>
   Four scalar types:

   <itemizedlist>

    <listitem>
     <simpara>
      <type>boolean</type>
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      <type>integer</type>
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      <type>float</type> (floating-point number, aka '<type>double</type>')
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      <type>string</type>
     </simpara>
    </listitem>

   </itemizedlist>

   Two compound types:

   <itemizedlist>

    <listitem>
     <simpara>
      <type>array</type>
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      <type>object</type>
     </simpara>
    </listitem>

   </itemizedlist>

   And finally two special types:

   <itemizedlist>

    <listitem>
     <simpara>
      <type>resource</type>
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      <type>NULL</type>
     </simpara>
    </listitem>

   </itemizedlist>

   This manual also introduces some 
   <link linkend="language.pseudo-types">pseudo-types</link> 
   for readability reasons:

   <itemizedlist>
 
    <listitem>
     <simpara>
      <type>mixed</type>
     </simpara>
    </listitem>
 
    <listitem>
     <simpara>
      <type>number</type>
     </simpara>
    </listitem>
 
    <listitem>
     <simpara>
      <type>callback</type>
     </simpara>
    </listitem>

   </itemizedlist>
   And the pseudo-variable <parameter>$...</parameter>.
  </para>

  <simpara>
   You may also find some references to the type "double". Consider
   double the same as float, the two names exist only for historic
   reasons. 
  </simpara>
  
  <simpara>
   The type of a variable is usually not set by the programmer;
   rather, it is decided at runtime by PHP depending on the context in
   which that variable is used.
  </simpara>

  <note>
   <simpara>
    If you want to check out the type and value of a certain <link
     linkend="language.expressions">expression</link>, use
    <function>var_dump</function>.
   </simpara>

   <para>
    If you simply want a human-readable representation of the type for
    debugging, use <function>gettype</function>. To check for a certain type,
    do <emphasis>not</emphasis> use <function>gettype</function>, but use the
    <literal>is_<replaceable>type</replaceable></literal> functions. Some
    examples:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$a_bool = TRUE;   // a boolean
$a_str  = "foo";  // a string
$a_str2 = 'foo';  // a string
$an_int = 12;     // an integer

echo gettype($a_bool); // prints out:  boolean
echo gettype($a_str);  // prints out:  string

// If this is an integer, increment it by four
if (is_int($an_int)) {
    $an_int += 4;
}

// If $bool is a string, print it out
// (does not print out anything)
if (is_string($a_bool)) {
    echo "String: $a_bool";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <simpara>
   If you would like to force a variable to be converted to a certain
   type, you may either <link
   linkend="language.types.typecasting">cast</link> the variable or
   use the <function>settype</function> function on it.
  </simpara>

  <simpara>
   Note that a variable may be evaluated with different values in certain
   situations, depending on what type it is at the time. For more
   information, see the section on <link
   linkend="language.types.type-juggling">Type Juggling</link>.  Also, you 
   may be interested in viewing 
   <link linkend="types.comparisons">the type comparison tables</link>,
   as they show examples of various type related comparisons.
  </simpara>
 </sect1>
 
 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.array;
 &language.types.object;
 &language.types.resource;
 &language.types.null;
 &language.types.pseudo-types;
 &language.types.type-juggling;
 
</chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
