  <chapter id="language.types">
   <title>Types</title>

   <para>
    PHP supports the following types:

    <itemizedlist>
     <listitem><simpara><link linkend="language.types.integer">integer</link>
     <listitem><simpara><link linkend="language.types.double">floating-point numbers</link>
     <listitem><simpara><link linkend="language.types.string">string</link>
     <listitem><simpara><link linkend="language.types.array">array</link>
     <listitem><simpara><link linkend="language.types.object">object</link>
    </itemizedlist>

   <simpara>
    The type of a variable is usually not set by the programmer;
    rather, it is decided at runtime by PHP depending on the context
    in which that variable is used.

   <simpara>
    If you would like to force a variable to be converted to a certain 
    type, you may either <link
     linkend="language.types.typecasting">cast</link> the variable or use 
    the <function>settype</function> function on it.

   <simpara>
    Note that a variable may behave in different manners in certain
    situations, depending on what type it is a the time. For more
    information, see the section on <link
     linkend="language.types.type-juggling">Type Juggling</link>.

   <sect1 id="language.types.integer">
    <title>Integers</title>
    <para>
     Integers can be specified using any of the following syntaxes:
    <informalexample><programlisting>
$a = 1234; # decimal number
$a = -123; # a negative number
$a = 0123; # octal number (equivalent to 83 decimal)
$a = 0x12; # hexadecimal number (equivalent to 18 decimal)
</programlisting></informalexample>

   <sect1 id="language.types.double">
    <title>Floating point numbers</title>
    <para>
     Floating point numbers ("doubles") can be specified using any
     of the following syntaxes:
    <informalexample><programlisting>
$a = 1.234;
$a = 1.2e3;
</programlisting></informalexample>

   <sect1 id="language.types.string">
    <title>Strings</title>
    <para>
     Strings can be specified using one of two sets of delimiters.
    <para>
     If the string is enclosed in double-quotes ("), variables
     within the string will be expanded (subject to some parsing
     limitations). As in C and Perl, the backslash ("\") character
     can be used in specifying special characters:
    <table>
     <title>Escaped characters</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>sequence</entry>
        <entry>meaning</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>\n</literal></entry>
        <entry>newline</entry>
       </row>
       <row>
        <entry><literal>\r</literal></entry>
        <entry>carriage</entry>
       </row>
       <row>
        <entry><literal>\t</literal></entry>
        <entry>horizontal tab</entry>
       </row>
       <row>
        <entry><literal>\\</literal></entry>
        <entry>backslash</entry>
       </row>
       <row>
        <entry><literal>\$</literal></entry>
        <entry>dollar sign</entry>
       </row>
       <row>
        <entry><literal>\"</literal></entry>
        <entry>double-quote</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <para>
     You can escape any other character, but a warning will be issued
     at the highest warning level.
    <para>
     The second way to delimit a string uses the single-quote ("'")
     character, which does not do any variable expansion or backslash
     processing (except for "\\" and "\'" so you can insert backslashes
     and single-quotes in a singly-quoted string).

    <sect2 id="language.types.string.conversion">
     <title>String conversion</title>

     <simpara>
      When a string is evaluated as a numeric value, the resulting
      value and type are determined as follows.

     <simpara>
      The string will evaluate as a double if it contains any of the
      characters '.', 'e', or 'E'. Otherwise, it will evaluate as an
      integer.
     
     <para>
      The value is given by the initial portion of the string. If the
      string starts with valid numeric data, this will be the value
      used. Otherwise, the value will be 0 (zero). Valid numeric data
      is an optional sign, followed by one or more digits (optionally
      containing a decimal point), followed by an optional
      exponent. The exponent is an 'e' or 'E' followed by one or more
      digits.

     <simpara>
      When the first expression is a string, the type of the variable
      will depend on the second expression.

     <informalexample>
      <programlisting>
$foo = 1 + "10.5";              // $foo is double (11.5)
$foo = 1 + "-1.3e3";            // $foo is double (-1299)
$foo = 1 + "bob-1.3e3";         // $foo is integer (1)
$foo = 1 + "bob3";              // $foo is integer (1)
$foo = 1 + "10 Small Pigs";     // $foo is integer (11)
$foo = 1 + "10 Little Piggies"; // $foo is integer (11)
$foo = "10.0 pigs " + 1;        // $foo is integer (11)
$foo = "10.0 pigs " + 1.0;      // $foo is double (11)     
      </programlisting>
     </informalexample>

     <simpara>
      For more information on this conversion, see the Unix manual
      page for strtod(3).

   <sect1 id="language.types.array">
    <title>Arrays</title>

    <para>
     Arrays actually act like both hash tables (associative arrays)
     and indexed arrays (vectors).

    <sect2 id="language.types.array.single-dim">
     <title>Single Dimension Arrays</title>

     <para>
      PHP supports both scalar and associative arrays. In fact, there
      is no difference between the two.  You can create an array using
      the <function>list</function> or <function>array</function>
      functions, or you can explicitly set each array element value.

     <informalexample>
      <programlisting role="php"> 
$a[0] = "abc"; 
$a[1] = "def"; 
$b["foo"] = 13;
      </programlisting>
     </informalexample>

     <para>
      You can also create an array by simply adding values to
      the array.

     <informalexample>
      <programlisting role="php"> 
$a[] = "hello"; // $a[2] == "hello"
$a[] = "world"; // $a[3] == "world" 
      </programlisting>
     </informalexample>

     <para>
      Arrays may be sorted using the <function>asort</function>,
      <function>arsort</function>, <function>ksort</function>,
      <function>rsort</function>, <function>sort</function>,
      <function>uasort</function>, <function>usort</function>, and
      <function>uksort</function> functions depending on the type of
      sort you want.

     <para>
      You can count the number of items in an array using the
      <function>count</function> function.

     <para>
      You can traverse an array using <function>next</function> and
      <function>prev</function> functions.  Another common way to
      traverse an array is to use the <function>each</function>
      function.

    <sect2 id="language.types.array.multi-dim">
     <title>Multi-Dimensional Arrays</title>

     <para>
      Multi-dimensional arrays are actually pretty simple.  For each
      dimension of the array, you add another [key] value to the end:

     <informalexample>
      <programlisting role="php"> 
$a[1]      = $f;               # one dimensional examples
$a["foo"]  = $f;   

$a[1][0]     = $f;             # two dimensional
$a["foo"][2] = $f;             # (you can mix numeric and associative indices)
$a[3]["bar"] = $f;             # (you can mix numeric and associative indices)

$a["foo"][4]["bar"][0] = $f;   # four dimensional!
      </programlisting>
     </informalexample>

     <para>
      You can "fill up" multi-dimensional arrays in many ways,
      but the trickiest one to understand is how to use the
      <function>array</function> command for associative arrays.
      These two snippets of code fill up the one-dimensional array in
      the same way:

     <informalexample>
      <programlisting role="php"> 
# Example 1:

$a["color"]	= "red";
$a["taste"]	= "sweet";
$a["shape"]	= "round";
$a["name"]	= "apple";
$a[3]		= 4;


# Example 2:
$a = array(
     "color" => "red",
     "taste" => "sweet",
     "shape" => "round",
     "name"  => "apple",
     3       => 4
);
      </programlisting>
     </informalexample>

     <para>
      The <function>array</function> function can be nested for 
      multi-dimensional arrays:

     <informalexample>
      <programlisting role="php"> 
&lt;?
$a = array(
     "apple"  => array(
          "color"  => "red",
          "taste"  => "sweet",
          "shape"  => "round"
     ),
     "orange"  => array(
          "color"  => "orange",
          "taste"  => "sweet",
          "shape"  => "round"
     ),
     "banana"  => array(
          "color"  => "yellow",
          "taste"  => "paste-y",
          "shape"  => "banana-shaped"
     )
);

echo $a["apple"]["taste"];    # will output "sweet"
?>
      </programlisting>
     </informalexample>

   <sect1 id="language.types.object">
    <title>Objects</title>

    <sect2 id="language.types.object.init">
     <title>Object Initialization</title>

     <para>
      To initialize an object, you use the new statement to instantiate
      the object to a variable.

      <informalexample>
       <programlisting>
class foo {
    function do_foo () { 
        echo "Doing foo."; 
    }
}

$bar = new foo;
$bar -> do_foo ();
       </programlisting>
      </informalexample>

   <sect1 id="language.types.type-juggling">
    <title>Type juggling</title>

    <simpara>
     PHP does not require (or support) explicit type definition in
     variable declaration; a variable's type is determined by the
     context in which that variable is used. That is to say, if you
     assign a string value to variable <parameter>var</parameter>,
     <parameter>var</parameter> becomes a string. If you then assign
     an integer value to <parameter>var</parameter>, it becomes an
     integer.

    <para>
     An example of PHP's automatic type conversion is the addition
     operator '+'. If any of the operands is a double, then all
     operands are evaluated as doubles, and the result will be a
     double. Otherwise, the operands will be interpreted as integers,
     and the result will also be an integer. Note that this does NOT
     change the types of the operands themselves; the only change is
     in how the operands are evaluated.

    <informalexample>
     <programlisting>
$foo = "0";  // $foo is string (ASCII 48)
$foo++;      // $foo is the string "1" (ASCII 49)
$foo += 1;   // $foo is now an integer (2)
$foo = $foo + 1.3;  // $foo is now a double (3.3)
$foo = 5 + "10 Little Piggies"; // $foo is integer (15)
$foo = 5 + "10 Small Pigs";     // $foo is integer (15)
     </programlisting>
    </informalexample>

    <simpara>
     If the last two examples above seem odd, see <link
     linkend="language.types.string.conversion">String conversion</link>.  

    <simpara>
     If you wish to force a variable to be evaluated as a certain
     type, see the section on <link
     linkend="language.types.typecasting">Type casting</link>. If you
     wish to change the type of a variable, see
     <function>settype</function>.

    <sect2 id="language.types.typecasting">
     <title>Type casting</title>

     <para>
      Type casting in PHP works much as it does in C: the name of the
      desired type is written in parentheses before the variable which
      is to be cast.

     <informalexample>
      <programlisting>
$foo = 10;   // $foo is an integer
$bar = (double) $foo;   // $bar is a double
      </programlisting>
     </informalexample>
    
     <para>
      The casts allowed are:
      <itemizedlist>
       <listitem><simpara>(int), (integer) - cast to integer
       <listitem><simpara>(real), (double), (float) - cast to double
       <listitem><simpara>(string) - cast to string
       <listitem><simpara>(array) - cast to array
       <listitem><simpara>(object) - cast to object
      </itemizedlist>

     <para>
      Note that tabs and spaces are allowed inside the parentheses, so
      the following are functionally equivalent:

     <informalexample>
      <programlisting>
$foo = (int) $bar;
$foo = ( int ) $bar;
      </programlisting>
     </informalexample>

  </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
