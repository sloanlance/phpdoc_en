<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->

<sect1 xml:id="control-structures.declare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>declare</literal></title>
 <para>
  The <literal>declare</literal> construct is used to
  set execution directives for a block of code.
  The syntax of <literal>declare</literal> is similar to
  the syntax of other flow control constructs:
  <informalexample>
   <programlisting>
<![CDATA[
declare (directive)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  The <literal>directive</literal> section allows the
  behavior of the <literal>declare</literal> block to
  be set.
  Currently only two directives are recognized: the
  <literal>ticks</literal> directive (See below for more
  information on the
  <link linkend="control-structures.declare.ticks">ticks</link>
  directive) and the <literal>encoding</literal> directive (See below for more
  information on the
  <link linkend="control-structures.declare.encoding">encoding</link>
  directive).
 </para>
 <note>
  <simpara>
   The encoding directive was added in PHP 5.3.0
  </simpara>
 </note>
 <para>
  The <literal>statement</literal> part of the
  <literal>declare</literal> block will be executed - how
  it is executed and what side effects occur during execution
  may depend on the directive set in the
  <literal>directive</literal> block.
 </para>
 <para>
  The <literal>declare</literal> construct can also be used in the global
  scope, affecting all code following it (however if the file with
  <literal>declare</literal> was included then it does not affect the parent
  file).
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// these are the same:

// you can use this:
declare(ticks=1) {
    // entire script here
}

// or you can use this:
declare(ticks=1);
// entire script here
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.declare.ticks">
  <title>Ticks</title>
  <caution>
   <simpara>
    As of PHP 5.3.0 ticks are deprecated and will be removed
    in PHP 6.0.0.
   </simpara>
  </caution>
  <para>A tick is an event that occurs for every
  <varname>N</varname> low-level statements executed
  by the parser within the <literal>declare</literal> block.
  The value for <varname>N</varname> is specified
  using <code>ticks=<varname>N</varname></code>
  within the <literal>declare</literal> blocks's
  <literal>directive</literal> section.
 </para>
 <para>
  The event(s) that occur on each tick are specified using the
  <function>register_tick_function</function>. See the example
  below for more details. Note that more than one event can occur
  for each tick.
 </para>
 <para>
  <example>
   <title>Profile a section of PHP code</title>
   <programlisting role="php">
<![CDATA[
<?php
// A function that records the time when it is called
function profile($dump = FALSE)
{
    static $profile;

    // Return the times stored in profile, then erase it
    if ($dump) {
        $temp = $profile;
        unset($profile);
        return $temp;
    }

    $profile[] = microtime();
}

// Set up a tick handler
register_tick_function("profile");

// Initialize the function before the declare block
profile();

// Run a block of code, throw a tick every 2nd statement
declare(ticks=2) {
    for ($x = 1; $x < 50; ++$x) {
        echo similar_text(md5($x), md5($x*$x)), "<br />;";
    }
}

// Display the data stored in the profiler
print_r(profile(TRUE));
?>
]]>
   </programlisting>
  </example>
  The example profiles the PHP code within the 'declare'
  block, recording the time at which every second low-level
  statement in the block was executed. This information can
  then be used to find the slow areas within particular
  segments of code. This process can be performed using other
  methods: using ticks is more convenient and easier to
  implement.
 </para>
 <simpara>
  Ticks are well suited for debugging, implementing simple
  multitasking, background I/O and many other tasks.
 </simpara>
 <simpara>
  See also <function>register_tick_function</function> and
  <function>unregister_tick_function</function>.
 </simpara>
 </sect2>
 <sect2 xml:id="control-structures.declare.encoding">
  <title>Encoding</title>
  <para>
    A script's encoding can be specified per-script using the encoding directive.
  <example>
   <title>Declaring an encoding for the script.</title>
    <programlisting role="php">
<![CDATA[
<?php
declare(encoding='ISO-8859-1');
// code here
?>
]]>
    </programlisting>
   </example>
  </para>

  <caution>
   <simpara>
    When combined with namespaces, the only legal syntax for declare
    is <literal>declare(encoding='...');</literal> where <literal>...</literal>
    is the encoding value.  <literal>declare(encoding='...') {}</literal>
    will result in a parse error when combined with namespaces.
   </simpara>
  </caution>
  <para>
   The encoding declare value is ignored in PHP 5.3 unless php is compiled with
   <literal>--enable-zend-multibyte</literal>.  In PHP 6.0, the <literal>encoding</literal>
   directive will be used to inform the scanner what encoding the file is created in.  Legal
   values are encoding names such as <literal>UTF-8</literal>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
