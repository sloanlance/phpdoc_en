<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
  <title>Traits</title>
  
  <para>
   Traits is a mechanism for code reuse in single inheritance languages such as
   PHP. A Trait is intended to reduce some limitations of single inheritance by
   enabling a developer to reuse sets of methods freely in several independent
   classes living in different class hierarchies. The semantics of the combination
   of Traits and classes is defined in a way which reduces complexity, and avoids
   the typical problems associated with multiple inheritance and Mixins.
  </para>
  <para>
   A Trait is similar to a class, but only intended to group functionality in a
   fine-grained and consistent way. It is not possible to instantiate a Trait on
   its own. It is an addition to traditional inheritance and enables horizontal
   composition of behavior; that is, the application of class members without
   requiring inheritance.
  </para>
  
  <sect2 xml:id="language.oop5.traits.precedence">
   <title>Precedence</title>
   <para>
    An inherited member from a base class is overridden by a member inserted
    by a Trait. The precedence order is that members from the current class
    override Trait methods, which in return override inherited methods.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.multiple">
   <title>Multiple Traits</title>
   <para>
    Multiple Traits can be inserted into a class by listing them in the use
    statement, separated by commas.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.conflict">
   <title>Conflict Resolution</title>
   <para>
    If two Traits insert a member by the same name, a fatal error is produced,
    if the conflict is not explicitly resolved.
   </para>
   <para>
    To resolve conflicted naming among Traits, one can use the <literal>insteadof</literal>
    operator to explicitly define the precedence between said Traits. Or,
    one can use the <literal>as</literal> operator to alias the conflicting
    member name(s).
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.traits.examples.ex1">
    <title>Trait example</title>
    <programlisting role="php">
<![CDATA[
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex2">
    <title>Precedence Order Example</title>
    <para>
     An inherited method from a base class is overridden by the
     method inserted into MyHelloWorld from the SayWorld Trait. The behavior is
     the same for methods defined in the MyHelloWorld class. The precedence order
     is that methods from the current class override Trait methods, which in
     turn override methods from the base class.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
  public function sayHello() {
    echo 'Hello ';
  }
}

trait SayWorld {
  public function sayHello() {
    parent::sayHello();
    echo 'World!';
  }
}

class MyHelloWorld extends Base {
  use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex3">
    <title>Precedence Order Example #2</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
  public function sayHello() {
    echo 'Hello World!';
  }
}

class TheWorldIsNotEnough {
  use HelloWorld;
  public function sayHello() {
    echo 'Hello Universe!';
  }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello Universe!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex4">
    <title>Multiple Traits Usage</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
  public function sayHello() {
    echo 'Hello ';
  }
}

trait World {
  public function sayWorld() {
    echo ' World';
  }
}

class MyHelloWorld {
  use Hello, World;
  public function sayExclamationMark() {
    echo '!';
  }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();>
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex5">
    <title>Conflict Resolution</title>
    <programlisting role="php">
<![CDATA[
<?php
trait A {
  public function smallTalk() {
    echo 'a';
  }
  public function bigTalk() {
    echo 'A';
  }
}

trait B {
  public function smallTalk() {
    echo 'b';
  }
  public function bigTalk() {
    echo 'B';
  }
}

class Talker {
  use A, B {
    B::smallTalk insteadof A;
    A::bigTalk insteadof B;
  }
}

class Aliased_Talker {
  use A, B {
    B::smallTalk insteadof A;
    A::bigTalk insteadof B;
    B::bigTalk as talk;
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex6">
    <title>Traits Composed from Traits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
  public function sayHello() {
    echo 'Hello ';
  }
}

trait World {
  public function sayWorld() {
    echo 'World!';
  }
}

trait HelloWorld {
  use Hello, World;
}

class MyHelloWorld {
  use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex7">
    <title>Express Requirements by Abstract Methods</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
  public function sayHelloWorld() {
    echo 'Hello'.$this->getWorld();
  }
  abstract public function getWorld();
}

class MyHelloWorld {
  private $world;
  use Hello;
  public function getWorld() {
    return $this->world;
  }
  public function setWorld($val) {
    $this->world = $val;
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex8">
    <title>Static Variables</title>
    <programlisting role="php">
<![CDATA[
<?php
  trait Counter {
    public function inc() {
      static $c = 0;
      $c = $c + 1;
      echo "$c\n";
    }
  }

  class C1 {
    use Counter;
  }

  class C2 {
    use Counter;
  }

  $o = new C1(); $o->inc(); // echo 1
  $p = new C2(); $p->inc(); // echo 1
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex9">
    <title>Static Methods</title>
    <programlisting role="php">
<![CDATA[
<?php
  trait Singleton {
    public static function getInstance() { ... }
  }

  class MySingleton extends SomeUnrelatedSuperClass {
    use Singleton;
  }

  MySingleton::getInstance();
?>
]]>
    </programlisting>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1-->
