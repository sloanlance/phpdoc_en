<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
 <sect1 id="language.oop5.interfaces">
  <title>Object Interfaces</title>
  <para>
   Object interfaces allow you to create code which specifies which methods a
   class must implement, without having to define how these methods are
   handled.
  </para>
  <para>
   Interfaces are defined using the interface keyword, in the same way as a
   standard class, but without any of the methods having their contents
   defined.
  </para>
  <para>
   All methods declared in an interface must be public, this is the nature of an
   interface.
  </para>
  <sect2>
   <title><literal>implements</literal></title>
   <para>
    To implement an interface, the <literal>implements</literal> operator is used.
    All methods in the interface must be implemented within a class; failure to do
    so will result in a fatal error. Classes may implement more than one interface
    if desired by separating each interface with a comma.
   </para>
  </sect2>
  <sect2>
   &reftitle.examples;
   <example>
    <title>Interface example</title>
     <programlisting role="php">
<![CDATA[
<?php
// Declare the interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implement the interface
// This will work
class Template implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}

// This will not work
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}

?>
]]>
    </programlisting>
   </example>
   <simpara>
     See also the <link linkend="operators.type">instanceof</link> operator.
   </simpara>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
