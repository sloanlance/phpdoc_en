<!-- $Revision$ -->

<!ENTITY warn.experimental '<warning><simpara>This extension is
<emphasis>EXPERIMENTAL</emphasis>. The behaviour of this extension --
including the names of its functions and anything else documented
about this extension -- may change without notice in a future release of PHP. 
Use this extension at your own risk.</simpara></warning>'>

<!ENTITY warn.experimental.func '<warning><simpara>This function is
<emphasis>EXPERIMENTAL</emphasis>. The behaviour of this function, the
name of this function, and anything else documented about this
function may change without notice in a future release of PHP. 
Use this function at your own risk.</simpara></warning>'>

<!ENTITY warn.undocumented.func '<warning><simpara>This function is
currently not documented; only the argument list is
available.</simpara></warning>'>

<!ENTITY warn.no-win32-fopen-wrapper '<warning><para>The Windows
version of <literal>PHP</literal> currently does not support accessing
remote files via this function, even if
<link linkend="ini.allow-url-fopen">allow_url_fopen</link> is enabled.
</para></warning>'>

<!ENTITY tip.ob-capture '<tip><simpara>As with anything that outputs
its result directly to the browser, you can use the <link
linkend="ref.outcontrol">output-control functions</link> to capture
the output of this function, and save it in a
<type>string</type> (for example).</simpara></tip>'>

<!ENTITY tip.fopen-wrapper '<tip><simpara>You can use a URL as a
filename with this function if the "fopen wrappers" have been enabled.
See <function>fopen</function> for more details.</simpara></tip>'>

<!ENTITY return.success 'Returns &true; on success or &false; on failure.'>

<!ENTITY return.falseproblem '<warning><simpara>This function may
return Boolean &false;, but may also return a non-Boolean value which
evaluates to &false;, such as <literal>0</literal> or
&quot;&quot;. Please read the section on <link
linkend="language.types.boolean">Booleans</link> for more
information. Use <link linkend="language.operators.comparison">the ===
operator</link> for testing the return value of this
function.</simpara></warning>'>

<!-- Various notes -->
<!ENTITY note.not-bin-safe '<warning><simpara>This function
is not (yet) binary safe!</simpara></warning>'>

<!ENTITY note.bin-safe '<note><simpara>This function is
binary-safe.</simpara></note>'>

<!ENTITY note.no-windows '<note><simpara>This function is not
implemented on Windows platforms.</simpara></note>'>

<!ENTITY note.func-callback '<note><simpara>Instead of a function name, an
array containing an object reference and a method name can also be
supplied.</simpara></note>'>

<!-- Notes for safe-mode limited functions: -->
<!ENTITY note.sm.disabled '<note><simpara>&sm.disabled;</simpara></note>'>

<!ENTITY note.sm.uidcheck '<note><simpara>When <link 
linkend="features.safe-mode">safe mode</link> is enabled, PHP checks whether 
the files or directories you are about to operate on have the same UID (owner) as the 
script that is being executed.</simpara></note>'>

<!ENTITY note.sm.uidcheck.dir '<note><simpara>When <link 
linkend="features.safe-mode">safe mode</link> is enabled, PHP checks whether 
the directory in which you are about to operate has the same UID (owner) as the 
script that is being executed.</simpara></note>'>

<!-- Common pieces in features/safe-mode.xml 
     Jade doesn't allow in-line entities, so I put them here... Though they 
     should have been inline in safe-mode.xml -->
<!ENTITY sm.uidcheck 'Checks whether the files or directories you are 
about to operate on have the same UID (owner) as the script that is being
executed.'>

<!ENTITY sm.uidcheck.dir 'Checks whether the directory in which
you are about to operate has the same UID (owner) as the script that is being
executed.'>

<!ENTITY sm.disabled 'This function is disabled in <link 
linkend="features.safe-mode">safe mode</link>.'>

<!-- Common pieces in partintro-sections -->
<!ENTITY no.config '<para>This extension has no configuration directives defined in &php.ini;.</para>'>
<!ENTITY no.resource '<para>This extension has no resource types defined.</para>'>
<!ENTITY no.constants '<para>This extension has no constants defined.</para>'>
<!ENTITY no.requirement '<para>These functions are always available.</para>'>
<!ENTITY no.install '<para>There is no installation needed to use these
functions; they are part of the PHP core.</para>'>

<!-- Used in reference/$extname/ini.xml -->
<!ENTITY extension.runtime '<simpara>
The behaviour of these functions is affected by settings in &php.ini;.
</simpara>'>

<!-- Used in reference/$extname/constants.xml -->
<!ENTITY extension.constants '<simpara>
The constants below are defined by this extension, and
will only be available when the extension has either
been compiled into PHP or dynamically loaded at runtime.
</simpara>'>

<!-- For STANDARD Constants used in reference/$extname/constants.xml -->
<!ENTITY extension.constants.core '<simpara>
The constants below are always available as part of the PHP core.
</simpara>'>

<!-- Used in reference/$extname/classes.xml -->
<!ENTITY extension.classes '<simpara>
The classes below are defined by this extension, and
will only be available when the extension has either
been compiled into PHP or dynamically loaded at runtime.
</simpara>'>

<!-- These are using in reference/$extname/reference.xml and other
supplemental files to mark section titles -->
<!ENTITY reftitle.intro     '<title>Introduction</title>'>
<!ENTITY reftitle.required  '<title>Requirements</title>'>
<!ENTITY reftitle.install   '<title>Installation</title>'>
<!ENTITY reftitle.runtime   '<title>Runtime Configuration</title>'>
<!ENTITY reftitle.resources '<title>Resource Types</title>'>
<!ENTITY reftitle.constants '<title>Predefined Constants</title>'>
<!ENTITY reftitle.classes '<title>Predefined Classes</title>'>
<!ENTITY reftitle.examples  '<title>Examples</title>'>
<!ENTITY reftitle.seealso   '<title>See Also</title>'>
