<!-- xml version 1.35 -->
 <reference id="ref.mysql">
  <title>MySQL függvények</title>
  <titleabbrev>MySQL</titleabbrev>
  <partintro>
   <simpara>
    E függvények segítségével érheted el a MySQL adatbázisokat. Ahhoz, hogy
    ezeket a függvényeket használhasd, a php-t a 
    <option role="configure">--with-mysql</option> opcióval kell lefordítanod.
    Ha nem adod meg az opció után a mysql elérési útvonalát, akkor a php a
    beépített mysql kliens könyvtárat fogja használni. Ha a felhasználók más
    alkalmazásokat is használnak, amelyek mysql-t használnak (például a php
    3-as és 4-es verzióját, vagy az auth-mysql-t), akkor mindig meg kell adni
    a mysql elérési útvonalát a 
    <option role="configure">--with-mysql=/path/to/mysql</option> formában.
    Ez ki fogja kényszeríteni, hogy a meglévõ mysql kliens könyvtárat
    használja a php, elkerülve az ebbõl adódó ütközéseket.
   </simpara>
   <simpara>
    A MySQL-rõl további információt a
    <ulink url="&url.mysql;">&url.mysql;</ulink> címen találsz.
   </simpara>
   <simpara>
    A MySQL dokumentációját pedig a <ulink
    url="&url.mysql.docs;">&url.mysql.docs;</ulink>.
   </simpara>

  </partintro>

  <refentry id="function.mysql-affected-rows">
   <refnamediv>
    <refname>mysql_affected_rows</refname> 
    <refpurpose>Az elõzõ MySQL mûveletben érintett sorok számát adja
     meg</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_affected_rows</function></funcdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_affected_rows</function> függvény az elõzõ
     link_identifier-rel azonosított kapcsolatban kiadott INSERT,
     UPDATE vagy DELETE kérésben érintett sorok számát adja vissza.
     Ha nem adsz meg kapcsolat-azonosítót, akkor az utoljára megnyitott
     kapcsolatról kapsz információt.
    </para>
    <note>
     <para>
      Ha transzakciókezelést hasznnálsz, akkor a
      <function>mysql_affected_rows</function> függvényt az INSERT, UPDATE,
      vagy DELETE kérés után közvetlenül, nem a kommit után kell meghívni.
     </para>
    </note>
    <para>
     Ha az utolsó lekérdezés egy WHERE feltétel nélküli DELETE volt, akkor bár
     a táblából minden sor törlõdik, a függvény nullát fog visszaadni.
    </para>
    <para>
     Ez a parancs nem hatékony a lekérdezõ SELECT kéréssel együtt használva,
     csak azokkal a lekérdezésekkel, melyek módosítják a táblázat sorait.
     Ha egy SELECT lekérdezésben kapott sorok számát szeretnéd megkapni,
     akkor használd a <function>mysql_num_rows</function> függvényt.
    </para>
    <para>
     Ha az utolsó kérés meghiusul, akkor a függvény -1-gyel tér vissza.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-change-user">
   <refnamediv>
    <refname>mysql_change_user</refname> 
    <refpurpose>
     Aktív kapcsolat felhasználójának módosítása
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_change_user</function></funcdef>
      <paramdef>string <parameter>user</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string 
       <parameter>
        <optional>database</optional>
       </parameter>
      </paramdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_change_user</function> függvény megváltoztatja az
     aktuális, vagy az opcionális paraméterben megadott azonosítójú kapcsolat
     felhasználóját. Ha egy adatbázis nevét megadod, akkor ez lesz az
     alapértelmezett adatbázis. Ha az új név-jelszó páros helytelen, akkor a
     függvényhívás elõtti kapcsolat él tovább.</para>
     <note><para>A függvény a PHP 3.0.13 változatával került a nyelvbe és
     MySQL 3.23.3, vagy késõbbi változata szükséges a használatához.
    </para></note>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-close">
   <refnamediv>
    <refname>mysql_close</refname>
    <refpurpose>Lezár egy MySQL kapcsolatot</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_close</function></funcdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>                   
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A függvény értéke igaz, ha a mûvelet sikerült, hamis, ha nem.
    </para>
    <para>A <function>mysql_close</function> függvény bezárja az adott
    azonosítójú MySQL kapcsolatot. Ha nem adsz meg
    <parameter>link_identifier</parameter> paramétert, akkor az utoljára
    megnyitott kapcsolatot zárja le.
    </para>
    <para>
     A <function>mysql_close</function> függvény használata általában
     szükségtelen, mert a nem perzisztens kapcsolatok a szkript végén
     bezáródnak.
    </para>
    <note>
     <para> 
      A <function>mysql_close</function> függvény nem zárja be a
      <function>mysql_pconnect</function> függvénnyel megnyitott kapcsolatokat.
     </para>
    </note>
    <example>
     <title>MySQL close példa</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_connect ("kraemer", "marliesle", "titok")
        or die ("Nem lehet csatlakozni");
    print ("A csatlakozás sikerült");
    mysql_close ($link);
?&gt;
     </programlisting>
    </example>
    <para> 
     Lásd még a <function>mysql_connect</function> és a
     <function>mysql_pconnect</function> függvényeket!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-connect">
   <refnamediv>
    <refname>mysql_connect</refname>
    <refpurpose>Kapcsolatot nyit meg egy MySQL szerverhez</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_connect</function></funcdef>
      <paramdef>string 
       <parameter>
        <optional>hostname
 	<optional>:port</optional>
 	<optional>:/path/to/socket</optional>
        </optional>
       </parameter>
      </paramdef>
      <paramdef>string 
       <parameter>
        <optional>username</optional>
       </parameter>
      </paramdef>
      <paramdef>string 
       <parameter>
        <optional>password</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Pozitív MySQL azonosítóval tér vissza, ha a csatlakozás sikerült. Hiba
     esetén pedig hibaüzenetet ír a kimenetre és 0-val tér vissza.
    </para>
    <para>
     A <function>mysql_connect</function> függvény kapcsolatot nyit meg egy
     MySQL szerverhez. A paramétereket elhagyhatod. Az alapértelmezett
     értékek: <parameter>host:port</parameter> = 'localhost:3306',
     <parameter>username</parameter> = a folyamat tulajdonosának belépési neve
     <parameter>password</parameter> = üres karakterlánc.
    </para>
    <para>
     A hostname paraméter tartalmazhat egy portszámot is, például:
     &quot;hostname:port&quot; vagy tartalmazhatja a MySQL socket elérési
     útvonalát, például: &quot;:/path/to/socket&quot;. Az utóbbi hostname
     paramétert használva is a helyi MySQL szerverhez próbál majd kapcsolódni
     a függvény.
     <note>
      <para>
       A &quot;:port&quot; formátumú kiegészítés a PHP 3.0B4-es változatában
       került a nyelvbe.
      </para>
      <para>
       A &quot;:/path/to/socket&quot; formát pedig a PHP 3.0.10-es verziójától
       kezdve használhatjuk.
      </para>
      <para>
      A sikertelen kapcsolatkor kiírt hibaüzenetet elnyomhatod, ha '@' jelet
      írsz a függvény elé.
      </para>
     </note>
    </para>
    <para>
     Ha a <function>mysql_connect</function> függvényt kétszer ugyanazokkal a
     paraméterekkel hívod meg, akkor nem jön létre újabb kapcsolat; a függvény
     a már meglévõ kapcsolat azonosítóját fogja visszaadni.
    </para>
    <para>
     A kapcsolat a PHP program végén bezárul, ha elõbb nem zártuk volna le a
     <function>mysql_close</function> függvénnyel.
    </para>  
    <example>
     <title>MySQL connect példa</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_connect ("kraemer", "marliesle", "titok")
        or die ("Nem lehet csatlakozni");
    print ("A csatlakozás sikerült");
    mysql_close ($link);
?&gt;
     </programlisting>
    </example>
    <para> Lásd még a
     <function>mysql_pconnect</function> és
     <function>mysql_close</function> függvényeket.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-create-db">
   <refnamediv>
    <refname>mysql_create_db</refname>
    <refpurpose>Létrehoz egy MySQL adatbázist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_create_db</function></funcdef>
      <paramdef>string <parameter>database name</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_create_db</function> függvény megkísérel létrehozni egy
     új adatbázist a megadott kapcsolatazonosítón keresztül.
    </para>
    <example>
     <title>MySQL 'create database' példa</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_pconnect ("kron", "jutta", "geheim")
        or die ("Nem lehet csatlakozni")
    if (mysql_create_db ("my_db")) {
        print ("Az adatbázist létrehoztam\n");
    } else {
        printf ("Hiba az adatbázis létrehozásakor: %s\n", mysql_error ());
    }
?&gt;
     </programlisting>
    </example>
    <para> 
     Kompatíbilitási okokból a <function>mysql_createdb</function> függvény is
     használható.
    </para>
    <para> 
     Lásd még a: <function>mysql_drop_db</function> függvényt.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-data-seek">
   <refnamediv>
    <refname>mysql_data_seek</refname>
    <refpurpose>Belsõ eredménymutató mozgatása</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_data_seek</function></funcdef>
      <paramdef>int <parameter>result_identifier</parameter></paramdef>
      <paramdef>int <parameter>row_number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Igazzal tér vissza, ha a mûvelet sikerült
    </para>
    <para> 
     A <function>mysql_data_seek</function> függvény az adott azonosítójú
     ereményhalmazban ugrik a megadott pozícióra.
     A <function>mysql_fetch_row</function> függvény következõ hívásakor ezt a
     sorszámú sort kapod meg.
    </para>
    <para>
     Ha az elsõ sorra akarsz pozicionálni, akkor
     <parameter>Row_number</parameter> 0 legyen!
    </para>

    <example>
     <title>MySQL data seek példa</title>
     <programlisting role="php">
&lt;?php
    $link = mysql_pconnect ("kron", "jutta", "geheim")
        or die ("Nem tudok csatlakozni");

    mysql_select_db ("samp_db")
        or die ("Nem tudok belépni az adatbázisba");

    $query = "SELECT last_name, first_name FROM friends";
    $eredmeny = mysql_query ($query)
        or die ("Rossz kérés");

    # fetch rows in reverse order

    for ($i = mysql_num_rows ($eredmeny) - 1; $i &gt;=0; $i--) {
        if (!mysql_data_seek ($eredmeny, $i)) {
            printf ("Nem tudok a %d. sorra ugorni\n", $i);
            continue;
        }

        if(!($sor = mysql_fetch_object ($eredmeny)))
            continue;

        printf ("%s %s&lt;BR&gt;\n", $sor-&gt;last_name, $sor-&gt;first_name);
    }

    mysql_free_result ($eredmeny);
?&gt;
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-db-name">
   <refnamediv>
    <refname>mysql_db_name</refname>
    <refpurpose>Get result data</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_db_name</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>mixed 
       <parameter>
        <optional>field</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_db_name</function> függvény elsõ paramétere egy
     <function>mysql_list_dbs</function> által visszaadott érték. A
     <parameter>row</parameter> paraméter az eredményhalmaz indexe.
    </para>

    <para>
     Ha hiba történt, a függvény FALSE-szal tér vissza.
     Használd a
     <function>mysql_errno</function> és a 
     <function>mysql_error</function> függvényeket a hiba eredetének
     megállapítására!
    </para>

    <example>
     <title><function>Mysql_db_name</function> példa</title>
     <programlisting role="php">
&lt;?php 
error_reporting(E_ALL);

mysql_connect('dbhost', 'név', 'jelszó');
$db_list = mysql_list_dbs();

$i = 0;
$cnt = mysql_num_rows($db_list);
while ($i &lt; $cnt) {
    echo mysql_db_name($db_list, $i) . "\n";
    $i++;
}
?&gt;
     </programlisting>
    </example>

    <para>
     Kompatíbilitási okokból a <function>mysql_dbname</function> függvény is
     használható, de használata nem javasolt.
    </para>

   </refsect1>
  </refentry>

  <refentry id="function.mysql-db-query">
   <refnamediv>
    <refname>mysql_db_query</refname>
    <refpurpose>MySQL kérést küld az adatbázisnak</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_db_query</function></funcdef>
      <paramdef>string <parameter>database</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Visszatérési értéke egy pozitív MySQL eredmény-azonosító, ha a kérés
     sikeres volt, hamissal, ha a kérés hibás volt.
    </para>
    <para> 
     A <function>mysql_db_query</function> függvény kiválaszt egy adatbázist,
     majd azon végrehajt egy kérést. Ha a kapcsolat azonosító nincs megadva,
     akkor a függvény keres egyet. Ha nem talál ilyet, akkor megpróbál
     létrehozni egyet oly módon, mintha meghívta volna a
     <function>mysql_connect</function> függvényt paraméterek nélkül.
    </para>
    <para> 
     Lásd még a <function>mysql_connect</function> függvényt.
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql</function> függvény is
     használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-drop-db">
   <refnamediv>
    <refname>mysql_drop_db</refname>
    <refpurpose>Töröl egy MySQL adatbázist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_drop_db</function></funcdef>
      <paramdef>string <parameter>database_name</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Visszatérési értéke: igaz, ha sikeres, hamis, ha nem
    </para>  
    <para> 
     A <function>mysql_drop_db</function> függvény megpróbálja az egész
     adatbázist kitörölni, melyet az adott kapcsolat-azonosító határoz meg.
    </para>
    <para> 
     Lásd még a <function>mysql_create_db</function> függvényt.
     Kompatíbilitási okokból <function>mysql_dropdb</function> néven is
     hívható a függvény. [és hallgat is a nevére]
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-errno">
   <refnamediv>
    <refname>mysql_errno</refname> 
    <refpurpose>Az elõzõ MySQL mûvelet hibakódját tartalmazza</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_errno</function></funcdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Az utoljára végrehajtott MySQL hiba kódjával tér vissza, vagy ha az
     sikeres volt, akkor <literal>0</literal>-t (nullát) ad vissza.
    </para>
    <para>
     A MySQL hibái már nem jelennek meg figyelmeztetésként. [orig.: 
     Errors coming back from the mySQL database backend no longer
     issue warnings.]
     Ha szeretnéd megkapni a hiba kódját, használd a
     <function>mysql_errno</function> függvényt!
     Ez a függvény csak az utolsó MySQL mûvelet hibakódját adja vissza
     [(not including <function>mysql_error</function> and
     <function>mysql_errno</function>)], ha használni szeretnéd, ügyelj rá,
     hogy még azelõtt hívd meg a függvényt, mielõtt egy másik MySQL függvényt
     meghívsz.
     <informalexample>
      <programlisting role="php">
&lt;?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <para> 
     Lásd még a <function>mysql_error</function> függvényt
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-error">
   <refnamediv>
    <refname>mysql_error</refname>
    <refpurpose>Az elõzõ MySQL mûvelet hibaszövegét adja</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_error</function></funcdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Az utolsó MySQL mûvelet hibaszövegével tér vissza, vagy
     <literal>''</literal> (üres karakterlánccal) ha nem volt hiba.
    </para>
    <para>
     A MySQL hibái már nem jelennek meg figyelmeztetésként. [orig.: 
     Errors coming back from the mySQL database backend no longer
     issue warnings.]
     Ha szeretnéd megkapni a hiba kódját, használd a
     <function>mysql_error</function> függvényt!
     Ez a függvény csak az utolsó MySQL mûvelet hibakódját adja vissza
     [(not including <function>mysql_error</function> and
     <function>mysql_errno</function>)], ha használni szeretnéd, ügyelj rá,
     hogy még azelõtt hívd meg a függvényt, mielõtt egy másik MySQL függvényt
     meghívsz.
     <informalexample>
      <programlisting role="php">
&lt;?php
mysql_connect("marliesle");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
mysql_select_db("nonexistentdb");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
$conn = mysql_query("SELECT * FROM nonexistenttable");
echo mysql_errno().": ".mysql_error()."&lt;BR>";
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <para> 
     Lásd még a <function>mysql_errno</function> függvényt!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname> 
    <refpurpose>
     Kérés egy sorát adja vissza (tetszõleges) tömb formájában.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mysql_fetch_array</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>result_type</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Az eredmény következõ sorával tér vissza tömb formájában, vagy hamissal,
     ha már nincs több sor.</para>
    <para>
     A <function>mysql_fetch_array</function> függvény a
     <function>mysql_fetch_row</function> függvény kiterjesztett változata.
     Ráadásul az eredményt nem csak számokkal indexelt tömbbe írja, hanem
     asszociatív tömbbe is, ahol a mezõ nevei a kulcsok.
    </para>
    <para>
     Ha az eredmény több sorának ugyanaz a neve, akkor a késõbb szereplõ
     oszlop marad meg. Ha szeretnéd az összes mezõt elérni ilyenkor is, akkor
     számmal indexeld a tömböt, vagy az SQL parancsban kérj aliast az
     oszlopra.
     <informalexample>
      <programlisting>
select t1.f1 as ize t2.f1 as bigyo from t1, t2
      </programlisting>
     </informalexample>
    </para>
    <para>
     Jó tudni, hogy a <function>mysql_fetch_array</function> függvény
     használata NEM jelentõsen lassabb a <function>mysql_fetch_row</function>
     használatánál, de a kapott eredmény feldolgozása jóval kényelmesebb.
    </para>
    <para>
     A <function>mysql_fetch_array</function> függvény elhagyható
     <parameter>result_type</parameter> paramétere a következõ lehet:
     MYSQL_ASSOC, MYSQL_NUM, vagy MYSQL_BOTH.
     (Ez a lehetõség a PHP 3.0.7-es változatában került a nyelvbe.)
    </para>
    <para>
     További részletekért olvasd még a
     <function>mysql_fetch_row</function> és a
     <function>mysql_fetch_assoc</function> függvényeket!
    </para>
    <example>
     <title><function>Mysql_fetch_array</function></title>
     <programlisting role="php">
&lt;?php 
mysql_connect ($host, $felhasznalo, $jelszo);
$eredmeny = mysql_db_query ("adatbázis","select user_id, teljesnev from table");
while ($sor = mysql_fetch_array ($eredmeny)) {
    echo "user_id: ".$sor["user_id"]."&lt;br&gt;\n";
    echo "user_id: ".$sor[0]."&lt;br&gt;\n";
    echo "fullname: ".$sor["fullname"]."&lt;br&gt;\n";
    echo "fullname: ".$sor[1]."&lt;br&gt;\n";
}
mysql_free_result ($eredmeny);
?&gt;
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-assoc">
   <refnamediv>
    <refname>mysql_fetch_assoc</refname> 
    <refpurpose>
     Az eredmény egy sorát asszociatív tömbként adja vissza.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mysql_fetch_assoc</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Az eredmény következõ sorával, mint asszociatív tömbbel tér vissza, vagy
     hamissal, ha nincs több sor.</para>
    <para>
     A <function>mysql_fetch_assoc</function> függvény hívásával ugyanazt
     érjük el, mintha a <function>mysql_fetch_array</function> függvényt
     hívtuk volna meg MYSQL_ASSOC második paraméterrel. Ez a függvény egy
     tisztán asszociatív tömböt ad vissza. Eredetileg a 
     <function>mysql_fetch_array</function> függvény így mûködött. Ha a
     számokkal indexelt elemekre is szükséged van, akkor használd a
     <function>mysql_fetch_array</function> függvényt.
    </para>
    <para>
     Ha az eredmény több sorának ugyanaz a neve, akkor a késõbb szereplõ
     oszlop marad meg. Ha szeretnéd az összes mezõt elérni ilyenkor is, akkor
     az SQL parancsban kérj aliast az oszlopra, vagy használd a
     <function>mysql_fetch_array</function> függvényt úgy, hogy a számmal
     indexelt elemeket is kéred.
    </para>
    <para>
     Jó tudni, hogy a <function>mysql_fetch_assoc</function> függvény
     használata NEM jelentõsen lassabb a <function>mysql_fetch_row</function>
     használatánál, de a kapott eredmény feldolgozása jóval kényelmesebb.
    </para>
    <para>
     További részletekért lásd még a
     <function>mysql_fetch_row</function> és a
     <function>mysql_fetch_array</function> függvényeket.
    </para>
    <example>
     <title><function>Mysql_fetch_assoc</function></title>
     <programlisting role="php">
&lt;?php 
mysql_connect ($host, $felhasznalo, $jelszo);
$eredmeny = mysql_db_query ("adatbázis","select * from table");
while ($sor = mysql_fetch_assoc ($eredmeny)) {
    echo $sor["user_id"];
    echo $sor["fullname"];
}
mysql_free_result ($eredmeny);
?&gt;
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-field">
   <refnamediv>
    <refname>mysql_fetch_field</refname>
    <refpurpose>
     Eredményhalmaz egy oszlopáról ad információt objektum formájában
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>mysql_fetch_field</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>field_offset</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Egy mezõinformációt tartalmazó objektummal tér vissza.
    </para>  
    <para>
     A <function>mysql_fetch_field</function> függvényt arra használhatod,
     hogy az eredmény egy oszlopáról információt kaphass. Ha a mezõ sorszámát
     nem adod meg, akkor a következõ olyan oszlopról kapsz információt,
     amelyre még nem hívtad meg a
     <function>mysql_fetch_field</function> függvényt.
    </para>
    <para>
     Az objektum tulajdonságai:
     <itemizedlist>
      <listitem>
       <simpara>
	name - az oszlop neve
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	table - a tábla neve, amelyhez az oszlop tartozik
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	max_length - az oszlop maximális hossza
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	not_null - értéke 1, ha az oszlop nem veheti fel a NULL értéket
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	primary_key - értéke 1, ha az oszlop elsõdleges kulcs
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	unique_key - értéke 1, ha az oszlop egyszerû kulcs
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	multiple_key - értéke 1, ha az oszlop összetett kulcs része
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	numeric - értéke 1, ha az oszlop szám
       </simpara>
      </listitem> 
      <listitem>
       <simpara>
	blob - értéke 1, ha az oszlop BLOB típusú
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	type - az oszlop típusa
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	unsigned - értéke 1, ha az oszlop nem elõjeles
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	zerofill - értéke 1, ha az oszlop nullával feltöltött
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <example>
     <title><function>Mysql_fetch_field</function></title>
     <programlisting role="php">
&lt;?php 
mysql_connect ($host, $felhasznalo, $jelszo)
    or die ("Nem lehet csatlakozni az adatbázishoz");
$eredmeny = mysql_db_query ("adatbázis", "select * from table")
    or die ("Hibás kérés");
# oszlopinformáció lekérése
$i = 0;
while ($i &lt; mysql_num_fields ($eredmeny)) {
    echo "Információ a $i. oszlopról:&lt;BR&gt;\n";
    $meta = mysql_fetch_field ($eredmeny);
    if (!$meta) {
        echo "Nem tudok információt lekérni&lt;BR>gt;\n";
    }
    echo "&lt;PRE&gt;
blob:         $meta-&gt;blob
max_length:   $meta-&gt;max_length
multiple_key: $meta-&gt;multiple_key
name:         $meta-&gt;name
not_null:     $meta-&gt;not_null
numeric:      $meta-&gt;numeric
primary_key:  $meta-&gt;primary_key
table:        $meta-&gt;table
type:         $meta-&gt;type
unique_key:   $meta-&gt;unique_key
unsigned:     $meta-&gt;unsigned
zerofill:     $meta-&gt;zerofill
&lt;/PRE&gt;";
    $i++;
}
mysql_free_result ($eredmeny);
?&gt;
     </programlisting>
    </example>
    <para>
     Lásd még a <function>mysql_field_seek</function> függvényt!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-lengths">
   <refnamediv>
    <refname>mysql_fetch_lengths</refname> 
    <refpurpose>
     Az eredmény oszlopainak hosszáról nyújt információt
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mysql_fetch_lengths</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Egy tömbbel tér vissza. A tömb elemei az utolsó
     <function>mysql_fetch_row</function> függvény által betöltött oszlopok
     hosszait tartalmazza, vagy hiba esetén hamisat.
    </para>  
    <para>
     A <function>mysql_fetch_lengths</function> függvény a
     <function>mysql_fetch_row</function>,
     <function>mysql_fetch_array</function> vagy a
     <function>mysql_fetch_object</function> által betöltött sor hosszait adja
     vissza számmal indexelt tömb formájában.
    </para>  
    <para> 
     Lásd még a <function>mysql_fetch_row</function> függvényt!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-object">
   <refnamediv>
    <refname>mysql_fetch_object</refname>
    <refpurpose>Az eredmény következõ sorát objektum formájában adja
    vissza</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>object <function>mysql_fetch_object</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>result_type</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Egy objektummal tér vissza, amelynek tulajdonságai a betöltött sor
     oszlopait tartalmazzák. Ha nincs több sor, a függvény hamisat ad
     eredményül.
    </para>
    <para> 
     A <function>mysql_fetch_object</function> függvény hasonló a
     <function>mysql_fetch_array</function> függvényhez, egy különbséggel: nem
     tömböt, hanem objektumot ad vissza a függvény. Ez azt jelenti, hogy a
     mezõket csak a nevük alapján tudod elérni, mivel a számok nem
     érvényes tulajdonságnevek.
    </para>
    <para>
     Az elhagyható <parameter>result_type</parameter> parméter egy konstans,
     ami MYSQL_ASSOC, MYSQL_NUM vagy MYSQL_BOTH lehet.
    </para>
    <para>
     Sebesség szempontjából a <function>mysql_fetch_array</function>
     függvénnyel azonos sebességû és majdnem olyan gyors, mint a
     <function>mysql_fetch_row</function> függvény (a különbség
     elhanyagolható)
     <example>
      <title><function>mysql_fetch_object</function> példa</title>
      <programlisting role="php">
&lt;?php 
mysql_connect ($host, $felhasznalo, $jelszo);
$eredmeny = mysql_db_query ("adatbázis", "select * from table");
while ($sor = mysql_fetch_object ($eredmeny)) {
    echo $sor-&gt;user_id;
    echo $sor-&gt;fullname;
}
mysql_free_result ($eredmeny);
?&gt;
      </programlisting>
     </example>
    </para>
    <para> 
     Lásd még a <function>mysql_fetch_array</function> és a 
     <function>mysql_fetch_row</function> függvényt!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-fetch-row">
   <refnamediv>
    <refname>mysql_fetch_row</refname>
    <refpurpose>Az eredmény következõ sorát adja vissza számmal indexelt tömb
    formájában</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mysql_fetch_row</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Egy számmal indexelt tömbbel tér vissza, ami a betöltött sorokat
     tartalmazza, vagy hamissal, ha nincs több sor.
    </para>
    <para>
     A <function>mysql_fetch_row</function> függvény betölt egy sort a
     megadott eredmény-azonosítójú eredményhalmazból. A sort (számmal
     indexelt) tömb formájában adja vissza. Az oszlopok számozása 0-tól indul.
    </para>
    <para>
     A <function>mysql_fetch_row</function> többszöri alkamazásával végig
     tudjuk járni az eredményhalmazt, mivel az mindig a következõ sort tölti
     be, majd ha elfogytak a sorok, hamisat ad vissza.
    </para>
    <para>
     Lásd még a <function>mysql_fetch_array</function>,
     <function>mysql_fetch_object</function>,
     <function>mysql_data_seek</function>,
     <function>mysql_fetch_lengths</function> és a 
     <function>mysql_result</function> függvényeket!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-flags">
   <refnamediv>
    <refname>mysql_field_flags</refname>
    <refpurpose>
     Adott eredmény adott mezejének flagjeit adja vissza.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_flags</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_offset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_field_flags</function> függvény az adott mezõ flagjeit
     adja vissza. A flagek egyszerû szavak, melyeket egyetlen szóköz választ
     el, így a kapott értéket feldolgozhatod a <function>explode</function>
     függvény segítségével.
    </para>
    <para>A MySQL a következõ flageket támogatja (feltéve, hogy elég friss a
    használt MySQL, amit használsz): "not_null", "primary_key",
     "unique_key", "multiple_key", "blob", "unsigned", "zerofill",
     "binary", "enum", "auto_increment", "timestamp".
    </para>
    <para> 
     Kompatíbilitási okokból a <function>mysql_fieldflags</function> függvény
     is használható. 
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-name">
   <refnamediv>
    <refname>mysql_field_name</refname> 
    <refpurpose>
     Adott mezõ nevét adja vissza
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_name</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_index</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_field_name</function> függvény az eredményben szereplõ
     megadott indexû mezõ nevét adja vissza. A <parameter>result</parameter>
     paraméternek érvényes eredményazonosítónak kell lennie,
     a <parameter>field_index</parameter> paraméter pedig a mezõ indexe.
    </para>
    <note>
     <para>
      A <parameter>field_index</parameter> paraméter számozása 0-tól kezdõdik.
     </para>
     <para>
      Például a harmadik mezõ indexe 2, a negyedik mezõé pedig 3.
     </para>
    </note>
    <para>
     <example>
      <title><function>mysql_field_name</function> példa</title>
      <programlisting role="php">
// A felhasznalok tábla három mezõbõl áll:
//   user_id
//   felhasznalonev
//   jelszo.

$res = mysql_db_query("felhasznalok", "select * from felhasznalok", $link);

echo mysql_field_name($res, 0) . "\n";
echo mysql_field_name($res, 2);
      </programlisting>
     </example>
    </para>
    <para>
     A fenti példa ay alábbi kimenetet eredményezi:
     <informalexample>
      <programlisting>
user_id
jelszo
      </programlisting>
     </informalexample>
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_fieldname</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-len">
   <refnamediv>
    <refname>mysql_field_len</refname> 
    <refpurpose>
     A kérdezett mezõ hosszát adja vissza
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_field_len</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_offset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      A <function>mysql_field_len</function> függvény a kérdezett mezõ
      hosszával tér vissza.
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_fieldlen</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-seek">
   <refnamediv>
    <refname>mysql_field_seek</refname>
    <refpurpose>
     Az eredménymutatót a kívánt pozícióba mozgatja
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_field_seek</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_offset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A megadott helyre mozgatja az eredmény-mutatót. Ha a következõ
     <function>mysql_fetch_field</function> függvényhívás nem tartalmaz mezõ
     pozíciót, akkor a
     <function>mysql_field_seek</function> függvény által visszaadott
     mezõpozíciót fogja visszaadni.
    </para>
    <para>
     Lásd még a <function>mysql_fetch_field</function> függvényt!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-table">
   <refnamediv>
    <refname>mysql_field_table</refname>
    <refpurpose>
     Visszaadja annak a táblának a nevét, melyben a megadott mezõ található
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_table</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_offset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A függvény annak a táblának a nevével tér vissza, melyben a megadott mezõ
     szerepel.
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_fieldtable</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-field-type">
   <refnamediv>
    <refname>mysql_field_type</refname>
    <refpurpose>
     Az eredmény adott mezejének típusát adja vissza
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_field_type</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>field_offset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_field_type</function> függvény hasonló a
     <function>mysql_field_name</function> függvényhez. A paraméterek
     megegyeznek, de a függvény a mezõ típusával tér vissza. A mezõtípus az
     "int", "real", "string", "blob" vagy hasonló, a
     <ulink url="&url.mysql.docs;">MySQL dokumentációban</ulink> található
     típusok közül való.
     <example>
      <title>mysql mezõtípusok</title>
      <programlisting role="php">
&lt;?php 

mysql_connect ("localhost:3306");
mysql_select_db ("wisconsin");
$eredmeny = mysql_query ("SELECT * FROM onek");
$mezo = mysql_num_fields ($eredmeny);
$sor   = mysql_num_rows ($eredmeny);
$i = 0;
$table = mysql_field_table ($eredmeny, $i);
echo "A '$table' nevû táblának $mezo mezõje és $sor sora van &lt;BR&gt;";
echo "A táblának az alábbi mezõi vannak&lt;BR&gt;"; 
while ($i &lt; $mezo) {
    $tipus = mysql_field_type  ($eredmeny, $i);
    $nev   = mysql_field_name  ($eredmeny, $i);
    $hossz = mysql_field_hossz ($eredmeny, $i);
    $flags = mysql_field_flags ($eredmeny, $i);
    echo "$tipus $nev $hossz $flags."&lt;BR>";
    $i++;
}
mysql_close();

?>
      </programlisting>
     </example>
    </para>
    <para> 
     Kompatíbilitási okokból a <function>mysql_fieldtype</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-free-result">
   <refnamediv>
    <refname>mysql_free_result</refname>
    <refpurpose>Felszabadítja az eredmény által lefoglalt memóriát</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_free_result</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_free_result</function> függvény az összes
     <parameter>result</parameter> eredményazonosító által használt memóriát
     felszabadítja.
    </para>
    <para>
     A <function>mysql_free_result</function> függvényt csak akkor kell
     meghívnod, ha nagyon aggódsz a használt memória mennyisége miatt. A
     memória a php program végén úgyis felszabadul.
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_freeresult</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-insert-id">
   <refnamediv>
    <refname>mysql_insert_id</refname>
    <refpurpose>
     Visszaadja az elõzõ INSERT mûvelet által elõállított id-t adja vissza.
     Get the id generated from the previous INSERT operation
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_insert_id</function></funcdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_insert_id</function> függvény az elõzõ INSERT
     mûveletben szereplõ AUTO_INCREMENT tulajdonságú mezõ értékét adja vissza.
     Ha megadjuk <parameter>link_identifier</parameter>-t az adott
     linkkel rendelekezõ, ha nem adunk meg paramétert, az utolsó megnyitott
     linkhez tartozó eredményt szolgáltatja. 
    </para>
    <para>
     A <function>mysql_insert_id</function> függvény 0-val tér vissza, ha az
     elõzõ kérésben nem jött létre AUTO_INCREMENT érték. Ha szükséged van
     késõbb az értékre, hívd meg a <function>mysql_insert_id</function> <!--
     nem volt function tag -->
     függvényt rögtön az értéket generáló lekérdezés után!
    </para>
    <note>
     <para>
      A <literal>LAST_INSERT_ID()</literal> függvény értéke mindig az utoljára
      elõállított AUTO_INCREMENT értéket tartalmazza, nem törlõdik az értéke
      lekérdezések között.
    </para>
    </note>
    <warning>
     <para>
      A <function>mysql_insert_id</function> függvény a MySQL C API függvény 
      <literal>mysql_insert_id()</literal> visszatérési értékét 
      <literal>long</literal>-gá konvertálja. Ha az AUTO_INCREMENT mezõd
      mondjuk BIGINT típusú, akkor a
      <function>mysql_insert_id</function> függvény rossz eredményt adhat
      vissza. Ezért inkább a belsõ
      <literal>LAST_INSERT_ID()</literal> MySQL függvényt használd!
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-dbs">
   <refnamediv>
    <refname>mysql_list_dbs</refname> 
    <refpurpose>
     Kilistázza a MySQL szerveren elérhetõ adatbázisokat
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_list_dbs</function></funcdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_list_dbs</function> függvény egy eredménymutatót ad
     vissza, ami a mysql démontól elérhetõ adatbázisokat tartalmazza.
     Használd a <function>mysql_tablename</function> függvényt, hogy az összes
     táblát elérd! <!--vagy valami ilyesmi... -->
    </para>
    <para>
     <example>
      <title><function>mysql_list_dbs</function> példa</title>
      <programlisting role="php">
$link = mysql_connect('localhost', 'nevem', 'titok');
$db_list = mysql_list_dbs($link);

while ($sor = mysql_fetch_object($db_list)) {
  echo $sor->Database . "\n";
}
      </programlisting>
     </example>
    </para>
    <para>
     A fenti példa az alábbi kimenetet eredményezi.
     <informalexample>
      <programlisting>
adatbázis1
adatbázis2
adatbázis3
...
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      A fenti program egyszerûen bõvíthetõ a
      <function>mysql_fetch_row</function> függvénnyel vagy más hasonló
      függvénnyel.
     </para>
    </note>
    <para>
     Kompatíbilitási okokból a <function>mysql_listdbs</function> függvény
     is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-fields">
   <refnamediv>
    <refname>mysql_list_fields</refname>
    <refpurpose>Kilistázza a MySQL eredmény mezõit</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_list_fields</function></funcdef>
      <paramdef>string <parameter>database_name</parameter></paramdef>
      <paramdef>string <parameter>table_name</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_list_fields</function> függvény az adott tábláról
     szolgáltat információt. A paraméterek az adatbázis és a tábla neve. A
     függvény egy eredmény-azonosító tér vissza, amit a 
     <function>mysql_field_flags</function>,
     <function>mysql_field_len</function>,
     <function>mysql_field_name</function>, és a
     <function>mysql_field_type</function> függvényekkel hámozhatsz meg.
    </para>
    <para>
     Az eredmény-azonosító egy pozitív egész szám. A függvény hiba esetén
     -1-gyel tér vissza. A hiba szöveges leírása a
     <literal>$phperrmsg</literal> változóban található, és ha nem
     <literal>@mysql()</literal> &lt;- így hívtad meg a függvényt, akkor a
     hiba kiírásra kerül [már ha nem pl. egy Javascript kód belsejében, vagy
     egy keretrendszer tetején akarná kiírni szegény PHP...].
    </para>
    <para>
     <example>
      <title><function>mysql_list_fields</function> példa</title>
      <programlisting role="php">
$link = mysql_connect('localhost', 'nevem', 'titok');

$mezo = mysql_list_fields("adatbázis1", "tabla1", $link);
$oszlop = mysql_num_fields($mezo);

for ($i = 0; $i &lt; $oszlop; $i++) {
  echo mysql_field_name($mezo, $i) . "\n";;
}
      </programlisting>
     </example>
    </para>
    <para>
     A fenti példa az alábbi kimenetet eredményezi:
     <informalexample>
      <programlisting>
mezo1
mezo2
mezo3
...
      </programlisting>
     </informalexample>
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_listfields</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-list-tables">
   <refnamediv>
    <refname>mysql_list_tables</refname>
    <refpurpose>Adott adatbázisbeli táblaneveket listázza</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_list_tables</function></funcdef>
      <paramdef>string <parameter>database</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_list_tables</function> függvény veszi az
     adatbázisnevet, és egy eredmény-mutatót ad vissza, a
     <function>mysql_db_query</function> függvényhez hasonlóan. A
     <function>mysql_tablename</function> függvény használható arra, hogy az
     eredmény-mutatóból a tényleges táblaneveket megállapítsd.
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_listtables</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-fields">
   <refnamediv>
    <refname>mysql_num_fields</refname>
    <refpurpose>Az eredményben szereplõ mezõk számát adja</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_num_fields</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_num_fields</function> függvény az eredményhalmazban
     levõ mezõk számát adja vissza.
    </para>
    <para> 
     Lásd még a 
     <function>mysql_db_query</function>,
     <function>mysql_query</function>,
     <function>mysql_fetch_field</function> és a
     <function>mysql_num_rows</function> függvényeket!</para>
    <para>
     Kompatíbilitási okokból a <function>mysql_numfields</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-num-rows">
   <refnamediv>
    <refname>mysql_num_rows</refname>
    <refpurpose>Az eredményben szereplõ sorok számát adja vissza.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_num_rows</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_num_rows</function> függvény az eredményhalmazban
     szereplõ sorok számát adja vissza. A függvény csak SELECT kérésre
     használható. Ha egy INSERT, UPDATE vagy DELETE kérésben érintett sorok
     számát szeretnéd megtudni, használd a
     DELETE, use <function>mysql_affected_rows</function> függvényt!
     <example>
      <title>
       <function>
	mysql_num_rows példa Szerzõ: crubel@trilizio.org
       </function>
      </title>
      <programlisting role="php">
&lt;?php
$conn = mysql_connect("hostcim", "juzer", "jelszo"); 
mysql_select_db("adatbázis",$conn); // kell, ha több adatbázis van
$Eredmenytagokszama = mysql_query("SELECT * FROM Szamla",$conn); 
$Tagokszama = mysql_num_rows($Eredmenytagokszama); 
echo "$Tagokszama tag van";
?>                          
      </programlisting>
     </example>
    </para>
    <para>
     Lásd még a  
     <function>mysql_db_query</function>, 
     <function>mysql_query</function> és a
     <function>mysql_fetch_row</function> függvényeket!
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_numrows</function> can
     also be used.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-pconnect">
   <refnamediv>
    <refname>mysql_pconnect</refname> 
    <refpurpose>
     Perzisztens kapcsolatot nyit meg a MySQL szerverhez
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_pconnect</function></funcdef>
      <paramdef>string 
       <parameter>
        <optional>hostname
 	<optional>:port</optional>  
 	<optional>:/path/to/socket</optional>
        </optional>
       </parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>username</optional></parameter>
      </paramdef>
      <paramdef>string 
       <parameter><optional>password</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Visszatérési értéke: Egy pozitív MySQL perzisztens kapcsolatazonosító
     siker esetén, vagy false, ha hiba történt.
    </para>
    <para>
     A <function>mysql_pconnect</function> függvény létrehoz egy kapcsolatot a
     MySQL szerverhez. Az elhagyott paraméterek az alábbi értékeket veszik
     fel:
     <parameter>host:port</parameter> =
     'localhost:3306', <parameter>username</parameter> = annak a
     felhasználónak a neve, akié a szerver folyamat és végül:
     <parameter>password</parameter> = üres jelszó.
    </para>
    <para>
     A <parameter>hostname</parameter> karakterlánc a port számát is
     tartalmazhatja; pl.: &quot;hostname:port&quot; vagy a socket teljes
     elérési útvonalát pl.: &quot;:/path/to/socket&quot;. Ez persze csak a
     helyi gépen mûködik.
     <note>
      <para>
       A &quot;:port&quot; használata a 3.0B4-es verzió óta lehetséges.
      </para>
      <para>
       A &quot;:/path/to/socket&quot; forma használata a 3.0.10-es verzió óta
       támogatott.
      </para>
     </note>
    </para>     
    <para>
     A <function>mysql_pconnect</function> függvény a
     <function>mysql_connect</function> függvényhez hasonlóan mûködik, csupán
     két nagyobb különbség van:
    </para>
    <para> 
     Elõször is, a kapcsolat felvételekor a függvény elõször megpróbál egy
     (perzisztens) kapcsolatot találni, amely már nyitva van arra a hostra
     ugyanazzal a név/jelszó párossal. Ha talál ilyet, akkor ennek a kapocsnak
     az azonosítóját adja vissza és nem nyit újat.
    </para>
    <para> 
     Másodszor pedig a kapcsolat az SQL szerverhez nem kerül bezárásra, amikor
     a php program véget ér, hanem megmarad késõbbi felhasználásra.
     (A <function>mysql_close</function> függvény nem fogja neked lezárni a
     <function>mysql_pconnect</function> függvénnyel megnyitott kapcsolatokat).
    </para>
    <para> 
     Az ilyen típusú kapcsolatot ezért hívják 'perzisztensnek'.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-query">
   <refnamediv>
    <refname>mysql_query</refname>
    <refpurpose>MySQL kérést küld a szervernek</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_query</function></funcdef>
      <paramdef>string <parameter>query</parameter></paramdef>
      <paramdef>int 
       <parameter><optional>link_identifier</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_query</function> függvény kérést küld a megadott
     kapcsolat-azonosítójú szerver aktív adatbázisához.
     Ha nem adsz meg <parameter>link_identifier</parameter>-t, akkor a
     legutóbb megnyitott kapcsolatot használja a függvény. Ha nincs nyitva
     ilyen kapcsolat, akkor a függvény megpróbál nyitni egyet, mintha a
     <function>mysql_connect</function> függvényt hívtuk volna paraméterek
     nélkül.
    </para>
    <note>
     <para>
      A kérésnek nem szabad pontosvesszõre végzõdnie.
     </para>
    </note>
    <para>
     A <function>mysql_query</function> függvény TRUE-val (nemnulla) vagy
     FALSE-szal tér vissza, attól függõen, hogy a kérés teljesítése sikeres
     volt-e. A TRUE visszatérési érték azt jelenti, hogy a kérés
     szintaktikailag helyes volt, és lefuttatta a szerver. Az érintett sorok
     számáról azonban nem mond semmit. Elõfordulhat ugyanis, hogy a kérés
     sikeresen lefutott, de nem érintett egyetlen sort sem, vagy az
     eredményben egyetlen sor sincs.
    </para>
    <para>
     A következõ kérés szintaktikailag rossz, igy a 
     <function>mysql_query</function> függvény meghiúsul és FALSE eredményt
     ad:
     <example>
      <title><function>mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$eredmeny = mysql_query ("SELECT * WHERE 1=1")
  or die ("Érvénytelen lekérdezés");
?>
      </programlisting>
     </example>
    </para>
    <para>
     Az alábbi kérés szemantikailag helytelen, ha nincs 
     <literal>my_col</literal> nevû oszlop a 
     <literal>my_tbl</literal> nevû táblában, így a
     <function>mysql_query</function> meghiúsul és FALSE értékkel tér vissza.
     <example>
      <title><function>mysql_query</function></title>
      <programlisting role="php">
&lt;?php
$eredmeny = mysql_query ("SELECT my_col FROM my_tbl")
    or die ("Érvénytelen kérés");
?>
      </programlisting>
     </example>
    </para>
    <para>
     A <function>mysql_query</function> függvény akkor is meghiúsul és FALSE
     értékkel tér vissza, ha nincs megfelelõ engedélyed a kérés által
     hivatkozott táblá(k)hoz.
    </para>
    <para>
     Feltéve, hogy a kérés sikeres, meghívhatod a
     <function>mysql_num_rows</function> függvényt, hogy kiderítsd, hány sort
     kaptál vissza a SELECT kérésedre, vagy a
     <function>mysql_affected_rows</function> függvényt, hogy megtudd hány
     sort érintett a DELETE, NSERT, REPLACE vagy UPDATE kérésed.
    </para>
    <para>
     SELECT kérés esetében a <function>mysql_query</function> függvény
     egy új eredmény-azonosítót ad vissza, amit késõbb a 
     <function>mysql_result</function> függvénnyel használhatsz.
     Ha az eredményre már nincs szükség és memóriafóbiád van, akkor a 
     <function>mysql_free_result</function> függvénnyel a foglalt memóriát
     felszabadíthatod, normál esetben megvárod a program végét és a memória
     felszabadul.
    </para>
    <para>
     Lásd még a <function>mysql_affected_rows</function>,
     <function>mysql_db_query</function>,
     <function>mysql_free_result</function>,
     <function>mysql_result</function>,
     <function>mysql_select_db</function> és a
     <function>mysql_connect</function> függvényeket!
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-result">
   <refnamediv>
    <refname>mysql_result</refname>
    <refpurpose>Eredmény egy sorának lekérdezése</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>mysql_result</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>row</parameter></paramdef>
      <paramdef>mixed 
       <parameter>
        <optional>field</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     A <function>mysql_result</function> függvény egy MySQL eredményhalmaz egy
     elemét adja vissza. A mezõ paraméter a mezõ sorszáma vagy neve lehet vagy
     táblanév pont mezõnév (táblanév.mezõnév). Ha az oszlop más néven lett
     lekérve, mint ami az oszlop eredeti neve volt
     ('select izé as bigyó from...'), akkor használd azt a bizonyos 'más
     nevet'!
    </para>
    <para>
     Amikor nagy eredményhalmazokkal dolgozol, akkor mérlegelned kell az olyan
     függvyének használatát, amelyek az egész eredménysort betöltik. Mivel
     ezek több cella tartalmát olvassák be egy függvényhívással, így ezek
     SOKKAL gyorsabbak, mint a
     <function>mysql_result</function> függvény hívogatása. Említést érdemel
     még, hogy a numerikus index használata jóval gyorsabb, mint a mezõnév
     vagy a táblanév.mezõnév forma használata.
    </para>
    <para>
     A <function>mysql_result</function> függvényhívásokat más, ugyanazon
     eredményhalmazzal foglalkozó függvényhívásokkal nem illik (gyk. TILOS)
     együtt használni!
    </para>
    <para>
     Ajánlott az alábbi, gyors [és programozóbarát] függvények használata:
     <function>mysql_fetch_row</function>, 
     <function>mysql_fetch_array</function> és
     <function>mysql_fetch_object</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-select-db">
   <refnamediv>
    <refname>mysql_select_db</refname>
    <refpurpose>Kiválaszt egy MySQL adatbázist</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mysql_select_db</function></funcdef>
      <paramdef>string <parameter>database_name</parameter></paramdef>
      <paramdef>int 
       <parameter>
        <optional>link_identifier</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     Visszatérési érték: true, ha sikeres; false ha hiba történt.
    </para>
    <para> 
     A <function>mysql_select_db</function> függvény az adott
     kapcsolat-azonosítójú szerverkapcsolat adatbázisát módosítja. Ha nincs
     kapcsolat-azonosító megadva, akkor az utoljára megnyitott kapcsolatban
     választ adatbázist. Ha ilyen sincs, akkor megpróbál a MySQL szerverhez
     kapcsolódni úgy, mintha a <function>mysql_connect</function> függvény
     lett volna meghívva paraméterek nélkül.
    </para>
    <para>
     Az összes további <function>mysql_query</function> függvény az aktív
     adatbázison fog történni.
    </para>
    <para> Lásd még a
     <function>mysql_connect</function>, 
     <function>mysql_pconnect</function> és a
     <function>mysql_query</function> függvényeket!
    </para>
    <para>
     Kompatíbilitási okokból a <function>mysql_selectdb</function>
     függvény is használható.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mysql-tablename">
   <refnamediv>
    <refname>mysql_tablename</refname>
    <refpurpose>Egy tábla nevével tér vissza</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mysql_tablename</function></funcdef>
      <paramdef>int <parameter>result</parameter></paramdef>
      <paramdef>int <parameter>i</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para> 
     A <function>mysql_tablename</function> függvény veszi a
     <function>mysql_list_tables</function> függvény által visszaadott
     eredmény-mutatót és egy indexet, majd megmondja az oszlophoz tartozó
     tábla nevét. A
     <function>mysql_num_rows</function> függvény használható arra, hogy
     megmondja hány tábla van az eredményhalmazban.
     <example>
      <title><function>Mysql_tablename</function> példa</title>
      <programlisting role="php">
&lt;?php 
mysql_connect ("localhost:3306");
$eredmeny = mysql_list_tables ("wisconsin");
$i = 0;
while ($i &lt; mysql_num_rows ($eredmeny)) {
    $tb_names[$i] = mysql_tablename ($eredmeny, $i);
    echo $tb_names[$i] . "&lt;BR>";
    $i++;
}
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
