 <reference id="ref.mhash">
  <title>Mhash függvények</title>
  <titleabbrev>mhash</titleabbrev>
  
  <partintro>
   <para>
    Ezek a függvények az <ulink url="&url.mhash;">mhash</ulink>-el
    mûködnek együtt.
   </para>
   <para>
    Ezek egy felületet biztosítanak az mhash könyvtárhoz. Az mhash
    széles skáláját támogatja a hash algoritmusoknak, mint például
    az MD5, SHA1, GOST és számos más.
   </para>
   <para>
    Ahhoz, hogy használhasd ezeket, le kell töltened az mhash
    csomagot az <ulink url="&url.mhash;">mhash webhelyrõl</ulink>
    és követned kell a telepítési utasításokat, amiket a csomagban
    találsz. A PHP-t a <option role="configure">--with-mhash</option>
    paraméterrel kell fordítanod, hogy engedélyezd ezt a kiterjesztést.
   </para>
   <para>
    Az mhash például ellenõrzõösszegek, kivonatok, azonosítási kódok
    elõállítására is használható.
   </para>
   <para>
    <example>
     <title>Az MD5 kivonat és a hmac elõállítása és kiírása hexa formában</title>
     <programlisting role="php">
<![CDATA[
<?php
$input = "what do ya want for nothing?";
$hash = mhash (MHASH_MD5, $input);
print "The hash is ".bin2hex ($hash)."\n&lt;br>";
$hash = mhash (MHASH_MD5, $input, "Jefe");
print "The hmac is ".bin2hex ($hash)."\n&lt;br>";
?>
]]>
     </programlisting>
    </example>
    Ez a következõ kimenetet eredményezi:
    <programlisting>
<![CDATA[
The hash is d03cb659cbf9192dcd066272249f8412 
The hmac is 750c783e6ab0b503eaa86e310a5db738 
]]>
    </programlisting>
    A támogatott hash-ek teljes listájához nézd meg az
    mhash dokumentációt. Az általános szabály, hogy a hash
    algoritmust az MHASH_HASHNEVE formában tudod elérni
    PHP-bõl. Például a TIGER eléréséhez az MHASH_TIGER
    PHP konstans használható.
   </para>
   <para>
    Itt következnek az mhash által jelenleg támogatott hash-ek.
    Ha találsz az mhash dokumentációban itt nem listázott elemet,
    nyugodtan feltételezheted, hogy az használható, és ez a dokumentáció
    nem aktuális.
    <itemizedlist>
     <listitem>
      <simpara>
       MHASH_MD5
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_SHA1
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL256
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL192
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL160
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_RIPEMD160
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_GOST
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_TIGER
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32B
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </partintro>
  
  <refentry id="function.mhash-get-hash-name">
   <refnamediv>
    <refname>mhash_get_hash_name</refname>
    <refpurpose>A megadott hash nevét adja vissza</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash_get_hash_name</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Az <function>mhash_get_hash_name</function> a megadott hash nevével
     tér vissza.
    </para>
    <para>
     Ha az <function>mhash_get_hash_name</function> függvénynek átadott
     hash azonosító egy nemlétezõ hash-re hivatkozik, FALSE értékkel tér vissza.
    </para>
    <para>
     <example>
      <title><function>mhash_get_hash_name</function> példa</title>
      <programlisting>
<![CDATA[
<?php
$hash = MHASH_MD5;

print mhash_get_hash_name ($hash);
?>
]]>
      </programlisting>
     </example>
      Ez a következõ kimenetet eredményezi:
     <programlisting>
MD5
     </programlisting>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mhash-get-block-size">
   <refnamediv>
    <refname>mhash_get_block_size</refname>
    <refpurpose>A megadott hash blokkméretével tér vissza</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mhash_get_block_size</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Az <function>mhash_get_block_size</function> a megadott
     <parameter>hash</parameter> blokkméretét adja vissza
     byte-okban mérve.
    </para>
    <para>
     Ha az <function>mhash_get_block_size</function> 
     függvénynek érvénytelen <parameter>hash</parameter>
     paramétert adsz, FALSE értékkel tér vissza.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.mhash-count">
   <refnamediv>
    <refname>mhash_count</refname>
    <refpurpose>Visszaadja a legnagyobb elérhetõ hash azonosítót</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mhash_count</function></funcdef>
      <paramdef>void </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Az <function>mhash_count</function> visszaadja a legnagyobb elérhetõ
     hash azonosítót. A hash-ek nullától eddig a számig kapnak
     azonosító számokat.
    </para>
    <para>
     <example>
      <title>Az összes hash használata</title>
      <programlisting role="php">
<![CDATA[
<?php

$nr = mhash_count();

for ($i = 0; $i &lt;= $nr; $i++) {
    echo sprintf ("The blocksize of %s is %d\n", 
        mhash_get_hash_name ($i),
        mhash_get_block_size ($i));
}
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
    
  <refentry id="function.mhash">
   <refnamediv>
    <refname>mhash</refname>
    <refpurpose>Hash számítás</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>[ key ]</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Az <function>mhash</function> alkalmazza a <parameter>hash</parameter>
     által megadott algoritmust a <parameter>data</parameter> paraméterre, és
     visszatér az eredmény hash-el (amit kivonatkank [digest-nek] is hívnak).
     Ha a <parameter>key</parameter> paramétert is megadod, visszaadja
     az keletkezõ HMAC-ot. A HMAC egy kulcsos hash-elés üzenet azonosításra,
     vagy csak egyszerûen egy üzenet kivonat ami egy megadott kulcstól
     függ. Nem minden mhash algoritmus használható HMAC módban.
     Hiba esetén a függvény FALSE értéket ad.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.mhash-keygen-s2k">
   <refnamediv>
    <refname>mhash_keygen_s2k</refname>
    <refpurpose>Kulcsot generál</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Leírás</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mhash_keygen_s2k</function></funcdef>
      <paramdef>int <parameter>hash</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string <parameter>salt</parameter></paramdef>
      <paramdef>int <parameter>bytes</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Az <function>mhash_keygen_s2k</function> egy olyan kulcsot generál,
     ami <parameter>bytes</parameter> hosszú, és a megadott jelszót
     figyelembe véve készül. Az S2K algoritmust használja, ami az OpenPGP
     dokumentumban (RFC 2440) definiált. A megadott 
     <parameter>hash</parameter> algortmust használja a kulcs elõállítására.
     A <parameter>salt</parameter> minden generált kulcsra más-más
     kell legyen, kellõkképpen véletlenszerû értékekkel, hogy különbözõ
     kulcsok álljanak elõ. A salt-nak ismertnek kell lennie,
     amikor ellenõrzöd a kulcsokat, tehát jó ötlet ehhez fûzni
     a kulcsokat. A salt-nak mindig nyolc karakter hosszúnak kell
     lennie, ha rövidebbet adsz meg, nulákkal töltõdik fel.
     Tartsd szem elõtt, hogy a felhasználók által beadott jelszavak
     nem túlságosan alkalmasak titkosítási rendszerek kulcsaiként,
     mivel a felhasználók általában jól begépelhetõ kulcsot
     választanak. Ezek a jelszavak csak 6-7 bitet (vagy még
     kevesebbet) használnak ki karakterenként. Nagyon ajánlott
     a beadott jelszóra egy olyan átalakítás használata, mint
     ez a függvény.
    </para>
   </refsect1>
  </refentry>

 </reference> 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
