<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
 <chapter id="chm.skins">
  <title>Skin development</title>

  <para>
   This edition of the PHP Manual allows users to choose from skins to
   display the contents, as well as develop custom skins to meet some
   special needs. We decided to support skins because we realized that
   one skin cannot satisfy everybodies needs in a such heavily used
   edition.
  </para>
  
  <para>
   We included two skins by default inside the CHM. These cannot be modified
   or removed, so if you have the CHM, you have these two skins inside. The
   Low skin is optimized for small window display, the High skin is a
   variation of the Low one with some graphics added to spice it up.
  </para>
  
  <para>
   A skin must have at least two files, a skin loader JavaScript file and
   a CSS file. The two inline skins have thes files inside the CHM. The
   skin loader JS should at least load in the CSS file and display the
   page contents to the viewer. Theoretically there are two kinds of skins:
   CSS skins and Full skins. CSS skins only modify the CSS and does not
   amend the page layout. Full skins also modify the page layout. We have
   included sample skins for both the CSS skin type and the Full skin type.
  </para>
  
  <sect1 id="chm.skins.display">
   <title>Page Display Process</title>

   <para>
    If you are going to develop your own skin, you should now how one
    page is loaded and displayed to the user, and how a skin fits in
    this process. For these paragraphs, we assume that you have put
    your CHM into <filename>c:\phpmanual</filename>, so it's accessible
    as <filename>c:\phpmanual\php_manual_LANG.chm</filename> (where LANG
    is the language code), and you would like to see the function page
    of "echo", which is <filename>function.echo.html</filename> inside
    the CHM. See the <link linkend="chm.integration">sections about
    integration</link> for more information on CHM contents.
    <itemizedlist>
     <listitem>
      <simpara>
       First of all the HTML content is loaded in from
       <filename>function.echo.html</filename>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       At the top of this file, there is a HTML &lt;script&gt; tag, which
       loads in the <filename>_script.js</filename> file from the CHM. This
       file contains all the JS code needed to move on with the process.
       Most importantly this JS defines many variables (like where the CHM
       is, or what is the actual page viewed) and many functions to print
       out the context menu or handle online functions.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       At last <filename>_script.js</filename> loads in the preferences
       file from outside the CHM (in <filename>c:\phpmanual</filename> in
       our example). This JS file defines the preference variables, and
       calls back <literal>prefHandler()</literal> which is also defined in
       <filename>_script.js</filename>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       That function loads in the skin JS file as the preferences
       dictate. The sknin JS file should load in the needed CSS
       file, and define a <literal>displayPage()</literal> function,
       which displays the page if called.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       The HTML file (<filename>function.echo.html</filename> in this
       example) also contains a function call to load in the user notes,
       which simply puts the notes into this HTML file using DHTML to
       be displayed as if they were here before...
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       The HTML file also contains a body onload attribute which
       calls the skin-defined <literal>displayPage()</literal> function
       to show the page to the user. This is the last function called,
       it should present the page in it's complete form to the user.
      </simpara>
     </listitem>
    </itemizedlist>
    Every action is syncronized with calling back a function in
    the previously loaded file when the JS is in memory. The notes
    loading and skin JS loading is only syncronized with the page's
    onload event (which as the Microsoft documentation says only fires
    if the page is completely loaded).
   </para>
   <para>
    This load and callback chain may seem to be too complicated, but
    so far this seemed to be the best way to do as many things as
    possible paralelly, while also syncronize some calls.
   </para>
   <para>
    As you can see your skin JavaScript file is loaded in by
    <filename>_script.js</filename> and it's <function>displayPage()</function>
    function is called by the body onload event.
   </para>
  </sect1>
   
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
