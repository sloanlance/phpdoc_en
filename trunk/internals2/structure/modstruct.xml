<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- $Revision: 1.4 $ -->
 <sect1 xml:id="internals2.structure.modstruct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>The zend_module structure</title>
  <para>
   The main source file of a PHP extension contains several new constructs for
   a C programmer. The most important of these, the one touched first when
   starting a new extension, is the <literal>zend_module</literal> structure.
   This structure contains a wealth of information that tells the Zend Engine
   about the extension's dependencies, version, callbacks, and other critical
   data. The structure has mutated considerably over time; this section will
   focus on the structure as it has appeared since PHP 5.0, and will identify
   the very few parts which have changed in PHP 5.1 and 5.2.
  </para>
  
  <para>
   The <literal>zend_module</literal> declaration from
   <filename>example.c</filename> looks like this before any code has been
   written (the example file was generated by
   <command>ext_skel --extname=example</command>):
  </para>
  
  <example xml:id="internals2.structure.modstruct.example-decl">
   <title>zend_module declaration in an example extension</title>
   <programlisting role="c">
<![CDATA[
/* {{{ example_module_entry
 */
zend_module_entry example_module_entry = {
#if ZEND_MODULE_API_NO >= 20010901
    STANDARD_MODULE_HEADER,
#endif
    "example",
    example_functions,
    PHP_MINIT(example),
    PHP_MSHUTDOWN(example),
    PHP_RINIT(example),        /* Replace with NULL if there's nothing to do at request start */
    PHP_RSHUTDOWN(example),    /* Replace with NULL if there's nothing to do at request end */
    PHP_MINFO(example),
#if ZEND_MODULE_API_NO >= 20010901
    "0.1", /* Replace with version number for your extension */
#endif
    STANDARD_MODULE_PROPERTIES
};
/* }}} */
]]>
   </programlisting>
  </example>
  
  <para>
   This may look a bit daunting at first glance, but most of it is very simple
   to understand. Here's the declaration of <literal>zend_module</literal> from
   <filename>zend_modules.h</filename> in PHP 5.2, along with a few relevant
   nearby constants:
  </para>
  
  <example xml:id="internals2.structure.modstruct.struct-defn">
   <title>zend_module definition in PHP 5.2</title>
   <programlisting role="c">
<![CDATA[
#define ZEND_MODULE_API_NO 20060613
struct _zend_module_entry {
    unsigned short size;
    unsigned int zend_api;
    unsigned char zend_debug;
    unsigned char zts;
    struct _zend_ini_entry *ini_entry;
    struct _zend_module_dep *deps;
    char *name;
    struct _zend_function_entry *functions;
    int (*module_startup_func)(INIT_FUNC_ARGS);
    int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    int (*request_startup_func)(INIT_FUNC_ARGS);
    int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
    char *version;
    size_t globals_size;
#ifdef ZTS
    ts_rsrc_id* globals_id_ptr;
#else
    void* globals_ptr;
#endif
    void (*globals_ctor)(void *global TSRMLS_DC);
    void (*globals_dtor)(void *global TSRMLS_DC);
    int (*post_deactivate_func)(void);
    int module_started;
    unsigned char type;
    void *handle;
    int module_number;
};
#define STANDARD_MODULE_HEADER_EX sizeof(zend_module_entry), ZEND_MODULE_API_NO, ZEND_DEBUG, USING_ZTS
#define STANDARD_MODULE_HEADER \
    STANDARD_MODULE_HEADER_EX, NULL, NULL
#define NO_VERSION_YET NULL

#define STANDARD_MODULE_PROPERTIES_EX 0, 0, NULL, 0
#define STANDARD_MODULE_PROPERTIES \
	NO_MODULE_GLOBALS, NULL, STANDARD_MODULE_PROPERTIES_EX
#define NO_MODULE_GLOBALS 0, NULL, NULL, NULL
]]>
   </programlisting>
  </example>

  <variablelist>

   <varlistentry>
    <term><literal>size</literal></term>
    <listitem>
     <para>
      The size in bytes of the structure. This will always be to
      <literal>sizeof(zend_module_entry)</literal>.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>zend_api</literal></term>
    <listitem>
     <para>
      The version of the Zend API this module was compiled against. This is
      always the constant <constant>ZEND_MODULE_API_NO</constant>.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>zend_debug</literal></term>
    <term><literal>zts</literal></term>
    <listitem>
     <para>
      Flags indicating whether the module was compiled with debugging turned on
      or ZTS (TSRM) enabled. These are always the constants
      <constant>ZEND_DEBUG</constant> and <constant>USING_ZTS</constant>.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>ini_entry</literal></term>
    <listitem>
     <para>
      This pointer is used by Zend internally to keep a non-local reference to
      any INI entries declared for the module. It is managed by Zend and will
      always be given the initial value &null;.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>deps</literal></term>
    <listitem>
     <para>
      A pointer to a list of dependencies for the module.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>name</literal></term>
    <listitem>
     <para>
      The name of the module. This is the short name, such as
      &quot;spl&quot; or &quot;standard&quot;.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>functions</literal></term>
    <listitem>
     <para>
      A pointer to the module's function table, which Zend uses to expose
      functions in the module to user space.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>module_startup_func</literal></term>
    <term><literal>module_shutdown_func</literal></term>
    <term><literal>request_startup_func</literal></term>
    <term><literal>request_shutdown_func</literal></term>
    <listitem>
     <para>
      These are callback functions that Zend will call at particular times
      during PHP's processing. Specifically, at first initialization, at final
      shutdown, at the start of each particular request, and at the end of each
      request.
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>info_func</literal></term>
    <listitem>
     <para>
      This is another callback function, which Zend will call when a script
      invokes <function>phpinfo</function>.
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>version</literal></term>
    <listitem>
     <para>
      A string giving the version of the module, as specified by the module
      developer. It is <emphasis>strongly</emphasis> recommended that the
      version number be either in the format expected by
      <function>version_compare</function>, or a CVS or SVN revision number
      (i.e. &quot;$Rev$&quot;).
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>globals_size</literal></term>
    <listitem>
     <para>
      The size of the globals structure for this module, if any.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>globals_id_ptr</literal></term>
    <term><literal>globals_ptr</literal></term>
    <listitem>
     <para>
      Only one of these two fields will exist, depending upon whether the
      <constant>USING_ZTS</constant> constant is &true;. The former is an index
      into TSRM&apos;s allocation table for the module&apos;s globals, and the
      latter is a pointer directly to the globals.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>globals_ctor</literal></term>
    <term><literal>globals_dtor</literal></term>
    <listitem>
     <para>
      These functions are called by Zend to set up and destroy a module&apos;s
      globals.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>post_deactivate_func</literal></term>
    <listitem>
     <para>
      This function is called by Zend after request shutdown. It is rarely used.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>module_started</literal></term>
    <term><literal>type</literal></term>
    <term><literal>handle</literal></term>
    <term><literal>module_number</literal></term>
    <listitem>
     <para>
      These fields are used for Zend's internal tracking information and must be
      considered reserved.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_HEADER_EX</constant></term>
    <listitem>
     <para>
      This macro is used by module developers to start the
      <varname>zend_module</varname> structure when the module will specify INI
      entries, dependencies, or both.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_HEADER</constant></term>
    <listitem>
     <para>
      This macro is used to start the <varname>zend_module</varname>
      structure when the developer will not specify INI entries or dependencies.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>NO_VERSION_YET</constant></term>
    <listitem>
     <para>
      This macro should be used by module developers to specify that the module
      has no version. It is not recommended that this be used.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_PROPERTIES_EX</constant></term>
    <listitem>
     <para>
      This macro is used by module developers to end the
      <varname>zend_module</varname> when the module will make use of
      automatic globals, a post-deactivate callback, or both.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><constant>STANDARD_MODULE_PROPERTIES</constant></term>
    <listitem>
     <para>
      This macro is used by module developers to end the
      <varname>zend_module</varname> when the module will not make use of
      automatic globals or a post-deactivate callback.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><constant>NO_MODULE_GLOBALS</constant></term>
    <listitem>
     <para>
      This macro is used by module developers to specify values that tell Zend
      that the module has no global variables.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
  
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
