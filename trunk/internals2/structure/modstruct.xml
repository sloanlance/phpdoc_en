<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- $Revision: 1.5 $ -->
 <sect1 xml:id="internals2.structure.modstruct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>The zend_module structure</title>
  <para>
   The main source file of a PHP extension contains several new constructs for
   a C programmer. The most important of these, the one touched first when
   starting a new extension, is the <literal>zend_module</literal> structure.
   This structure contains a wealth of information that tells the Zend Engine
   about the extension's dependencies, version, callbacks, and other critical
   data. The structure has mutated considerably over time; this section will
   focus on the structure as it has appeared since PHP 5.0, and will identify
   the very few parts which have changed in PHP 5.1, 5.2, and 5.3.
  </para>
  
  <para>
   The <literal>zend_module</literal> declaration from
   <filename>example.c</filename> looks like this before any code has been
   written. The example file was generated by
   <command>ext_skel --extname=example</command>, with some obsolete constructs
   removed:
  </para>
  
  <example xml:id="internals2.structure.modstruct.example-decl">
   <title>zend_module declaration in an example extension</title>
   <programlisting role="c">
<![CDATA[
/* {{{ example_module_entry
 */
zend_module_entry example_module_entry = {
    STANDARD_MODULE_HEADER,
    "example",
    example_functions,
    PHP_MINIT(example),
    PHP_MSHUTDOWN(example),
    PHP_RINIT(example),        /* Replace with NULL if there's nothing to do at request start */
    PHP_RSHUTDOWN(example),    /* Replace with NULL if there's nothing to do at request end */
    PHP_MINFO(example),
    "0.1", /* Replace with version number for your extension */
    STANDARD_MODULE_PROPERTIES
};
/* }}} */
]]>
   </programlisting>
  </example>
  
  <para>
   This may look a bit daunting at first glance, but most of it is very simple
   to understand. Here's the declaration of <literal>zend_module</literal> from
   <filename>zend_modules.h</filename> in PHP 5.3:
  </para>
  
  <example xml:id="internals2.structure.modstruct.struct-defn">
   <title>zend_module definition in PHP 5.3</title>
   <programlisting role="c">
<![CDATA[
struct _zend_module_entry {
    unsigned short size;
    unsigned int zend_api;
    unsigned char zend_debug;
    unsigned char zts;
    const struct _zend_ini_entry *ini_entry;
    const struct _zend_module_dep *deps;
    const char *name;
    const struct _zend_function_entry *functions;
    int (*module_startup_func)(INIT_FUNC_ARGS);
    int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    int (*request_startup_func)(INIT_FUNC_ARGS);
    int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
    char *version;
    size_t globals_size;
#ifdef ZTS
    ts_rsrc_id* globals_id_ptr;
#else
    void* globals_ptr;
#endif
    void (*globals_ctor)(void *global TSRMLS_DC);
    void (*globals_dtor)(void *global TSRMLS_DC);
    int (*post_deactivate_func)(void);
    int module_started;
    unsigned char type;
    void *handle;
    int module_number;
};
]]>
   </programlisting>
  </example>
  
  <para>
   Many of these fields will never be touched by an extension writer. There are
   a number of standard macros that set them to their proper values
   automatically. The macro <constant>STANDARD_MODULE_HEADER</constant> fills in
   everything up to the <varname>deps</varname> field. Alternatively, the
   <constant>STANDARD_MODULE_HEADER_EX</constant> will leave the
   <varname>deps</varname> field empty for the developer's use. The developer is
   always responsible for everything from <varname>name</varname> to
   <varname>version</varname>. After that, the
   <constant>STANDARD_MODULE_PROPERTIES</constant> macro will fill in the rest
   of the structure, or the <constant>STANDARD_MODULE_PROPERTIES_EX</constant>
   macro can be used to leave the extension globals and post-deactivation
   function fields unfilled. Most modern extensions will make use of module
   globals.
  </para>
  
  <variablelist>
   <note>
    <para>
     Fields which are not intended for developers to use are marked by an
     asterisk (*).
    </para>
   </note>
   
   <varlistentry>
    <term><literal>size</literal> *</term>
    <listitem>
     <para>
      The size in bytes of the structure.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>zend_api</literal></term>
    <listitem>
     <para>
      The version of the Zend API this module was compiled against.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>zend_debug</literal></term>
    <term><literal>zts</literal></term>
    <listitem>
     <para>
      Flags indicating whether the module was compiled with debugging turned on
      and/or ZTS (TSRM) enabled.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>ini_entry</literal></term>
    <listitem>
     <para>
      This pointer is used internally by Zend to keep a non-local reference to
      any INI entries declared for the module.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>deps</literal></term>
    <listitem>
     <para>
      A pointer to a list of dependencies for the module.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>name</literal></term>
    <listitem>
     <para>
      The name of the module. This is the short name, such as
      &quot;spl&quot; or &quot;standard&quot;.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>functions</literal></term>
    <listitem>
     <para>
      A pointer to the module's function table, which Zend uses to expose
      functions in the module to user space.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>module_startup_func</literal></term>
    <term><literal>module_shutdown_func</literal></term>
    <term><literal>request_startup_func</literal></term>
    <term><literal>request_shutdown_func</literal></term>
    <listitem>
     <para>
      These are callback functions that Zend will call at particular times
      during PHP's processing. Specifically, at first initialization, at final
      shutdown, at the start of each particular request, and at the end of each
      request.
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>info_func</literal></term>
    <listitem>
     <para>
      This is another callback function, which Zend will call when a script
      invokes <function>phpinfo</function>.
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>version</literal></term>
    <listitem>
     <para>
      A string giving the version of the module, as specified by the module
      developer. It is <emphasis>strongly</emphasis> recommended that the
      version number be either in the format expected by
      <function>version_compare</function>, or a CVS or SVN revision number
      (i.e. &quot;$Rev$&quot;).
     </para>
    </listitem>
   </varlistentry>
    
   <varlistentry>
    <term><literal>globals_size</literal> (*)</term>
    <listitem>
     <para>
      The size of the data structure containing the module's globals, if any.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>globals_id_ptr</literal> (*)</term>
    <term><literal>globals_ptr</literal> (*)</term>
    <listitem>
     <para>
      Only one of these two fields will exist, depending upon whether the
      <constant>USING_ZTS</constant> constant is &true;. The former is an index
      into TSRM&apos;s allocation table for the module&apos;s globals, and the
      latter is a pointer directly to the globals.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>globals_ctor</literal></term>
    <term><literal>globals_dtor</literal></term>
    <listitem>
     <para>
      These functions are called by Zend to set up and destroy a module&apos;s
      globals.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>post_deactivate_func</literal></term>
    <listitem>
     <para>
      This function is called by Zend after request shutdown. It is rarely used.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>module_started</literal> (*)</term>
    <term><literal>type</literal> (*)</term>
    <term><literal>handle</literal> (*)</term>
    <term><literal>module_number</literal> (*)</term>
    <listitem>
     <para>
      These fields are used for Zend's internal tracking information.
     </para>
    </listitem>
   </varlistentry>
  
  </variablelist>
  
  <para>
   This table gives the values that each field would have if the developer
   were to fill in the structure entirely by hand, without recourse to any of
   the shortcut macros. <emphasis>This is not recommended.</emphasis> The
   &quot;correct&quot; values for many fields may change. Use the macros
   whenever possible.
  </para>

  <table xml:id="internals2.structure.modstruct.struct-values">
   <title>Module structure field values</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Field</entry><entry>Value</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry>
       <varname>size</varname>
       <footnote xml:id="internals2.structure.modstruct.struct-values.given-by-SMHC">
        <para>
         This field is filled in by <constant>STANDARD_MODULE_HEADER</constant>.
        </para>
       </footnote>
      </entry>
      <entry><code>sizeof(zend_module_entry)</code></entry>
     </row>
     
     <row>
      <entry>
       <varname>zend_api</varname>
       <footnoteref linkend="internals2.structure.modstruct.struct-values.given-by-SMHC"/>
      </entry>
      <entry><constant>ZEND_MODULE_API_NO</constant></entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
