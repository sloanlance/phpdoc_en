<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<appendix id="filters">
 <title>List of Built-In Filters</title>
 <para>
  The following is a list of a few built-in stream filters for
  use with <function>stream_filter_append</function>.
  Your version of PHP may have more filters (or fewer) than those
  listed here.
 </para>

 <para>
  It is worth noting a slight asymmetry between 
  <function>stream_filter_append</function>
  and <function>stream_filter_prepend</function>.  
  Every PHP stream contains a small <emphasis>read buffer</emphasis>
  where it stores blocks of data retrieved from the
  filesystem or other resource in order to process data
  in the most efficient manner.  As soon as data is pulled
  from the resource into the stream's internal buffer, it
  is immediately processed through any attached filters whether
  the PHP application is actually ready for the data or not.
  If data is sitting in the read buffer when a filter is 
  <emphasis>appended</emphasis>, this data will be immediately
  processed through that buffer making the fact that is was
  sitting in the buffer seem transparent.  However, if data is
  sitting in the read buffer when a filter is 
  <emphasis>prepended</emphasis>, this data will <emphasis>NOT</emphasis>
  be processed through that filter.  It will instead wait until
  the next block of data is retrieved from the resource.
 </para>

 <para>
  For a list of filters installed in your version of
  <literal>PHP</literal> use <function>stream_get_filters</function>.
 </para>

 <section id="filters.string">
  <title>String Filters</title>

  <simpara>
   Each of these filters does precisely what their name implies and
   correspond to the behavior of a built-in php string handling function.
   For more information on a given filter, refer to the manual page for
   the corresponding function.
  </simpara>

  <simpara>
   <literal>string.rot13</literal>
   (since <literal>PHP 4.3.0</literal>)
   Use of this filter is equivalent to processing all stream data through
   the <function>str_rot13</function> function.
  </simpara>
  <example>
   <title>string.rot13</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "This is a test.\n");
/* Outputs:  Guvf vf n grfg.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.toupper</literal>
   (since <literal>PHP 5.0.0</literal>)
   Use of this filter is equivalent to processing all stream data through
   the <function>strtoupper</function> function.
  </simpara>
  <example>
   <title>string.toupper</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "This is a test.\n");
/* Outputs:  THIS IS A TEST.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.tolower</literal>
   (since <literal>PHP 5.0.0</literal>)
   Use of this filter is equivalent to processing all stream data through
   the <function>strtolower</function> function.
  </simpara>
  <example>
   <title>string.tolower</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "This is a test.\n");
/* Outputs:  this is a test.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.strip_tags</literal>
   (since <literal>PHP 5.0.0</literal>)
   Use of this filter is equivalent to processing all stream data through
   the <function>strip_tags</function> function.
   It accepts parameters in one of two forms:
   Either as a string containing a list of tags similar to the
   second parameter of the <function>strip_tags</function> function,
   or as an array of tag names.
  </simpara>
  <example>
   <title>string.strip_tags</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* Outputs:  <b>bolded text</b> enlarged to a level 1 heading   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* Outputs:  <b>bolded text</b> enlarged to a level 1 heading   */
?>
]]>
   </programlisting>
  </example>
   
 </section>

 <section id="filters.convert">
  <title>Conversion Filters</title>

  <simpara>
   Like the string.* filters, the convert.* filters perform actions
   similar to their names.  The convert filters were added with
   <literal>PHP 5.0.0</literal>.
   For more information on a given filter, refer to the manual page for
   the corresponding function.
  </simpara>

  <simpara>
   <literal>convert.base64-encode</literal> and
   <literal>convert.base64-decode</literal>
   Use of these filters are equivalent to processing all stream data through
   the <function>base64_encode</function> and <function>base64_decode</function>
   functions respectively.
   <literal>convert.base64-encode</literal> supports parameters given as
   an associative array.  If <parameter>line-length</parameter> is given, the
   base64 output will be split into chunks of <parameter>line-length</parameter>
   characters each.  If <parameter>line-braek-chars</parameter> is given, each
   chunk will be delimted by the characters given.  These parameters give the
   same effect as using <function>base64_encode</function> with
   <function>chunk_split</function>.
  </simpara>
  <example>
   <title>convert.base64_encode</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* Outputs:  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* Outputs:  VGhpcyBp
          :  cyBhIHRl
          :  c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* Outputs:  This is a test.  */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>convert.quoted-printable-encode</literal> and
   <literal>convert.quoted-printable-decode</literal>
   Use of the decode version of this filter is equivalent to processing all stream 
   data through the <function>quoted_printable_decode</function> functions.
   There is no function equivalent to <literal>convert.quoted-printable-encode</literal>.
   <literal>convert.quoted-printable-encode</literal> supports parameters given as
   an associative array.  In addition to the parameters supported by 
   <literal>convert.base64-encode</literal>, <literal>convert.quoted-printable-encode</literal>
   also supports boolean arguments <parameter>binary</parameter> and
   <parameter>force-encode-first</parameter>.
   <literal>convert.base64-decode</literal> only supports the
   <parameter>line-break-chars</parameter> parameter as a type-hint
   for striping from the encoded payload.
  </simpara>
  <example>
   <title>string.tolower</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* Outputs:  =This is a test.=0A  */
?>
]]>
   </programlisting>
  </example>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
