<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<appendix id="wrappers">
 <title>List of Supported Protocols/Wrappers</title>
 <para>
  The following is a list of the various URL style protocols that
  PHP has built-in for use with the filesystem functions such as
  <function>fopen</function> and <function>copy</function>.
  In addition to these wrappers, as of PHP 4.3, you can write
  your own wrappers using PHP script and
  <function>stream_register_wrapper</function>.
 </para>

 <section id="wrappers.http">
  <title>HTTP and HTTPS</title>
   <simpara>PHP 3, PHP 4. <filename>https://</filename> since PHP 4.3</simpara>

  <itemizedlist>
   <listitem><simpara><filename>http://example.com</filename></simpara></listitem>
   <listitem><simpara><filename>http://user:password@example.com</filename></simpara></listitem>
   <listitem><simpara><filename>https://example.com</filename></simpara></listitem>
   <listitem><simpara><filename>https://user:password@example.com</filename></simpara></listitem>
  </itemizedlist>

  <simpara>Allows read-only access to files/resources via HTTP 1.0,
   using the HTTP GET method. A <literal>Host:</literal> header is sent with the request
   to handle name-based virtual hosts.  If you have configured
   a <link linkend="ini.user-agent">user_agent</link> string using
   your ini file or the stream context, it will also be included
   in the request.
  </simpara>
  <simpara>
   Redirects have been supported since PHP 4.0.5; if you are using
   an earlier version you will need to include trailing slashes in
   your URLs.
  </simpara>
  <simpara>
   The stream allows access to the <emphasis>body</emphasis> of
   the resource; the headers are stored in the
   <varname>$http_response_header</varname> variable.
   Since PHP 4.3, the headers are available using
   <function>stream_get_meta_data</function>.
  </simpara>
  <simpara>
   HTTP connections are read-only; you cannot write data or copy
   files to an HTTP resource.
  </simpara>
  <note>
   <simpara>HTTPS is supported starting from PHP 4.3, if you
    have compiled in support for OpenSSL.
   </simpara>
  </note>
 </section>

 <section id="wrappers.ftp">
  <title>FTP and FTPS</title>
  <simpara>PHP 3, PHP 4.  <filename>ftps://</filename> since PHP 4.3</simpara>

  <itemizedlist>
   <listitem><simpara><filename>ftp://example.com/pub/file.txt</filename></simpara></listitem>
   <listitem><simpara><filename>ftp://user:password@example.com/pub/file.txt</filename></simpara></listitem>
   <listitem><simpara><filename>ftps://example.com/pub/file.txt</filename></simpara></listitem>
   <listitem><simpara><filename>ftps://user:password@example.com/pub/file.txt</filename></simpara></listitem>
  </itemizedlist>

  <simpara>
   Allows read access to existing files and creation of new files
   via FTP.  If the server does not support passive mode ftp, the
   connection will fail.
  </simpara>
  <simpara>
   You can open files for either reading or writing, but not both
   simultaneously.  If the remote file already exists on the ftp
   server and you attempt to open it for writing, the connection
   will fail.  If you need to update existing files over ftp,
   use <function>ftp_connect</function>.
  </simpara>
  <simpara>
   <filename>ftps://</filename> was introduced in PHP 4.3.  
   It is the same as <filename>ftp://</filename>,
   but attempts to negotiate a secure connection with the ftp server.
   If the server does not support SSL, then the connection falls back
   to regular unencrypted ftp.
  </simpara>
  <note>
   <simpara>FTPS is supported starting from PHP 4.3, if you
    have compiled in support for OpenSSL.
   </simpara>
  </note>

 </section>

 <section id="wrappers.php">
  <title>PHP input/output streams</title>
  <simpara>
   PHP 3.0.13 and up, <filename>php://output</filename> 
   and <filename>php://input</filename> since PHP 4.3
  </simpara>

  <itemizedlist>
   <listitem><simpara><filename>php://stdin</filename></simpara></listitem>
   <listitem><simpara><filename>php://stdout</filename></simpara></listitem>
   <listitem><simpara><filename>php://stderr</filename></simpara></listitem>
   <listitem><simpara><filename>php://output</filename></simpara></listitem>
   <listitem><simpara><filename>php://input</filename></simpara></listitem>
  </itemizedlist>

  <simpara>
   <filename>php://stdin</filename>, <filename>php://stdout</filename> 
   and <filename>php://stderr</filename> allow access to
   the corresponding input or output stream of the PHP process.
  </simpara>
  <simpara>
   <filename>php://output</filename> allows you to write to the
   output buffer mechanism in the same way as
   <function>print</function> and <function>echo</function>.
  </simpara>
  <simpara>
   <filename>php://input</filename> allows you to read raw POST data.
   It is a less memory intensive alternative to
   <varname>$HTTP_RAW_POST_DATA</varname> and does not need any
   special &php.ini; directives.
  </simpara>
  <simpara>
   <filename>php://stdin</filename> and
   <filename>php://input</filename> are read-only, whereas
   <filename>php://stdout</filename>,
   <filename>php://stderr</filename> and
   <filename>php://output</filename> are write-only.
  </simpara>
 </section>

 <section id="wrappers.compression">
  <title>Compression Streams</title>
  <simpara><filename>zlib:</filename> PHP 4.0.4 - PHP 4.2.3 (systems with fopencookie only)</simpara>
  <simpara><filename>compress.zlib://</filename> and <filename>compress.bzip2://</filename> PHP 4.3 and up</simpara>

  <itemizedlist>
   <listitem><simpara><filename>zlib:</filename></simpara></listitem>
   <listitem><simpara><filename>compress.zlib://</filename></simpara></listitem>
   <listitem><simpara><filename>compress.bzip2://</filename></simpara></listitem>
  </itemizedlist>

  <simpara> 
   <filename>zlib:</filename> works like <function>gzopen</function>, except that the
   stream can be used with <function>fread</function> and the other
   filesystem functions.  This is deprecated as of PHP 4.3 due
   to ambiguities with filenames containing ':' characters; use
   <filename>compress.zlib://</filename> instead.
  </simpara>

  <simpara>
   <filename>compress.zlib://</filename> and
   <filename>compress.bzip2://</filename> are equivalent to
   <function>gzopen</function> and <function>bzopen</function>
   respectively, and operate even on systems that do not support
   fopencookie.
  </simpara>
 </section>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
