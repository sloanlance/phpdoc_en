<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
   <sect1 id="install.windows.manual">
    <title>Manual Installation Steps</title>
    
    <para>
     This install guide will help you manually install and configure PHP on your
     Microsoft Windows webserver. You need to download the zip binary distribution
     from the downloads page at
     <ulink url="&url.php.downloads;">&url.php.downloads;</ulink> to get started. 
    </para>
    
    <para>
     Although there are all-in-one installation kits and we also distribute an
     installer for Microsoft Windows, we recommend you to take some time and set
     up PHP yourself, since this provides better understanding of the system, and
     enables you to install PHP extensions easily whenever you need.
    <para>
    
    <note id="install.windows.manual.upgrade">
     <title>Upgrading from a previous PHP version</title>
     <para>
      Previous editions of this manual suggested that you move ini files and DLLs
      around your folders, and thus you might have PHP related files in multiple
      folders on your hard drive. We advise you to remove all these files (php.ini
      from the Windows folder, PHP related DLLs from the Windows system folder),
      before going on with the installation. Make sure you have backups of those
      DLLs, since you might be able to brake your entire system. The old ini file
      might be useful in setting up your new PHP as well.
     </para>
    </note>
    
    <note>
     <title>MDAC requirements</title>
     <para>
      If you use Microsoft <emphasis>Windows 98/NT4</emphasis> download the
      latest version of the Microsoft Data Access Components (MDAC) for your
      platform. MDAC is available at <ulink url="&url.mdac;">&url.mdac;</ulink>.
     </para>
    </node>
    
    <para>
     The following steps should be performed on all installations before any
     server specific instructions.
     <itemizedlist>
      <listitem>
       <para>
        Extract the distribution file to a directory of your choice,
        <filename class="directory">c:\</filename> is a good start. The zip
        package expands to a foldername like <filename>php-4.3.7-Win32</filename>
        which is assumed to be renamed to <filename>php</filename>. For the sake
        of convenience and to be version independent, the following steps assume
        your extracted version of PHP lives in <filename
        class="directory">c:\php</filename>. You might choose any other location but
        you probably do not want to use a path in which spaces are included. Using
        a folder, like <filename class="directory">C:\Program Files\PHP</filename>
        is not a good idea. Some web servers will crash if you do. The structure of
        your directory you extracted the zip file will look like:
       </para>
       <example>
        <title>PHP 4 package structure</title>
        <programlisting>
<![CDATA[

c:\php
   |
   +--cli
   |  |
   |  |-php.exe           -- CLI executable - ONLY for commandline scripting
   |
   +--dlls                -- support DLLs required by some extensions
   |  |
   |  |-expat.dll
   |  |
   |  |-fdftk.dll
   |  |
   |  |-...
   |
   +--extensions          -- extension DLLs for PHP
   |  |
   |  |-php_bz2.dll
   |  |
   |  |-php_cpdf.dll
   |  |
   |  |-..
   |
   +--mibs                -- support files for SNMP
   |
   +--openssl             -- support files for Openssl
   |
   +--pdf-related         -- support files for PDF
   |
   +--sapi                -- SAPI (server module support) DLLs
   |  |
   |  |-php4activescript.dll
   |  |
   |  |-php4apache.dll
   |  |
   |  |-php4apache2.dll
   |  |
   |  |-..
   |
   +--PEAR                -- initial copy of PEAR
   |
   |
   |-go-pear.bat          -- PEAR setup script
   |
   |-..
   |
   |-php.exe              -- CGI executable
   |
   |-..
   |
   |-php.ini-dist         -- default php.ini settings
   |
   |-php.ini-recommended  -- recommended php.ini settings
   | 
   |-php4ts.dll           -- core PHP DLL
   | 
   |-...

]]>
        </programlisting>
       </example> 
       <para>
        In case you have downloaded and extracted PHP 5, it has a somewhat
        different folder structure:
       </para>
       <example>
        <title>PHP 5 package structure</title>
        <programlisting>
<![CDATA[

c:\php
   |
   +--dev
   |  |
   |  |-php5ts.lib
   |
   +--ext                 -- extension DLLs for PHP
   |  |
   |  |-php_bz2.dll
   |  |
   |  |-php_cpdf.dll
   |  |
   |  |-..
   |
   +--extras
   |  |
   |  +--mibs             -- support files for SNMP
   |  |
   |  +--openssl          -- support files for Openssl
   |  |
   |  +--pdf-related      -- support files for PDF
   |  |
   |  |-mime.magic
   |
   +--pear                -- initial copy of PEAR
   |
   |
   |-go-pear.bat          -- PEAR setup script
   |
   |-fdftk.dll
   |
   |-..
   |
   |-php-cgi.exe          -- CGI executable
   |
   |-php-win.exe          -- executes scripts without an opened command prompt
   |
   |-php.exe              -- CLI executable - ONLY for command line scripting
   |
   |-..
   |
   |-php.ini-dist         -- default php.ini settings
   |
   |-php.ini-recommended  -- recommended php.ini settings
   | 
   |-php5activescript.dll
   | 
   |-..
   |
   |-php5ts.dll           -- core PHP DLL
   | 
   |-...

]]>
        </programlisting>
       </example> 
    
       <para>
        Note that PHP 4 and PHP 5 for Windows both have a CGI executable, a CLI
        executable and server modules, but they are located in different folders.
        While PHP 4 packages have the server modules in the sapi folder, these
        are included right in the PHP folder in PHP 5 distributions. The supporting
        DLLs for PHP extensions are also in the main PHP 5 folder. Watch out for
        the different locations of the CGI and CLI executables too!
       </para>
       <para>
        Here is a list of server modules shipped with PHP 4 and PHP 5.
        <simplelist>
         <member>
          <filename>sapi/php4activescript.dll (php5activescript.dll)</filename> -
          <link linkend="install.windows.activescript">ActiveScript engine</link>,
          allowing you to embed PHP in your Windows applications.
         </member>
         <member>
          <filename>sapi/php4apache.dll (php5apache.dll)</filename> - Apache 1.3.x module.
         </member>
         <member>
          <filename>sapi/php4apache2.dll (php5apache2.dll)</filename> - Apache 2.0.x module.
         </member>
         <member>
          <filename>sapi/php4isapi.dll (php5isapi.dll)</filename> - ISAPI Module
          for ISAPI compliant webservers like IIS 4.0/PWS 4.0 or newer.
         </member>
         <member>
          <filename>sapi/php4nsapi.dll (php5nsapi.dll)</filename> - Sun/iPlanet/Netscape
          server module.
         </member>
         <member>
          <filename>sapi/php4pi3web.dll (no equivalent in PHP5)</filename> - Pi3Web server module.
         </member>
         <!-- TODO: servlets? -->
        </simplelist>
       <para>
       <para>
        Server modules provide significantly better performance and some more
        functionality compared to the CGI binary. The CLI version is designed
        to let you use PHP for command line scripting. More information about
        CLI is available in the chapter about <link
        linkend="features.commandline">using PHP from the command line</link>.
       </para>
       <warning>
        <simpara>
         The SAPI modules have been significantly improved in the 4.1 release, 
         however, you may find that you encounter possible server errors or 
         other server modules such as ASP failing, in older systems.
        </simpara>
       </warning>

       <para>
        The CGI and CLI binaries, and the web server modules all require the
        <filename>php4ts.dll<filename> (<filename>php5ts.dll<filename>) file
        to be available to them. You have to make sure, that this file can be
        found by your PHP installation. The search order for this DLL is as
        follows:
        <simplelist>
         <member>
          The same directory from where <filename>php.exe</filename> is
          called. In case you use a SAPI module the same directory from
          where your webserver loads the dll
          (e.g. <filename>php4apache.dll</filename>).
         </member>
         <member>
          Any directory in your Windows <varname>PATH</varname> environment
          variable.
         </member>
        </simplelist>
       </para>
       
<!-- WARNING: the instructions presented below still need serious revision!!!!!!! -->
       
       <para>
        The best bet is to make <filename>php4ts.dll</filename> available,
        regardless which interface (CGI or SAPI module) you plan to use. To do so,
        you have to copy this dll to a directory on your Windows path. The best
        place is your Windows system directory:
        <simplelist>
         <member>
          <filename class="directory">C:\Windows\System</filename> for Windows 9x/ME
         </member>
         <member>
          <filename class="directory">C:\WINNT\System32</filename> for Windows NT/2000 or
          <filename class="directory">C:\WINNT40\System32</filename> for NT/2000 server
         </member>
         <member>
          <filename class="directory">C:\Windows\System32</filename> for Windows XP
         </member>
        </simplelist>
        If you plan to use a SAPI module from <filename class="directory">c:\php\sapi</filename>
        and do not like to copy dlls to your Windows system directory, you have
        the alternative choice to simply copy <filename>php4ts.dll</filename> to
        the sapi folder of your extracted zip package,
        <filename class="directory">c:\php\sapi</filename>.
       </para>
      </listitem>
      <listitem>
       <para>
        The next step is to set up a valid configuration file for PHP, &php.ini;.
        There are two ini files distributed in the zip file,
        <filename>php.ini-dist</filename> and
        <filename>php.ini-recommended</filename>. We advise you to use
        <filename>php.ini-recommended</filename>, because we optimized the
        default settings in this file for performance, and security. Read this
        well documented file carefully and in addition study the
        <link linkend="configuration.file">ini settings</link> and set every
        element manually yourself. If you would like to achieve the best
        security, then this is the way for you, although PHP works fine with
        these default ini files. Copy your chosen ini-file to a directory where
        PHP is able to find and rename it to &php.ini;. By default PHP searches
        &php.ini; in your Windows directory:
        <simplelist>
         <member>
          On Windows 9x/ME/XP copy your chosen ini file to your
         <filename> %WINDIR%</filename>, which is typically
         <filename class="directory">C:\Windows</filename>.
         </member>
         <member>
          On Windows NT/2000 copy your chosen ini file to your
          <filename>%WINDIR%</filename> or <filename>%SYSTEMROOT%</filename>,
          which is typically <filename class="directory">C:\WINNT</filename> or
         <filename class="directory">C:\WINNT40</filename> for NT/2000 servers.
         </member>
        </simplelist>   
       </para>
      </listitem>
      <listitem>
       <simpara>
        If you're using NTFS on Windows NT, 2000 or XP, make sure that
        the user running the webserver has read permissions to your
        &php.ini; (e.g. make it readable by Everyone).
       </simpara>
      </listitem>     
     </itemizedlist>
    </para>
    <para>
     The following steps are optional.
     <itemizedlist>      
      <listitem>
       <para>
        Edit your new &php.ini; file.       
        If you plan to use <link linkend="install.windows.omnihttpd">OmniHTTPd</link>,
        do not follow the next step. Set the
        <link linkend="ini.doc-root">doc_root</link> to point to your webservers
        document_root. For example:
        <informalexample>
          <programlisting role="ini">
<![CDATA[
doc_root = c:\inetpub        // for IIS/PWS

doc_root = c:\apache\htdocs // for Apache
]]>
         </programlisting>
        </informalexample>
       </para>
      </listitem>
      <listitem>
       <simpara>
        Choose which extensions you would like to load when PHP starts. See
        the section about
        <link linkend="install.windows.extensions">Windows extensions</link>,
        about how to set up one, and what is already built in. Note that on
        a new installation it is advisable to first get PHP working and tested
        without any extensions before enabling them in &php.ini;.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        On PWS and IIS, you can set the
        <link linkend="ini.browscap">browscap</link> configuration setting
        to point to:
        <filename>c:\windows\system\inetsrv\browscap.ini</filename> on
        Windows 9x/Me,
        <filename>c:\winnt\system32\inetsrv\browscap.ini</filename> on
        NT/2000, and
        <filename>c:\windows\system32\inetsrv\browscap.ini</filename>
        on XP.
       </simpara>
      </listitem>
     </itemizedlist>
    </para> 
    <para>
     Following this instructions you are done with the basic steps to setup PHP
     on Windows. The next step is to choose a webserver and enable it to run
     PHP. Pick a webserver from the table of contents.
    </para>
   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
