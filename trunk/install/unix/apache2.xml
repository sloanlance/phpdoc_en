<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
   <sect1 id="install.unix.apache2">
    <title>Apache 2.0 on Unix systems</title>
    <para>
     This section contains notes and hints specific to Apache 2.0 installs
     of PHP on Unix systems.
    </para>
   
    <warning>
      <para>
        Do not use Apache 2.0.x and <literal>PHP</literal> in a production 
        environment neither on Unix nor on Windows. The reasoning behing 
        that is explained thoroughly in this modified excerpt of a mail
        by Rasmus Lerdorf.
      </para>
      
      <para>
        Apache2 is a complete rewrite and a complete architecture change from
        Apache1. It is not like going from <literal>PHP3</literal> to 
        <literal>PHP4</literal> or from <literal>PHP4</literal> to PHP5.
        There is a lot of code that is common, and certainly the base architecture
        of PHP has not changed for years. So comparing Apache1 vs. Apache2 to
        <literal>PHP4</literal> vs. <literal>PHP5</literal> makes no sense.
        The architecture has been proven over the years and the code, while
        somewhat unwieldy in places, is a known entity. PHP from the very 
        early days was designed against this basic Apache1 architecture and 
        works extremely well running under it.
      </para>
      
      <para>
        The major feature that draws people to Apache2 is threading.  On Windows
        where most basic libraries are, and must be, threadsafe, Apache2 does
        actually make sense and it would be good to work out the kinks on that
        platform. However, on UNIX there are a lot of basic libraries where
        thread safety is an unknown. And this is not about <literal>PHP</literal>
        extensions, it is about 3rd-party libraries underneath <literal>PHP&apos;s</literal>
        hundreds of extensions. Whether any one 3rd-party library is threadsafe is 
        really hard to determine. There are a lot of variables involved, including which
        OS, which version of the OS, which libc, which version of that libc and on
        some platforms even the compiler flags used to compile these things. And
        to make it even more fun, tracking down a thread safety problem is damn
        well near impossible. Hundreds of people may well state that
        Apache+<literal>PHP</literal>+ext/foo works perfectly for them, but maybe 
        they are only getting about a million hits a day. Then another user comes 
        along who gets 100 million hits a day and uses a fast dual-cpu machine and
        everything blows up because now suddenly the window for some tiny race
        condition has been made much larger due to the faster cpu speeds, the
        second cpu and the higher frequency of requests.  And the bug report we
        get from this user will be something along the lines of:
      </para>
      
      <para>
        <note>
      It don&apos;t work sometimes.  Most of the times it works fine, but then
      every now and then it just don&apos;t.  The error is different each time
      and I have no idea how to reproduce it, but fix it right away!!!
        </note>
      </para>
      
      <para>What can we do about these?</para>
      
      <para>
        There are a number of (fixable) technical reasons Rasmus does not think
        Apache2+<literal>PHP</literal> is a good idea in a production environment, 
        but setting those aside it really boils down to one simple concept:
      </para>
      
      <para>
        <literal>PHP</literal> is glue. It is the glue used to build cool web 
        applications by sticking dozens of 3rd-party libraries together and making 
        it all appear as one coherent entity through an intuitive and easy to learn 
        language interface. The flexibility and power of <literal>PHP</literal> relies 
        on the stability and robustness of the underlying platform. It needs a working 
        OS, a working  web server and working 3rd-party libraries to glue together.
        When any of these stop working <literal>PHP</literal> needs ways to identify 
        the problems and fix them quickly. By making the underlying framework more 
        complex by not having completely separate execution threads, completely 
        separate memory segments and a strong sandbox for each request to play 
        in, a feet of clay is introduced into <literal>PHP&apos;s</literal> system.
      </para>
      
      <para>
        Using the prefork mpm with Apache2 to avoid the
        threading is possible, and yes using a standalone fastcgi mechanism to avoid
        the threading, too, but then defining characteristic of the web server of
        choice are avoided.  At this point in its development, Rasmus still maintains
        that one is better off simply sticking with Apache1 for serving up 
        <literal>PHP</literal> pages with the one caveat that Apache1 sucks pretty badly 
        on Windows.
      </para>
    </warning>
    
    <para>
     You are highly encouraged to take a look at the
     <ulink url="&url.apache2.docs;">Apache Documentation</ulink> to get
     a basic understanding of the Apache 2.0 Server.
    </para>

    &install.snippet.apache2.compat;

    <para>
     Download the most recent version of <ulink url= "&url.apache;">
     Apache 2.0</ulink> and a fitting PHP version from the above mentioned places.
     This quick guide covers only the basics to get started with Apache 2.0
     and PHP. For more information read the
     <ulink url="&url.apache2.docs;">Apache Documentation</ulink>.
     The version numbers have been omitted here, to ensure the
     instructions are not incorrect. You will need to replace the
     'NN' here with the correct values from your files.
    </para>
    <example>
     <title>
      Installation Instructions (Apache 2 Shared Module Version)
     </title>
     <screen>
<![CDATA[
1.  gzip -d httpd-2_0_NN.tar.gz
2.  tar xvf httpd-2_0_NN.tar
3.  gunzip php-NN.tar.gz
4.  tar -xvf php-NN.tar
5.  cd httpd-2_0_NN
6.  ./configure --enable-so
7.  make
8.  make install

    Now you have Apache 2.0.NN available under /usr/local/apache2,
    configured with loadable module support and the standard MPM prefork.
    To test the installation use your normal procedure for starting
    the Apache server, e.g.:
    /usr/local/apache2/bin/apachectl start
    and stop the server to go on with the configuration for PHP:
    /usr/local/apache2/bin/apachectl stop.

9.  cd ../php-NN

10. Now, configure your PHP.  This is where you customize your PHP
    with various options, like which extensions will be enabled.  Do a
    ./configure --help for a list of available options.  In our example
    we'll do a simple configure with Apache 2 and MySQL support.  Your
    path to apxs may differ, in fact, the binary may even be named apxs2 on
    your system. 
    
      ./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql

11. make
12. make install

    If you decide to change your configure options after installation,
    you only need to repeat the last three steps. You only need to
    restart apache for the new module to take effect. A recompile of
    Apache is not needed.
                
    Note that unless told otherwise, 'make install' will also install PEAR,
    various PHP tools such as phpize, install the PHP CLI, and more.
    
13. Setup your php.ini 
    
    cp php.ini-dist /usr/local/lib/php.ini
          
    You may edit your .ini file to set PHP options.  If you prefer having
    php.ini in another location, use --with-config-file-path=/some/path in
    step 10.
    
    If you instead choose php.ini-recommended, be certain to read the list
    of changes within, as they affect how PHP behaves.

14. Edit your httpd.conf to load the PHP module.  The path on the right hand
    side of the LoadModule statement must point to the path of the PHP
    module on your system.  The make install from above may have already
    added this for you, but be sure to check.

    For PHP 4:
  
      LoadModule php4_module libexec/libphp4.so
      
    For PHP 5:
    
      LoadModule php5_module libexec/libphp5.so
 
15. Tell Apache to parse certain extensions as PHP.  For example,
    let's have Apache parse the .php extension as PHP.  You could
    have any extension(s) parse as PHP by simply adding more, with
    each separated by a space.  We'll add .phtml to demonstrate.
            
      AddType application/x-httpd-php .php .phtml
                  
    It's also common to setup the .phps extension to show highlighted PHP
    source, this can be done with:
    
      AddType application/x-httpd-php-source .phps
 
16. Use your normal procedure for starting the Apache server, e.g.:
   
      /usr/local/apache2/bin/apachectl start
   
]]>

      </screen>
     </example>
    <para>
     Following the steps above you will have a running Apache 2.0 with
     support for PHP as <literal>SAPI</literal> module.
     Of course there are many more configuration options available for both,
     Apache and PHP. For more information use
     <command>./configure --help</command> in the corresponding source
     tree. In case you wish to build a multithreaded version of Apache 2.0
     you must overwrite the standard MPM-Module <filename>prefork</filename>
     either with <filename>worker</filename> or <filename>perchild</filename>.
     To do so append to your configure line in step 6 above either the option
     <option role="configure">--with-mpm=worker</option> or
     <option role="configure">--with-mpm=perchild</option>. Take care about
     the consequences and understand what you are doing. For more information
     read the Apache documentation about the <ulink url="&url.apache2.mpm;">
     MPM-Modules</ulink>.
    </para>
    <note>
     <para>
      To build a multithreaded version of Apache your system must support threads.
      This also implies to build PHP with experimental
      Zend Thread Safety (ZTS). Therefore not all extensions might be available.
      The recommended setup is to build Apache with the standard
      <filename>prefork</filename> MPM-Module.
     </para>
    </note>
   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
