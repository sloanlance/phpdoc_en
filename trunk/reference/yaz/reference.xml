<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
 <reference id="ref.yaz">
  <title>YAZ functions</title>
  <titleabbrev>YAZ</titleabbrev>

  <partintro>
   <section id="yaz.intro">
    &reftitle.intro;
    <para>
     This extension offers a PHP interface to the
     <productname>YAZ</productname> toolkit that implements the 
     <ulink url="&url.yaz-loc;">Z39.50
     Protocol for Information Retrieval</ulink>.
     With this extension you can easily implement a Z39.50 origin (client)
     that searches or scans Z39.50 targets (servers) in parallel.
    </para>
    <para>
     The module hides most of the complexity of Z39.50 so it should be
     fairly easy to use. It supports persistent stateless connections very
     similar to those offered by the various RDB APIs that are available
     for PHP. This means that sessions are stateless but shared amongst
     users, thus saving the connect and initialize phase steps in most
     cases.
    </para>
    <para>
     <productname>YAZ</productname> is available at <ulink
     url="&url.yaz;">&url.yaz;</ulink>. You can find news information,
     example scripts, etc. for this extension at <ulink
     url="&url.yaz-phpyaz;">&url.yaz-phpyaz;</ulink>.
    </para>
   </section>
   
   &reference.yaz.configure;
   
   &reference.yaz.ini;

   <section id="yaz.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section id="yaz.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section id="yaz.examples">
    &reftitle.examples;
    <para>
     PHP/YAZ keeps track of connections with targets
     (Z-Associations). A resource represents a connection to a
     target.
    </para>
      <simpara>
       The script below demonstrates the parallel searching feature of
       the API. When invoked with no arguments it prints a query form; else
       (arguments are supplied) it searches the targets as given in array
       <literal>host</literal>.
      </simpara>
    <para>
     <example>
      <title>Parallel searching using Yaz</title>
      <programlisting role="php">
<![CDATA[
$num_hosts = count ($host);
if (empty($term) || count($host) == 0) {
    echo '<form method="get">
    <input type="checkbox"
    name="host[]" value="bagel.indexdata.dk/gils">
        GILS test
    <input type="checkbox"
    name="host[]" value="localhost:9999/Default">
        local test
    <input type="checkbox" checked="1"
    name="host[]" value="z3950.loc.gov:7090/voyager">
        Library of Congress
    <br>
    RPN Query:
    <input type="text" size="30" name="term">
    <input type="submit" name="action" value="Search">
    ';        
} else {
    echo 'You searced for ' . htmlspecialchars($term) . '<br>';
    for ($i = 0; $i < $num_hosts; $i++) {
        $id[] = yaz_connect($host[$i]);
        yaz_range($id[$i], 1, 10);
        yaz_search($id[$i],"rpn",$term);
    }
    yaz_wait();
    for ($i = 0; $i < $num_hosts; $i++) {
        echo '<hr>' . $host[$i] . ":";
        $error = yaz_error($id[$i]);
        if (!empty($error)) {
            echo "Error: $error";
        } else {
            $hits = yaz_hits($id[$i]);
            echo "Result Count $hits";
        }
        echo '<dl>';
        for ($p = 1; $p <= 10; $p++) {
            $rec = yaz_record($id[$i],$p,"string");
            if (empty($rec)) continue;
            echo "<dt><b>$p</b></dt><dd>";
            echo ereg_replace("\n", "<br>\n",$rec);
            echo "</dd>";
        }
        echo '</dl>';
    }
}
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.yaz.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

