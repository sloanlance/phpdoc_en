<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.23 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
<refentry id="function.str-replace">
 <refnamediv>
  <refname>str_replace</refname>
  <refpurpose>Replace all occurrences of the search string with the replacement string</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>mixed</type><methodname>str_replace</methodname>
   <methodparam><type>mixed</type><parameter>search</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>replace</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function returns a string or an array with all occurrences of
   <parameter>search</parameter> in <parameter>subject</parameter>
   replaced with the given <parameter>replace</parameter> value.  If you
   don't need fancy replacing rules (like regular expressions), you should
   always use this function instead of <function>ereg_replace</function> or
   <function>preg_replace</function>.
  </para>
  <para>
   As of PHP 4.0.5, every parameter in <function>str_replace</function>
   can be an <type>array</type>.
  </para>
  <warning>
   <simpara>
    In PHP versions prior to 4.3.3 a bug existed when using arrays as
    both <parameter>search</parameter> and <parameter>replace</parameter>
    parameters which caused empty <parameter>search</parameter> indexes
    to be skipped without advancing the internal pointer on the
    <parameter>replace</parameter> array. This has been corrected in
    PHP 4.3.3, any scripts which relied on this bug
    should remove empty search values prior to calling this function in
    order to mimick the original behavior.
   </simpara>
  </warning>
  <para>
   If <parameter>subject</parameter> is an array, then the search
   and replace is performed with every entry of
   <parameter>subject</parameter>, and the return value is an array
   as well.
  </para>
  <para>
   If <parameter>search</parameter> and
   <parameter>replace</parameter> are arrays, then
   <function>str_replace</function> takes a value from each array
   and uses them to do search and replace on
   <parameter>subject</parameter>. If
   <parameter>replace</parameter> has fewer values than
   <parameter>search</parameter>, then an empty string is used for
   the rest of replacement values. If <parameter>search</parameter>
   is an array and <parameter>replace</parameter> is a string, then
   this replacement string is used for every value of
   <parameter>search</parameter>. The converse would not make sense,
   though.
  </para>
  <para>
   If <parameter>search</parameter> or <parameter>replace</parameter>
   are arrays, their elements are processed first to last.
  </para>
  <para>
   <example>
    <title><function>str_replace</function> examples</title>
    <programlisting role="php">
<![CDATA[
<?php
// Provides: <body text='black'>
$bodytag = str_replace("%body%", "black", "<body text='%body%'>");

// Provides: Hll Wrld f PHP
$vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
$onlyconsonants = str_replace($vowels, "", "Hello World of PHP");

// Provides: You should eat pizza, beer, and ice cream every day
$phrase  = "You should eat fruits, vegetables, and fiber every day.";
$healthy = array("fruits", "vegetables", "fiber");
$yummy   = array("pizza", "beer", "ice cream");

$newphrase = str_replace($healthy, $yummy, $phrase);

// Use of the count parameter is available as of PHP 5.0.0
$str = str_replace("ll", "", "good golly miss molly!", $count);
echo $count; // 2

// Order of replacement
$str     = "Line 1\nLine 2\rLine 3\r\nLine 4\n";
$order   = array("\r\n", "\n", "\r");
$replace = '<br />';
// Processes \r\n's first so they aren't converted twice.
$newstr = str_replace($order, $replace, $str);

// Outputs: apearpearle pear
$letters = array('a', 'p');
$fruit   = array('apple', 'pear');
$text    = 'a p';
$output  = str_replace($letters, $fruit, $text);
echo $output;
?>
]]>
    </programlisting>
   </example>
  </para>

  &note.bin-safe;

  <note>
   <para>
    This function is case-sensitive. Use <function>str_ireplace</function>
    for case-insensitive replace.
   </para>
  </note>

  <note>
   <simpara>
    As of PHP 5.0.0 the number of matched and replaced
    needles (<parameter>search</parameter>) will be returned in
    <parameter>count</parameter> which is passed by reference.
    Prior to PHP 5.0.0 this parameter is not available.
   </simpara>
  </note>
  <para>
   See also
   <function>str_ireplace</function>,
   <function>substr_replace</function>,
   <function>preg_replace</function>, and
   <function>strtr</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
