<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.addcslashes">
   <refnamediv>
    <refname>addcslashes</refname>
    <refpurpose>Quote string with slashes in a C style</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>string</type><methodname>addcslashes</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam><type>string</type><parameter>charlist</parameter></methodparam>
     </methodsynopsis>
    <para>
     Returns a string with backslashes before characters that are
     listed in <parameter>charlist</parameter> parameter. If
     <parameter>charlist</parameter> contains characters
     <literal>\n</literal>, <literal>\r</literal> etc., they are
     converted in C-like style, while other non-alphanumeric characters
     with ASCII codes lower than 32 and higher than 126 converted to
     octal representation.
    </para>
    <para>
     Be careful if you choose to escape characters 0, a, b, f, n, r, 
     t and v. They will be converted to \0, \a, \b, \f, \n, \r, \t 
     and \v. 
     In PHP \0 (NULL), \r (carriage return), \n (newline) and \t (tab) 
     are predefined escape sequences, while in C all of these are 
     predefined escape sequences.
    </para>
    <para>
     <parameter>charlist</parameter> like "\0..\37", which would
     escape all characters with ASCII code between 0 and 31.
     <example>
      <title><function>addcslashes</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     When you define a sequence of characters in the charlist argument
     make sure that you know what characters come between the
     characters that you set as the start and end of the range.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
echo addcslashes('foo[ ]', 'A..z');
// output:  \f\o\o\[ \]
// All upper and lower-case letters will be escaped
// ... but so will the [\]^_` and any tabs, line
// feeds, carriage returns, etc.
?>
]]>
      </programlisting>
     </informalexample>
     Also, if the first character in a range has a higher ASCII value
     than the second character in the range, no range will be
     constructed.  Only the start, end and period characters will be
     escaped. Use the <function>ord</function> function to find the
     ASCII value for a character.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
echo addcslashes("zoo['.']", 'z..A');
// output:  \zoo['\.']
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     See also <function>stripcslashes</function>, 
     <function>stripslashes</function>, 
     <function>addslashes</function>, 
     <function>htmlspecialchars</function>, and 
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
