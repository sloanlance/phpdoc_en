<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.crypt">
   <refnamediv>
    <refname>crypt</refname>
    <refpurpose>One-way string encryption (hashing)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>string</type><methodname>crypt</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>salt</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>crypt</function> will return an encrypted string using the
     standard Unix <abbrev>DES</abbrev>-based encryption algorithm or
     alternative algorithms that may be available on the system.  Arguments
     are a string to be encrypted and an optional salt string to base the
     encryption on.  See the Unix man page for your crypt function for more
     information.
    </para>
    <simpara>
     If the salt argument is not provided, one will be randomly
     generated by PHP.
    </simpara>
    <simpara>
     Some operating systems support more than one type of encryption.  In
     fact, sometimes the standard DES-based encryption is replaced by an
     MD5-based encryption algorithm.  The encryption type is triggered by the
     salt argument.  At install time, PHP determines the capabilities of the
     crypt function and will accept salts for other encryption types.  If no
     salt is provided, PHP will auto-generate a standard two character salt by
     default, unless the default encryption type on the system is MD5, in
     which case a random MD5-compatible salt is generated.  PHP sets a
     constant named CRYPT_SALT_LENGTH which tells you whether a regular two
     character salt applies to your system or the longer twelve character salt
     is applicable.
    </simpara>
    <simpara>
     If you are using the supplied salt, you should be aware that the salt is
     generated once. If you are calling this function recursively, this may
     impact both appearance and security.
    </simpara>
    <simpara>
     The standard DES-based encryption <function>crypt</function> returns the
     salt as the first two characters of the output. It also only uses the
     first eight characters of <parameter>str</parameter>, so longer strings
     that start with the same eight characters will generate the same result
     (when the same salt is used).
    </simpara>
    <simpara>
     On systems where the crypt() function supports multiple
     encryption types, the following constants are set to 0 or 1
     depending on whether the given type is available:
    </simpara>
    <itemizedlist>
     <listitem>
      <simpara>
       CRYPT_STD_DES - Standard DES-based encryption with a two character salt
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_EXT_DES - Extended DES-based encryption with a nine character salt
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_MD5 - MD5 encryption with a twelve character salt starting with
       $1$
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_BLOWFISH - Blowfish encryption with a sixteen character salt
       starting with $2$
      </simpara>
     </listitem>
    </itemizedlist>
    <note>
     <simpara>
      There is no decrypt function, since <function>crypt</function>
      uses a one-way algorithm.
     </simpara>
     </note>
    <example>
     <title><function>crypt</function> examples</title>
     <programlisting role="php">
<![CDATA[
<?php
$password = crypt("My1sTpassword"); # let salt be generated

# You should pass the entire results of crypt() as the salt for comparing a
# password, to avoid problems when different hashing algorithms are used. (As
# it says above, standard DES-based password hashing uses a 2-character salt,
# but MD5-based hashing uses 12.)
if (crypt($user_input,$password) == $password) {
   echo "Password verified!";
}
?>
]]>
     </programlisting>
    </example>
    <simpara>
     See also <function>md5</function> and <link linkend="ref.mcrypt">the
     Mcrypt extension</link>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
