<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.substr">
 <refnamediv>
  <refname>substr</refname>
  <refpurpose>Return part of a string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>substr</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>int</type><parameter>start</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
  </methodsynopsis>
  <para>
   Returns the portion of <parameter>string</parameter> specified by the
   <parameter>start</parameter> and <parameter>length</parameter> parameters.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       The input string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>start</parameter></term>
     <listitem>
      <para>
       If <parameter>start</parameter> is non-negative, the returned string
       will start at the <parameter>start</parameter>'th position in
       <parameter>string</parameter>, counting from zero. For instance,
       in the string '<literal>abcdef</literal>', the character at
       position <literal>0</literal> is '<literal>a</literal>', the
       character at position <literal>2</literal> is
       '<literal>c</literal>', and so forth.
      </para>
      <para>
       If <parameter>start</parameter> is negative, the returned string
       will start at the <parameter>start</parameter>'th character
       from the end of <parameter>string</parameter>.
      </para>
      <para>
       If <parameter>string</parameter> is less than or equal to
       <parameter>start</parameter> characters long, &false; will be returned.
      </para>
      <para>
       <example>
        <title>Using a negative <parameter>start</parameter></title>
        <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", -1);    // returns "f"
$rest = substr("abcdef", -2);    // returns "ef"
$rest = substr("abcdef", -3, 1); // returns "d"
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       If <parameter>length</parameter> is given and is positive, the string
       returned will contain at most <parameter>length</parameter> characters
       beginning from <parameter>start</parameter> (depending on the length of
       <parameter>string</parameter>).
      </para>
      <para>
       If <parameter>length</parameter> is given and is negative, then that many
       characters will be omitted from the end of <parameter>string</parameter>
       (after the start position has been calculated when a
       <parameter>start</parameter> is negative).  If
       <parameter>start</parameter> denotes a position beyond this truncation,
       an empty string will be returned.
      </para>
      <para>
       If <parameter>length</parameter> is given and is <literal>0</literal>,
       &false; or &null; an empty string will be returned.
      </para>
      <para>
       If <parameter>length</length> is omitted, the substring starting from
       <function>start</function> until the end of the string will be
       returned.
      </para>
      <example>
       <title>Using a negative <parameter>length</parameter></title>
       <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", 0, -1);  // returns "abcde"
$rest = substr("abcdef", 2, -1);  // returns "cde"
$rest = substr("abcdef", 4, -4);  // returns ""
$rest = substr("abcdef", -3, -1); // returns "de"
?>
]]>
       </programlisting>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the extracted part of string&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Basic <function>substr</function> usage</title>
    <programlisting role="php">
<![CDATA[
<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// Accessing single characters in a string
// can also be achieved using "square brackets"
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>
]]>
    </programlisting>
   </example>   
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Returns &false; on error.
   <example>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(substr('a', 1)); // bool(false)
?>
]]>
    </programlisting>
   </example>   
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strrchr</function></member>
    <member><function>substr_replace</function></member>
    <member><function>preg_match</function></member>
    <member><function>trim</function></member>
    <member><function>mb_substr</function></member>
    <member><function>wordwrap</function></member>
    <member><link linkend="language.types.string.substr">String access and modification by character</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
