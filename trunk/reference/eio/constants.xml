<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<appendix xml:id="eio.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>Request priority constants:
  <variablelist>

<!--{{{ EIO_PRI_* -->
   <varlistentry>
    <term>
     <constant>EIO_PRI_MIN</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Request minimal prioriry
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_PRI_DEFAULT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Request default prioriry
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_PRI_MAX</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Request maximal prioriry
     </simpara>
    </listitem>
   </varlistentry>
   <!--}}}-->

  </variablelist>
 </para>
 <para>
  Flags used with <function>eio_readdir</function>:
  <variablelist>

<!--{{{ EIO_READDIR_* -->
   <varlistentry>
    <term>
     <constant>EIO_READDIR_DENTS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     <function>eio_readdir</function> flag. If specified, the result argument of the callback
     becomes an array with the following keys:
     <literal>'names'</literal> - array of directory names
     <literal>'dents'</literal> - array of <literal>struct eio_dirent</literal>-like
     arrays having the following keys each:
     <literal>'name'</literal> - the directory name;
     <literal>'type'</literal> - one of <emphasis>EIO_DT_*</emphasis>
     constants;
     <literal>'inode'</literal> - the inode number, if available, otherwise
     unspecified;
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_READDIR_DIRS_FIRST</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     When this flag is specified, the names will be returned in an order
     where likely directories come first, in optimal stat order.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_READDIR_STAT_ORDER</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     When this flag is specified, then the names will be returned in an order
     suitable for <literal>stat</literal>'ing each one. When planning to
     <function>stat</function> all files in the given directory, the
     returned order will likely be
     fastest.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_READDIR_FOUND_UNKNOWN</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>

     </simpara>
    </listitem>
   </varlistentry>
<!--}}}-->

<!--{{{ EIO_DT_* -->
   <varlistentry>
    <term>
     <constant>EIO_DT_UNKNOWN</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Unknown node type(very common). Further <function>stat</function> needed.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_FIFO</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     FIFO node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_CHR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_MPC</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Multiplexed char device (v7+coherent) node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_DIR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Directory node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_NAM</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Xenix special named file node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_BLK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_MPB</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Multiplexed block device (v7+coherent)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_REG</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_NWK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_CMP</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     HP-UX network special node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_LNK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Link node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_SOCK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Socket node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_DOOR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Solaris door node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_WHT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Node type
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_DT_MAX</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     Highest node type value
     </simpara>
    </listitem>
   </varlistentry>

<!--}}}-->

  </variablelist>
 </para>
 <para>
  Access modes for <function>eio_open</function> <parameter>flags</parameter>
  argument:
  <variablelist>

<!--{{{ EIO_O_*-->
   <varlistentry>
    <term>
     <constant>EIO_O_RDONLY</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_WRONLY</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_RDWR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_NONBLOCK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_APPEND</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_CREAT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_TRUNC</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_EXCL</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_O_FSYNC</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
<!--}}}-->

  </variablelist>
 </para>
 <para>
  <parameter>mode</parameter> argument flags for <function>eio_open</function>:
  <variablelist>

<!--{{{ EIO_S_I*-->
   <varlistentry>
    <term>
     <constant>EIO_S_IRUSR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IWUSR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IXUSR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IRGRP</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IWGRP</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IXGRP</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IROTH</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IWOTH</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IXOTH</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IFREG</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IFCHR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IFBLK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IFIFO</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_S_IFSOCK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
<!--}}}-->


  </variablelist>
 </para>
 <para>
  <function>eio_sync_file_range</function> flags:
  <variablelist>

<!--{{{ EIO_SYNC_FILE_*-->
   <varlistentry>
    <term>
     <constant>EIO_SYNC_FILE_RANGE_WAIT_BEFORE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_SYNC_FILE_RANGE_WRITE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <constant>EIO_SYNC_FILE_RANGE_WAIT_AFTER</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
<!--}}}-->


  </variablelist>
 </para>
 <para>
  <function>eio_fallocate</function> flags:
  <variablelist>

   <varlistentry>
    <term>
     <constant>EIO_FALLOC_FL_KEEP_SIZE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>

 <note xmlns="http://docbook.org/ns/docbook">
  <para>
   <emphasis>EIO_S_I*</emphasis> constants have the same meaning as their
   <emphasis>S_I*</emphasis> POSIX counterparts.
  </para>
 </note>

 <note xmlns="http://docbook.org/ns/docbook">
  <para>
   <emphasis>EIO_SYNC_FILE_*</emphasis> constants have the same meaning as their
   <emphasis>SYNC_FILE_**</emphasis> counterparts.
  </para>
 </note>

 <note xmlns="http://docbook.org/ns/docbook">
  <para>
   <emphasis>EIO_O_*</emphasis> constants have the same meaning as their
   <emphasis>O_*</emphasis> POSIX counterparts.
  </para>
 </note>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
