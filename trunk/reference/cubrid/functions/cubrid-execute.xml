<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.cubrid-execute" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_execute</refname>
  <refpurpose>Execute a prepared SQL statement</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>conn_identifier</parameter></methodparam>  
   <methodparam><type>string</type><parameter>SQL</parameter></methodparam>  
   <methodparam choice="opt"><type>int</type><parameter>option</parameter></methodparam>  
  </methodsynopsis>
  <methodsynopsis>
   <type>bool</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>request_identifier</parameter></methodparam>  
   <methodparam choice="opt"><type>int</type><parameter>option</parameter></methodparam>  
  </methodsynopsis>
    <para>
        The <function>cubrid_execute</function> function is used to execute
        the given SQL sentence. It executes the query by using
        <parameter>conn_identifier</parameter> and SQL, and then returns the
        request identifier created. It is used for simple execution of query,
        where the parameter binding is not needed. In addition, the
        <function>cubrid_execute</function> function is used to execute the
        prepared statement by means of <function>cubrid_prepare</function> and
        <function>cubrid_bind</function>. At this time, you need to specify
        arguments of <parameter>request_identifier</parameter> and
        <parameter>option</parameter>.
    </para>
    <para>
        You can use the <parameter>option</parameter> argument to tell whether
        to receive oid of the row after the execution, and, whether to execute
        the query in asynchronous mode. You can use it by setting the
        CUBRID_INCLUDE_OID and CUBRID_ASYNC using bitwise or operator. If the
        both variables are not explicitly given, they are not selected by
        default.
    </para>
    <para>
        If the first argument is <parameter>request_identifier</parameter> to
        execute the <function>cubrid_prepare</function> function, you can
        specify an option, CUBRID_ASYNC only.
    </para>
 </refsect1>

  <refsect1 role="parameters">
 &reftitle.parameters;
 <para>
      <variablelist>
        <varlistentry>
      <term><parameter>conn_identifier</parameter></term>
      <listitem><para>Connection identifier.</para></listitem>
       </varlistentry>
       <varlistentry>
      <term><parameter>SQL</parameter></term>
      <listitem><para>SQL to be executed.</para></listitem>
       </varlistentry>
       <varlistentry>
      <term><parameter>option</parameter></term>
      <listitem><para>Query execution option CUBRID_INCLUDE_OID, CUBRID_ASYNC.</para></listitem>
       </varlistentry>
        <varlistentry>
      <term><parameter>request_identifier</parameter></term>
      <listitem><para><function>cubrid_prepare</function> identifier.</para></listitem>
       </varlistentry>
      </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    Request identifier, when process is successful and first param is
    conn_identifier; &true;, when process is successful and first argument is
    request_identifier.
  </para>
  <para>
    &false;, when process is unsuccessful.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>cubrid_execute</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = cubrid_connect("localhost", 33000, "demodb");

$result = cubrid_execute($conn, "SELECT code FROM event WHERE name='100m Butterfly' and gender='M'", CUBRID_ASYNC);
$row = cubrid_fetch_array($result, CUBRID_ASSOC);
$event_code = $row["code"];

cubrid_close_request($result);

$history_req = cubrid_prepare($conn, "SELECT * FROM history WHERE event_code=?");
cubrid_bind($history_req, 1, $event_code, "number");
cubrid_execute($history_req);

printf("%-20s %-9s %-10s %-5s\n", "athlete", "host_year", "score", "unit");
while ($row = cubrid_fetch_array($history_req, CUBRID_ASSOC)) {
    printf("%-20s %-9s %-10s %-5s\n", 
        $row["athlete"], $row["host_year"], $row["score"], $row["unit"]);
}

cubrid_close_request($history_req);

cubrid_disconnect($conn);
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
athlete              host_year score      unit 
Phelps Michael       2004      51.25      time 
]]>
   </screen>
  </example>
 </refsect1>

   <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
   <member><function>cubrid_close_request</function></member>
   <member><function>cubrid_commit</function></member>
   <member><function>cubrid_rollback</function></member>
   <member><function>cubrid_prepare</function></member>
   <member><function>cubrid_bind</function></member>
   </simplelist>
  </para>
  </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
