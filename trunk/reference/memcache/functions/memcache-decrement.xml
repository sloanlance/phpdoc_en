<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<refentry id="function.Memcache-decrement">
 <refnamediv>
  <refname>Memcache::decrement</refname>
  <refpurpose>Decrement item's value</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>int</type><methodname>Memcache::decrement</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcache::decrement</function> decrements value of the 
   item by <parameter>value</parameter>. Similarly to 
   <function>Memcache::increment</function>, current value of the item is
   being converted to numerical and after that <parameter>value</parameter>
   is substracted. 
  </para>
  <para>
   Parameter <parameter>value</parameter> is optional. It's default is 1.
  </para>
  <note>
   <para>
    New item's value will not be less than zero.
   </para>
  </note>
  <note>
   <para>
    Do not use <function>Memcache::decrement</function> with item, which was
    stored compressed, because consequent call to 
    <function>Memcache::get</function> will fail.
   </para>
  </note>
  <para>
   Also you can use <function>memcache_decrement</function> function.
   See example below.
  </para>
  <example>
   <title><function>Memcache::decrement</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
/* decrement item by 2 */
$new_value = memcache_decrement($memcache_obj, 'test_item', 2);

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
/* decrement item by 3 */
$new_value = $memcache_obj->decrement('test_item', 3);
?>
]]>
    </programlisting>
   </example>
  <para>
   <function>Memcache::decrement</function> <emphasis>does not</emphasis>
   create an item if it didn't exist.
  </para>
  <para>
   <function>Memcache::decrement</function> returns item's new value on 
   success or &false; on failure.
  </para>
  <para>
   See also
   <function>Memcache::increment</function>,
   <function>Memcache::replace</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
