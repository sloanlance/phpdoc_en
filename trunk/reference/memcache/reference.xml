<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- Purpose: remote.other -->
<!-- Membership: pecl, external -->

 <reference id="ref.memcache">
  <title>Memcache Functions</title>
  <titleabbrev>Memcache</titleabbrev>

  <partintro>
   <section id="memcache.intro">
    &reftitle.intro;
    <para>
     Memcache module provides handy procedural and object oriented interface
     to memcached, highly effective caching daemon, which was especially
     designed to decrease database load in dynamic web applications.
    </para>
    <para>
     This module doesn't have native support of multiple servers, but you
     still can implement it yourself in your application. Establish several
     memcached connections, set priority level for each server etc.
    </para>
    <para>
     More information about memcached can be found at <ulink
     url="&url.memcache;">&url.memcache;</ulink>.
    </para>
   </section>

   <section id="memcache.requirements">
    &reftitle.required;
    <para>
     This module uses functions of <ulink url="&url.zlib;">zlib</ulink>
     to support on-the-fly data compression. Zlib is required to install
     this module.
    </para>
    <para>
     PHP 4.3.3 or newer is required to use the memcache extension.
    </para>
   </section>

   &reference.memcache.configure;
   &reference.memcache.constants;
   
   <section id="memcache.ini">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="memcache.resources">
    &reftitle.resources;
    <para>
     There is only one resource type used in memcache module - it's
     the link identifier for a cache server connection.
    </para>
   </section>

   <section id="memcache.examples">
   &reftitle.examples;
    <para>
     <example>
      <title>memcache extension overview example</title>
      <programlisting role="php">
<![CDATA[
<?php

$memcache = new Memcache;
$memcache->connect('localhost', 11211) or die ("Could not connect");

$version = $memcache->getVersion();
echo "Server's version: ".$version."<br/>\n";

$tmp_object = new stdClass;
$tmp_object->str_attr = 'test';
$tmp_object->int_attr = 123;

$memcache->set('key', $tmp_object, false, 10) or die ("Failed to save data at the server");
echo "Store data in the cache (data will expire in 10 seconds)<br/>\n";

$get_result = $memcache->get('key');
echo "Data from the cache:<br/>\n";

var_dump($get_result);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     In the above example, an object is being saved in the cache and then
     retrieved back. Object and other non-scalar types are serialized before 
     saving, so it's impossible to store resources (i.e. connection identifiers
     and others) in the cache.
    </para>
   </section>

  </partintro>

  &reference.memcache.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
