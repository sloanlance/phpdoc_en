<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.26 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.2 -->
<refentry id="function.array-walk">
 <refnamediv>
  <refname>array_walk</refname>
  <refpurpose>Apply a user function to every member of an array</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>bool</type><methodname>array_walk</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callback</type><parameter>funcname</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>userdata</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   &return.success;
  </simpara>
  <simpara>
   Applies the user-defined function <parameter>funcname</parameter> to each
   element of the <parameter>array</parameter> array. Typically,
   <parameter>funcname</parameter> takes on two parameters.
   The <parameter>array</parameter> parameter's value being the first, and
   the key/index second. If the optional <parameter>userdata</parameter>
   parameter is supplied, it will be passed as the third parameter to
   the callback <parameter>funcname</parameter>.
  </simpara>
  <simpara>
   If function <parameter>funcname</parameter> requires more parameters than
   given to it, an error of level <link linkend="errorfunc.constants">
   E_WARNING</link> will be generated each time <function>array_walk</function>
   calls <parameter>funcname</parameter>. These warnings may be suppressed by
   prepending the PHP error operator
   <link linkend="language.operators.errorcontrol">@</link> to the
   <function>array_walk</function> call, or by using
   <function>error_reporting</function>.
  </simpara>
  <note>
   <para>
    If <parameter>funcname</parameter> needs to be working with the
    actual values of the array, specify the first parameter of
    <parameter>funcname</parameter> as a
    <link linkend="language.references">reference</link>. Then,
    any changes made to those elements will be made in the
    original array itself.
   </para>
  </note>
  <note>
   <para>
    Passing the key and userdata to <parameter>funcname</parameter> was
    added in 4.0.0
   </para>
  </note>
  <para>
   <function>array_walk</function> is not affected by the internal
   array pointer of <parameter>array</parameter>.  <function>
   array_walk</function> will walk through the entire array
   regardless of pointer position.
  </para>
  <para>
   Users may not change the array itself from the callback
   function. e.g. Add/delete elements, unset elements, etc.  If
   the array that <function>array_walk</function> is applied to
   is changed, the behavior of this function is undefined, and
   unpredictable.
  </para>
  <para>
   <example>
    <title><function>array_walk</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");

function test_alter(&$item1, $key, $prefix)
{
    $item1 = "$prefix: $item1";
}

function test_print($item2, $key)
{
    echo "$key. $item2<br />\n";
}

echo "Before ...:\n";
array_walk($fruits, 'test_print');

array_walk($fruits, 'test_alter', 'fruit');
echo "... and after:\n";

array_walk($fruits, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Before ...:
d. lemon
a. orange
b. banana
c. apple
... and after:
d. fruit: lemon
a. fruit: orange
b. fruit: banana
c. fruit: apple
]]>
    </screen>
   </example>
  </para>
  <simpara>
   See also <function>array_walk_recursive</function>,
   <function>create_function</function>,
   <function>list</function>,
   <link linkend="control-structures.foreach">foreach</link>,
   <function>each</function>,
   <function>call_user_func_array</function>, and
   <function>array_map</function>, and
   &seealso.callback;.
  </simpara>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
