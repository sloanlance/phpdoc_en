<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.14 -->
  <refentry id="function.array-udiff-uassoc">
   <refnamediv>
    <refname>array_udiff_uassoc</refname>
    <refpurpose>Computes the difference of arrays with additional index check. The data is compared by using a callback function. The index check is done by a callback function also</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>array</type><methodname>array_udiff_uassoc</methodname>
      <methodparam><type>array</type><parameter>array1</parameter></methodparam>
      <methodparam><type>array</type><parameter>array2</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter> ...</parameter></methodparam>
      <methodparam><type>callback</type><parameter>data_compare_func</parameter></methodparam>
      <methodparam><type>callback</type><parameter>key_compare_func</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_udiff_uassoc</function> returns an <type>array</type>
     containing all the values from <parameter>array1</parameter>
     that are not present in any of the other arguments.
     Note that the keys are used in the comparison unlike 
     <function>array_diff</function> and <function>array_udiff</function>.
     The comparison of arrays' data is performed by using an user-supplied
     callback : <parameter>data_compare_func</parameter>. In this aspect
     the behaviour is opposite to the behaviour of
     <function>array_diff_assoc</function> which uses internal function for
     comparison. The comparison of keys (indices) is done also by the 
     callback function <parameter>key_compare_func</parameter>. This
     behaviour is unlike what <function>array_udiff_assoc</function> does, since
     the latter compares the indices by using an internal function.
    </para>
    <para>
     <example>
      <title><function>array_udiff_uassoc</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
class cr {
	private $priv_member;
        function cr($val) {
		$this->priv_member = $val;
	}
	static function comp_func_cr($a, $b) {
		if ($a->priv_member === $b->priv_member) return 0;
		return ($a->priv_member > $b->priv_member)? 1:-1;
	}
	static function comp_func_key($a, $b) {
		if ($a === $b) return 0;
		return ($a > $b)? 1:-1;
	}
}
$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr( 3), 1=> new cr(4), 2 => new cr(-15),);

$result = array_udiff_uassoc($a, $b, array("cr", "comp_func_cr"), array("cr","comp_func_key"));
print_r($result);
?>

/* The result is:
Array
(
    [0.1] => cr Object
        (
            [priv_member:private] => 9
        )

    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )
)
*/
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     In our example above you see the <literal>"1" =&gt; new cr(4)</literal>
     pair is present in both arrays and thus it is not in the ouput from the
     function. Keep in mind that you have to supply 2 callback functions. 
    </simpara>
    <simpara>
     For comparison is used the user supplied callback function.
     It must return an integer less than, equal
     to, or greater than zero if the first argument is considered to
     be respectively less than, equal to, or greater than the
     second.
    </simpara>
    <note>
     <simpara>
      Please note that this function only checks one dimension of a n-dimensional
      array. Of course you can check deeper dimensions by using, for example, 
      <literal>array_udiff_assoc($array1[0], $array2[0], "some_comparison_func");</literal>.
     </simpara>
    </note>
    <para>
     See also
     <function>array_diff</function>,
     <function>array_diff_assoc</function>,
     <function>array_diff_uassoc</function>,
     <function>array_udiff</function>,
     <function>array_udiff_assoc</function>, 
     <function>array_intersect</function>,  
     <function>array_intersect_assoc</function>,
     <function>array_uintersect</function>,  
     <function>array_uintersect_assoc</function> and 
     <function>array_uintersect_uassoc</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
