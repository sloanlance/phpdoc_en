<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
  <refentry id="function.array-intersect-assoc">
   <refnamediv>
    <refname>array_intersect_assoc</refname>
    <refpurpose>Computes the intersection of arrays with additional index check</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>array</type><methodname>array_intersect_assoc</methodname>
      <methodparam><type>array</type><parameter>array1</parameter></methodparam>
      <methodparam><type>array</type><parameter>array2</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter> ...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>array_intersect_assoc</function> returns an array
     containing all the values of <parameter>array1</parameter>
     that are present in all the arguments. Note that the keys are used in
     the comparison unlike in <function>array_intersect</function>.
    </simpara>
    <para>
     <example>
      <title><function>array_intersect_assoc</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "green", "yellow", "red");
$result_array = array_intersect_assoc($array1, $array2);
?>
]]>
      </programlisting>
      <para>
       $result_array will look like:
      </para>
      <screen>
<![CDATA[
Array
(
    [a] => green
)
]]>
      </screen>
     </example>
    </para>
    <simpara>
     In our example you see that only the pair <literal>"a" =&gt;
     "green"</literal> is present in both arrays and thus is returned. 
     The value <literal>"red"</literal> is not returned because in 
     <varname>$array1</varname> its key is <literal>0</literal> while
     the key of "red" in <varname>$array2</varname> is 
     <literal>1</literal>.
    </simpara>
    <simpara>
     The two values from the <literal>key =&gt; value</literal> pairs are
     considered equal only if 
     <literal>(string) $elem1 === (string) $elem2 </literal>. In otherwords
     a strict type check is executed so the string representation must be
     the same. 
     <!-- TODO: example of it... -->
    </simpara>
    <simpara>
     See also <function>array_intersect</function>,
     <function>array_diff</function> and
     <function>array_diff_assoc</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
