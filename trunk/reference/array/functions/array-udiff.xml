<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.14 -->
  <refentry id="function.array-udiff">
   <refnamediv>
    <refname>array_udiff</refname>
    <refpurpose>Computes the difference of arrays by using a callback function for data comparison.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>array</type><methodname>array_udiff</methodname>
      <methodparam><type>array</type><parameter>array1</parameter></methodparam>
      <methodparam><type>array</type><parameter>array2</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter> ...</parameter></methodparam>
      <methodparam><type>callback</type><parameter>data_compare_func</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_udiff</function> returns an array
     containing all the values of <parameter>array1</parameter>
     that are not present in any of the other arguments.
     Note that keys are preserved. For the comparison of the data
     <parameter>data_compare_func</parameter> is used.
     It must return an integer less than, equal
     to, or greater than zero if the first argument is considered to
     be respectively less than, equal to, or greater than the
     second. This is unlike <function>array_diff</function> which uses an
     internal function for comparing the data.
    </para>
    <para>
     <example>
      <title><function>array_udiff</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
class cr {
    var $priv_member;
    function cr($val) {
        $this->priv_member = $val;
    }
    function comp_func_cr($a, $b) {
        if ($a->priv_member === $b->priv_member) return 0;
        return ($a->priv_member > $b->priv_member)? 1:-1;
    }
}
$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

$result = array_udiff($a, $b, array("cr", "comp_func_cr"));
print_r($result);
?>
]]>
      </programlisting>
      <para>
       The result is:
      </para>
      <screen>
<![CDATA[
Array
(
    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )

)
]]>
      </screen>
     </example>
    </para>
    <note>
     <simpara>
      Two elements are considered equal if and only if
      <literal>(string) $elem1 === (string) $elem2</literal>. In words:
      when the string representation is the same.
     </simpara>
    </note>
    <note>
     <simpara>
      Please note that this function only checks one dimension of a n-dimensional
      array. Of course you can check deeper dimensions by using
      <literal>array_udiff($array1[0], $array2[0], "data_compare_func");</literal>.
     </simpara>
    </note>
    <para>
     See also
     <function>array_diff</function>,
     <function>array_diff_assoc</function>,
     <function>array_diff_uassoc</function>,
     <function>array_udiff_assoc</function>, 
     <function>array_udiff_uassoc</function>, 
     <function>array_intersect</function>,  
     <function>array_intersect_assoc</function>,
     <function>array_uintersect</function>,  
     <function>array_uintersect_assoc</function> and 
     <function>array_uintersect_uassoc</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
