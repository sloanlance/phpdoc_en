<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.2 $ -->
  <refentry id="function.array-walk-recursive">
   <refnamediv>
    <refname>array_walk_recursive</refname>
    <refpurpose>
     Apply a user function recursively to every member of an array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>bool</type><methodname>array_walk_recursive</methodname>
     <methodparam><type>array</type><parameter>input</parameter></methodparam>
     <methodparam><type>string</type><parameter>funcname</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>userdata</parameter></methodparam>
    </methodsynopsis>
    <simpara>
     &return.success;
    </simpara>
    <simpara>
     Applies the user-defined function <parameter>function</parameter> to each
     element of the <parameter>array</parameter> array. This function will recur
     into deeper arrays. Typically,  <parameter>function</parameter> takes on two
     parameters. The <parameter>array</parameter> parameter's value being the first, and
     the key/index second. If the optional <parameter>userdata</parameter>
     parameter is supplied, it will be passed as the third parameter to
     the callback <parameter>function</parameter>.
    </simpara>
    <note>
     <para>
      If <parameter>function</parameter> needs to be working with the
      actual values of the array, specify the first parameter of
      <parameter>function</parameter> as a 
      <link linkend="language.references">reference</link>. Then,
      any changes made to those elements will be made in the 
      original array itself.
     </para>
    </note>
    <para>
     <example>
      <title><function>array_walk_recursive</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
$sweet = array('a' => 'apple', 'b' => 'banana');
$fruits = array('sweet' => $sweet, 'sour' => 'lemon');

function test_alter(&$item1, $key, $prefix) 
{
    $item1 = "$prefix: $item1";
}

function test_print($item2, $key) 
{
    echo "$key. $item2<br />\n";
}

echo "Before ...:\n";
array_walk($fruits, 'test_print');

array_walk($fruits, 'test_alter', 'fruit');
echo "... and after:\n";

array_walk($fruits, 'test_print');
?>
]]>
      </programlisting>
      <para>
       The printout of the program above will be:
      </para>
      <screen role="php">
<![CDATA[
// No idea, because PHP segfaults!
]]>
      </screen>
     </example>
    </para>
    <simpara>
     See also <function>array_walk</function>
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
