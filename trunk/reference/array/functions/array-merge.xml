<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<refentry xml:id="function.array-merge" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_merge</refname>
  <refpurpose>Merge one or more arrays</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_merge</methodname>
   <methodparam><type>array</type><parameter>array1</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>array2</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Merges the elements of one or more arrays together so that the values of
   one are appended to the end of the previous one. It returns the resulting
   array.
  </para>
  <para>
   If the input arrays have the same string keys, then the later value for
   that key will overwrite the previous one.  If, however, the arrays
   contain numeric keys, the later value will <emphasis
   role="strong">not</emphasis> overwrite the original value, but will be
   appended.
  </para>
  <para>
   If only one array is given and the array is numerically indexed, the
   keys get reindexed in a continuous way.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array1</parameter></term>
     <listitem>
      <para>
       Initial array to merge.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Variable list of arrays to recursively merge.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the resulting array.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.0.0</entry>
       <entry>
        <warning>
         <para>
          The behavior of <function>array_merge</function> was modified in PHP 5. Unlike PHP 4, <function>array_merge</function>
          now only accepts parameters of type <type>array</type>. However, you can use typecasting
          to merge other types. See the example below for details.
         </para>
         <para>
          <example>
           <title><function>array_merge</function> PHP 5 example</title>
           <programlisting role="php">
<![CDATA[
<?php
$beginning = 'foo';
$end = array(1 => 'bar');
$result = array_merge((array)$beginning, (array)$end);
print_r($result);
?>
]]>
           </programlisting>
           &example.outputs;
           <screen role="php">
    <![CDATA[
    Array
    (
        [0] => foo
        [1] => bar
    )
]]>
           </screen>
          </example>
         </para>
        </warning>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_merge</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array("color" => "red", 2, 4);
$array2 = array("a", "b", "color" => "green", "shape" => "trapezoid", 4);
$result = array_merge($array1, $array2);
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [color] => green
    [0] => 2
    [1] => 4
    [2] => a
    [3] => b
    [shape] => trapezoid
    [4] => 4
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Simple <function>array_merge</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array();
$array2 = array(1 => "data");
$result = array_merge($array1, $array2);
?>
]]>
    </programlisting>
    <para>
     Don't forget that numeric keys will be renumbered!
    </para>
    <screen role="php">
<![CDATA[
Array
(
    [0] => data
)
]]>
    </screen>
    <para>
     If you want to completely preserve the arrays and just want to append
     them to each other (not overwriting the previous keys), use the
     <literal>+</literal> operator:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$array1 = array();
$array2 = array(1 => "data");
$result = $array1 + $array2;
?>
]]>
    </programlisting>
    <para>
     The numeric key will be preserved and thus the association remains.
    </para>
    <screen role="php">
<![CDATA[
Array
(
    [1] => data
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_merge_recursive</function></member>
    <member><function>array_combine</function></member>
    <member><link linkend="language.operators.array">array operators</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
