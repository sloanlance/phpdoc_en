<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.11 -->
  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>Sort multiple or multi-dimensional arrays</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>bool</type><methodname>array_multisort</methodname>
     <methodparam><type>array</type><parameter>ar1</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     <!-- Parameters don't need to be passed by reference -->
    </methodsynopsis> 
    <para>
     &return.success;
    </para>
    <para>
     <function>array_multisort</function> can be used to sort several
     arrays at once, or a multi-dimensional array by one or more
     dimensions.
    </para>
    <para>
     Associative (<type>string</type>) keys will be maintained, but numeric
     keys will be re-indexed.
    </para>
    <para>
     The input arrays are treated as columns of a table to be sorted
     by rows - this resembles the functionality of SQL ORDER BY
     clause. The first array is the primary one to sort by. The rows
     (values) in that array that compare the same are sorted by the
     next input array, and so on.
    </para>
    <para>
     The argument structure of this function is a bit unusual, but
     flexible. The first argument has to be an array. Subsequently,
     each argument can be either an array or a sorting flag from the
     following lists.
    </para>
    <para>
     Sorting order flags:
     <itemizedlist>
      <listitem>
       <simpara><constant>SORT_ASC</constant> - Sort in ascending order</simpara>
      </listitem>
      <listitem>
       <simpara><constant>SORT_DESC</constant> - Sort in descending order</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Sorting type flags:
     <itemizedlist>
      <listitem>
       <simpara><constant>SORT_REGULAR</constant> - Compare items normally</simpara>
      </listitem>
      <listitem>
       <simpara><constant>SORT_NUMERIC</constant> - Compare items numerically</simpara>
      </listitem>
      <listitem>
       <simpara><constant>SORT_STRING</constant> - Compare items as strings</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     No two sorting flags of the same type can be specified after each
     array. The sorting flags specified after an array argument apply
     only to that array - they are reset to default <constant>SORT_ASC</constant> and
     <constant>SORT_REGULAR</constant> before each new array argument.
    </para>

    <para>
     <example>
      <title>Sorting multiple arrays</title>
      <programlisting role="php">
<![CDATA[
<?php
$ar1 = array("10", 100, 100, "a");
$ar2 = array(1, 3, "2", 1);
array_multisort($ar1, $ar2);

var_dump($ar1);
var_dump($ar2);
?>
]]>
      </programlisting>
      <para>
       In this example, after sorting, the first array will contain "10",
       "a", 100, 100. The second array will contain 1, 1, "2", 3. The
       entries in the second array corresponding to the identical
       entries in the first array (100 and 100) were sorted as well.
      </para>
      <screen>
<![CDATA[
array(4) {
  [0]=> string(2) "10"
  [1]=> string(1) "a"
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(1)
  [1]=> int(1)
  [2]=> string(1) "2"
  [3]=> int(3)
}
]]>     
      </screen>
     </example>
    </para>

    <para>
     <example>
      <title>Sorting multi-dimensional array</title>
      <programlisting role="php">
<![CDATA[
<?php
$ar = array(
       array("10", 11, 100, 100, "a"), 
       array(   1,  2, "2",   3,   1)
      );
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>
]]>
      </programlisting>
      <para>
       In this example, after sorting, the first array will transform to
       "10", 100, 100, 11, "a" (it was sorted as strings in ascending 
       order). The second will contain 1, 3, "2", 2, 1 (sorted as numbers,
       in descending order).
      </para>
      <screen>
<![CDATA[
array(2) {
  [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
  }
  [1]=> array(5) {
    [0]=> int(1)
    [1]=> int(3)
    [2]=> string(1) "2"
    [3]=> int(2)
    [4]=> int(1)
  }
}
]]>
      </screen>
     </example>
    </para>

    <para>
     <example>
      <title>Sorting database results</title>
      <para>
       For this example, each element in the <varname>data</varname>
       array represents one row in a table. This type of dataset is typical
       of database records.
      </para>
      <para>
       Example data:
      </para>
      <screen>
<![CDATA[
volume | edition
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7
]]>
      </screen>
      <para>
       The data as an array, called <varname>data</varname>. This would usually,
       for example, be obtained by looping with <function>mysql_fetch_assoc</function>.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);
?>
]]>
      </programlisting>
      <para>
       In this example, we will order by <varname>volume</varname> descending,
       <varname>edition</varname> ascending.
      </para>
      <para>
       We have an array of rows, but <function>array_multisort</function>
       requires an array of columns, so we use the the below code to obtain the
       columns, then perform the sorting.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
// Obtain a list of columns
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// Sort the data with volume descending, edition ascending
// Add $data as the last parameter, to sort by the common key
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>
]]>
      </programlisting>
      <para>
       The dataset is now sorted, and will look like this:
      </para>
      <screen>
<![CDATA[
volume | edition
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7
]]>
      </screen>
     </example>
    </para>

    <para>
     <example>
      <title>Case insensitive sorting</title>
      <para>
       Both <constant>SORT_STRING</constant> and
       <constant>SORT_REGULAR</constant> are case sensitive, strings
       starting with a capital letter will come before strings starting
       with a lowercase letter.
      </para>
      <para>
       To perform a case insensitive search, force the sorting order to be
       determined by a lowercase copy of the original array.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
    [0] => Alpha
    [1] => atomic
    [2] => bank
    [3] => Beta
)
]]>
      </screen>
     </example>
    </para>

   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
