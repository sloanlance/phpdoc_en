<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
<section id="array.constants">
 &reftitle.constants;
 &extension.constants.core;
 <para>
 <variablelist>
  <varlistentry>
   <term>
    <constant>CASE_LOWER</constant>
    (<link linkend="language.types.integer">integer</link>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_LOWER</constant> is used with
     <function>array_change_key_case</function> and is used to convert array
     keys to lower case. This is also the default case for
     <function>array_change_key_case</function>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>CASE_UPPER</constant>
    (<link linkend="language.types.integer">integer</link>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_UPPER</constant> is used with
     <function>array_change_key_case</function> and is used to convert array
     keys to upper case.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para> Sorting order flags:
 <variablelist>
  <varlistentry>
   <term>
    <constant>SORT_ASC</constant> 
    (<link linkend="language.types.integer">integer</link>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_ASC</constant> is used with
     <function>array_multisort</function> to sort in ascending order.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>SORT_DESC</constant> 
    (<link linkend="language.types.integer">integer</link>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_DESC</constant> is used with
     <function>array_multisort</function> to sort in descending order.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para> Sorting type flags: used by various sort functions
 <variablelist>
  <varlistentry>
   <term>
    <constant>SORT_REGULAR</constant> 
    (<link linkend="language.types.integer">integer</link>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_REGULAR</constant> is used to compare items normally.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>SORT_NUMERIC</constant> 
    (<link linkend="language.types.integer">integer</link>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_NUMERIC</constant> is used to compare items numerically.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>SORT_STRING</constant> 
    (<link linkend="language.types.integer">integer</link>)
   </term>
   <listitem>
    <simpara>
    <constant>SORT_STRING</constant> is used to compare items as strings.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>
 <variablelist>
  <varlistentry>
   <term>
    <constant>COUNT_NORMAL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>COUNT_RECURSIVE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_OVERWRITE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_SKIP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_PREFIX_SAME</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_PREFIX_ALL</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_PREFIX_INVALID</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_PREFIX_IF_EXISTS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_IF_EXISTS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>EXTR_REFS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

