<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.4 $ -->

<refentry xml:id="memcached.getmulti" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Memcached::getMulti</refname>
  <refpurpose>Retrieve multiple items</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>Memcached::getMulti</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">cas_tokens</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcached::getMulti</function> is similar to
   <methodname>Memcached::get</methodname>, but instead of a single key
   item, it retrievess multiple items the keys of which are specified in the
   <parameter>keys</parameter> array. If <parameter>cas_tokens</parameter>
   variable is provided, it is filled with the CAS token values for the found
   items.
   <note>
    <para>
     Unlike <methodname>Memcached::get</methodname> it is not possible to
     specify a read-through cache callback for
     <function>Memcached::getMulti</function>, because the memcache protocol
     does not provide information on which keys were not found in the multi-key
     request.
    </para>
   </note>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>keys</parameter></term>
     <listitem>
      <para>
       Array of keys to retrieve.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cas_tokens</parameter></term>
     <listitem>
      <para>
       The variable to store the CAS tokens for the found items.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the array of found items or &false; on failure.
   Use <methodname>Memcached::getResultCode</methodname> if necessary.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>Memcached::getMulti</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

$items = array(
    'key1' => 'value1',
    'key2' => 'value2',
    'key3' => 'value3'
);
$m->setMulti($items);
$result = $m->getMulti(array('key1', 'key3', 'badkey'), $cas);
var_dump($result, $cas);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(2) {
  ["key1"]=>
  string(6) "value1"
  ["key3"]=>
  string(6) "value3"
}
array(2) {
  ["key1"]=>
  float(2360)
  ["key3"]=>
  float(2362)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Memcached::getMultiByKey</methodname></member>
    <member><methodname>Memcached::get</methodname></member>
    <member><methodname>Memcached::getDelayed</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
