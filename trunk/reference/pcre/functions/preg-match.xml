<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./en/functions/pcre.xml, last change in rev 1.2 -->
  <refentry id="function.preg-match">
   <refnamediv>
    <refname>preg_match</refname>
    <refpurpose>Perform a regular expression match</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>preg_match</methodname>
      <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
      <methodparam><type>string</type><parameter>subject</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>matches</parameter></methodparam>
     </methodsynopsis>
    <para>
     Searches <parameter>subject</parameter> for a match to the regular
     expression given in <parameter>pattern</parameter>.
    </para>
    <para>
     If <parameter>matches</parameter> is provided, then it is filled
     with the results of search.  $matches[0] will contain the text that
     matched the full pattern, $matches[1] will have the text that matched
     the first captured parenthesized subpattern, and so on.
    </para>
    <para>
     Returns &true; if a match for <parameter>pattern</parameter> was
     found in the subject string, or &false; if not match was found
     or an error occurred.
    </para>
    <para>
     <example>
      <title>Find the string of text "php"</title>
      <programlisting role="php">
<![CDATA[
// the "i" after the pattern delimiter indicates a case-insensitive search
if (preg_match ("/php/i", "PHP is the web scripting language of choice.")) {
    print "A match was found.";
} else {
    print "A match was not found.";
}
]]>
      </programlisting>
     </example>
     <example>
      <title>find the word "web"</title>
      <programlisting role="php">
<![CDATA[
// the \b in the pattern indicates a word boundary, so only the distinct
// word "web" is matched, and not a word partial like "webbing" or "cobweb"
if (preg_match ("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    print "A match was found.";
} else {
    print "A match was not found.";
}
if (preg_match ("/\bweb\b/i", "PHP is the website scripting language of choice.")) {
    print "A match was found.";
} else {
    print "A match was not found.";
}
]]>
      </programlisting>
     </example>
     <example>
      <title>Getting the domain name out of a URL</title>
      <programlisting role="php">
<![CDATA[
// get host name from URL
preg_match("/^(http:\/\/)?([^\/]+)/i",
"http://www.php.net/index.html", $matches);
$host = $matches[2];
// get last two segments of host name
preg_match("/[^\.\/]+\.[^\.\/]+$/",$host,$matches);
echo "domain name is: ".$matches[0]."\n";
]]>
      </programlisting>
      <para>
       This example will produce:
       <screen>
<![CDATA[
domain name is: php.net
]]>
       </screen>
      </para>
     </example>
     See also <function>preg_match_all</function>, 
     <function>preg_replace</function>, and
     <function>preg_split</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
