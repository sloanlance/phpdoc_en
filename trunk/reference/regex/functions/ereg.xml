<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- splitted from ./en/functions/regex.xml, last change in rev 1.2 -->
  <refentry id="function.ereg">
   <refnamediv>
    <refname>ereg</refname>
    <refpurpose>Regular expression match</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>mixed</type><methodname>ereg</methodname>
     <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>string</type><parameter>string</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter>&amp;regs</parameter></methodparam>
    </methodsynopsis>
    <note>
     <para>
      <function>preg_match</function>, which uses a Perl-compatible 
      regular expression syntax, is often a faster alternative to
      <function>ereg</function>.
     </para>
    </note>
    <simpara>
     Searches a <parameter>string</parameter> for matches to the regular
     expression given in <parameter>pattern</parameter> in a case-sensitive
     way.
    </simpara>
    <simpara>
     If matches are found for parenthesized substrings of
     <parameter>pattern</parameter> and the function is called with
     the third argument <parameter>regs</parameter>, the matches will
     be stored in the elements of the array
     <parameter>regs</parameter>. $regs[1] will contain the substring
     which starts at the first left parenthesis; $regs[2] will contain
     the substring starting at the second, and so on. $regs[0] will
     contain a copy of the complete string matched.
    </simpara>
    <note>
     <simpara>
      Up to (and including) PHP 4.1.0 <varname>$regs</varname> will be
      filled with exactly ten elements, even though more or fewer than
      ten parenthesized substrings may actually have matched. This has
      no effect on <function>ereg</function>'s ability to match more
      substrings. If no matches are found, <literal>$regs</literal>
      will not be altered by <function>ereg</function>. 
     </simpara>
    </note>    
    <simpara>
     Returns the length of the matched string if a match for <parameter>pattern</parameter> was
     found in <parameter>string</parameter>, or &false; if no matches
     were found or an error occurred.
    </simpara>
    <para>
     The following code snippet takes a date in ISO format
     (YYYY-MM-DD) and prints it in DD.MM.YYYY format:
    </para>
    <para>
     <example>
      <title><function>ereg</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs)) {
    echo "$regs[3].$regs[2].$regs[1]";
} else {
    echo "Invalid date format: $date";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     See also <function>eregi</function>, <function>ereg_replace</function>,
     <function>eregi_replace</function>, <function>preg_match</function>,
     <function>strpos</function>, and <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
