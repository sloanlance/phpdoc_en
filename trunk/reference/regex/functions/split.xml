<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
<!-- splitted from ./en/functions/regex.xml, last change in rev 1.7 -->
  <refentry id="function.split">
   <refnamediv>
    <refname>split</refname>
    <refpurpose>Split string into array by regular expression</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>array</type><methodname>split</methodname>
     <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>string</type><parameter>string</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
    </methodsynopsis>
    <tip>
     <para>
      <function>preg_split</function>, which uses a Perl-compatible regular
      expression syntax, is often a faster alternative to
      <function>split</function>.  If you don't require the power of regular
      expressions, it is faster to use <function>explode</function>, which
      doesn't incur the overhead of the regular expression engine.
     </para>
    </tip>
    <para>
     Returns an array of strings, each of which is a substring of
     <parameter>string</parameter> formed by splitting it on
     boundaries formed by the case-sensitive regular expression
     <parameter>pattern</parameter>.  If <parameter>limit</parameter>
     is set, the returned array will contain a maximum of
     <parameter>limit</parameter> elements with the last element
     containing the whole rest of <parameter>string</parameter>.  If
     an error occurs, <function>split</function> returns &false;.
    </para>
    <para>
     To split off the first four fields from a line from
     <filename>/etc/passwd</filename>:
    </para>
    <para>
     <example>
      <title><function>split</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
list($user, $pass, $uid, $gid, $extra) =
    split(":", $passwd_line, 5);
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     If there are <replaceable>n</replaceable> occurrences of
     <parameter>pattern</parameter>, the returned array will contain
     <literal><replaceable>n</replaceable>+1</literal> items. For example, if
     there is no occurrence of <parameter>pattern</parameter>, an array with
     only one element will be returned. Of course, this is also true if
     <parameter>string</parameter> is empty.
    </simpara>
    <para>
     To parse a date which may be delimited with slashes, dots, or
     hyphens:
    </para>
    <para>
     <example>
      <title><function>split</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
// Delimiters may be slash, dot, or hyphen
$date = "04/30/1973";
list($month, $day, $year) = split('[/.-]', $date);
echo "Month: $month; Day: $day; Year: $year<br />\n";
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     For users looking for a way to emulate Perl's <command>@chars =
     split('', $str)</command> behaviour, please see the examples for
     <function>preg_split</function>.
    </para>

    <para>
     Please note that <parameter>pattern</parameter> is a regular
     expression.  If you want to split on any of the characters which
     are considered special by regular expressions, you'll need to
     escape them first. If you think <function>split</function> (or
     any other regex function, for that matter) is doing something
     weird, please read the file <filename>regex.7</filename>,
     included in the <filename>regex/</filename> subdirectory of the
     PHP distribution. It's in manpage format, so you'll want to do
     something along the lines of <command>man
     /usr/local/src/regex/regex.7</command> in order to read it.
    </para>

    <para>
     See also: <function>preg_split</function>, <function>spliti</function>,
     <function>explode</function>, <function>implode</function>,
     <function>chunk_split</function>, and <function>wordwrap</function>.
    </para>

   </refsect1>
  </refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
