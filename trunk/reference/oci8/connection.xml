<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<chapter xml:id="oci8.connection" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Connection Handling</title>
 <para>
  The OCI8 extension provides three different functions for connecting
  to Oracle.  The information in this section is intended to help
  determine which is most appropriate for an application.
 </para>
 <para>
  Connecting to an Oracle server is a reasonably expensive operation
  in terms of the time that it takes to complete.
  The <function>oci_pconnect</function> function uses a persistent
  cache of connections that can be re-used across different script
  requests.  This means that the connection overhead will typically
  only occur once per PHP process (or Apache child).
 </para>
 <para>
  If the application connects to Oracle using a different set of
  credentials for each web user, the persistent cache employed by
  <function>oci_pconnect</function> will become less useful as the
  number of concurrent users increases, to the point where it may
  start to adversely affect the overall performance of the Oracle
  server due to maintaining too many idle connections. If the
  application is structured in this way, it is recommended to either
  tune the application using
  the <link linkend="ini.oci8.max-persistent">oci8.max_persistent</link>
  and <link linkend="ini.oci8.persistent-timeout">oci8.persistent_timeout</link>
  configuration settings (these will give control over the persistent
  connection cache size and lifetime), use Oracle 11g Database
  Resident Connection Pooling, or use
  <function>oci_connect</function> instead.
 </para>
 <para>
  Both <function>oci_connect</function>
  and <function>oci_pconnect</function> employ a connection cache; if
  multiple calls to
  <function>oci_connect</function> use the same parameters in a given
  script, the second and subsequent calls return the existing
  connection handle.  The cache used
  by <function>oci_connect</function> is cleaned up at the end of the
  script run, or when the connection handle is explicitly closed. The
  function <function>oci_pconnect</function> has similar behaviour,
  although its cache is maintained separately and survives between
  HTTP requests.
 </para>
 <para>
  This caching feature is important to remember, because it means the
  two handles are not transactionally isolated (they are in fact the
  same connection handle, so there is no isolation of any kind).  If
  the application needs two separate, transactionally isolated
  connections, then use <function>oci_new_connect</function>.
 </para>
 <para>
  The function <function>oci_new_connect</function> always creates a
  new connection to the Oracle server, regardless of what other
  connections might already exist.  High traffic web applications
  should try to avoid using
  <function>oci_new_connect</function>, especially in the busiest sections of
  the application.
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

