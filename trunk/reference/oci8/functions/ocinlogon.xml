<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- splitted from ./en/functions/oci8.xml, last change in rev 1.15 -->
  <refentry id="function.ocinlogon">
   <refnamediv>
    <refname>ocinlogon</refname>
    <refpurpose>Establishes a new connection to Oracle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>resource</type><methodname>ocinlogon</methodname>
      <methodparam><type>string</type><parameter>username</parameter></methodparam>
      <methodparam><type>string</type><parameter>password</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>db</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ocinlogon</function> creates a new connection to an
     Oracle 8 database and logs on.  The optional third parameter can
     either contain the name of the local Oracle instance or the name
     of the entry in tnsnames.ora to which you want to connect.  If
     the optional third parameter is not specified, PHP uses the
     environment variables ORACLE_SID (Oracle instance) or TWO_TASK
     (tnsnames.ora) to determine which database to connect to.
    </para>
    <para>
     <function>ocinlogon</function> forces a new connection.  This
     should be used if you need to isolate a set of transactions.  By
     default, connections are shared at the page level if using
     <function>ocilogon</function> or at the web server process level
     if using <function>ociplogon</function>.  If you have multiple
     connections open using <function>ocinlogon</function>, all
     commits and rollbacks apply to the specified connection only.
    </para>
    <para>
     This example demonstrates how the connections are separated.
     <example>
      <title><function>ocinlogon</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
echo "<html><pre>";
$db = "";

$c1 = ocilogon("scott", "tiger", $db);
$c2 = ocinlogon("scott", "tiger", $db);

function create_table($conn) {
  $stmt = ociparse($conn, "create table scott.hallo (test
varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}

function drop_table($conn) {
  $stmt = ociparse($conn, "drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}

function insert_data($conn) {
  $stmt = ociparse($conn, "insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}

function delete_data($conn) {
  $stmt = ociparse($conn, "delete from scott.hallo");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}

function commit($conn) {
  ocicommit($conn);
  echo $conn." committed\n\n";
}

function rollback($conn) {
  ocirollback($conn);
  echo $conn." rollback\n\n";
}

function select_data($conn) {
  $stmt = ociparse($conn, "select * from scott.hallo");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt)) {
    echo $conn." <".ociresult($stmt, "TEST").">\n\n";
  }
  echo $conn."----done\n\n";
}

create_table($c1);
insert_data($c1);

select_data($c1);   
select_data($c2);   

rollback($c1);      

select_data($c1);   
select_data($c2);   

insert_data($c2);   
commit($c2);        

select_data($c1);   

delete_data($c1);   
select_data($c1);   
select_data($c2);   
commit($c1);        

select_data($c1);
select_data($c2);

drop_table($c1);
echo "</pre></html>";
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     See also <function>ocilogon</function> and
     <function>ociplogon</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
