<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!--

DO NOT TRANSLATE THIS FILE.
THE FUNCTION IT DESCRIBES WAS RENAMED AND THIS NAME IS DEPRECATED.
PLEASE, TRANSLATE THE APPROPRIATE NEW FILE.

-->
<!-- splitted from ./en/functions/oci8.xml, last change in rev 1.2 -->
  <refentry id="function.ocidefinebyname">
   <refnamediv>
    <refname>ocidefinebyname</refname>
    <refpurpose>
     Use a PHP variable for the define-step during a SELECT
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>ocidefinebyname</methodname>
      <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>string</type><parameter>column_name</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>&amp;variable</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ocidefinebyname</function> binds PHP variables for fetches
     of SQL-Columns. Be careful that Oracle uses ALL-UPPERCASE column-names,
     whereby in your select you can also write lowercase.
     <function>ocidefinebyname</function> expects
     the <parameter>column_name</parameter> to be in uppercase. If you
     define a variable that doesn't exists in your select statement, no
     error will be given!
    </para>
    <para>
     If you need to define an abstract datatype (LOB/ROWID/BFILE) you
     need to allocate it first using
     <function>ocinewdescriptor</function>. See also the
     <function>ocibindbyname</function> function.
    </para>
     <example>
      <title><function>ocidefinebyname</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
/* OCIDefineByName example - thies at thieso dot net (980219) */

$conn = OCILogon("scott", "tiger");

$stmt = OCIParse($conn, "select empno, ename from emp");

/* the define MUST be done BEFORE ociexecute! */

OCIDefineByName($stmt, "EMPNO", $empno);
OCIDefineByName($stmt, "ENAME", $ename);

OCIExecute($stmt);

while (OCIFetch($stmt)) {
    echo "empno:" . $empno . "\n";
    echo "ename:" . $ename . "\n";
}

OCIFreeStatement($stmt);
OCILogoff($conn);
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      This function was renamed to <function>oci_define_by_name</function> 
      after PHP >= 5.0.0. For downward compatibility 
      <function>ocidefinebyname</function> can also be used. 
      This is deprecated, however.
     </para>
    </note>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
