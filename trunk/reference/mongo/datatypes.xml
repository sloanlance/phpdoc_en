<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<chapter xml:id="mongo.datatypes" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Data Types</title>
 <para>
  MongoDB supports the following built-in PHP types:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    &null;
   </para>
   <para>
    Fairly self-explanatory.
   </para>
  </listitem>
  <listitem>
   <para>
    <literal>boolean</literal>
   </para>
   <para>
    &true; and &false;.
   </para>
  </listitem>
  <listitem>
   <para>
    <literal>int</literal>
   </para>
   <para>
    4-byte integers.
   </para>
  </listitem>
  <listitem>
   <para>
    <literal>float</literal>
   </para>
   <para>
    8-byte doubles.
   </para>
  </listitem>
  <listitem>
   <para>
    <literal>string</literal>
   </para>
   <para>
    UTF-8 strings.
   </para>
  </listitem>
 </itemizedlist>

 <para>
  Arrays and objects can also be saved to the database.  An array with ascending
  numeric keys will be saved as a an array, anything else will be saved as an
  object.
 </para>

 <programlisting role="php">
<![CDATA[
<?php

// $scores will be saved as an array
$scores = array(98, 100, 73, 85);
$collection->insert(array("scores" => $scores);

// $scores will be saved as an object
$scores = array("quiz1" => 98, "midterm" => 100, "quiz2" => 73, "final" => 85);
$collection->insert(array("scores" => $scores);

?>
]]>
 </programlisting>

 <para>
  If you query for these objects using the database shell, they will look like:
 <programlisting>
<![CDATA[
> db.students.find()
{ "_id" : ObjectId("4b06beada9ad6390dab17c43"), "scores" : [ 98, 100, 73, 85 ] }
{ "_id" : ObjectId("4b06bebea9ad6390dab17c44"), "scores" : { "quiz1" : 98, "midterm" : 100, "quiz2" : 73, "final" : 85 } }
]]>
 </programlisting>
 </para>

 <para>
  The database can also save arbitrary PHP objects (although they will be 
  returned as associative arrays).  The fields are used for the key/value
  pairs.  For example, a blog post might look like:
 <programlisting role="php">
<![CDATA[
<?php

// the blog post class
class Post {

    var $author;
    var $content;
    var $comments = array();
    var $date;

    public function __construct($author, $content) {
        $this->author = $author;
        $this->content = $content;
        $this->date = new MongoDate();
    }

    public function setTitle($title) {
        $this->title = $title;
    }

}

// create a simple blog post and insert it into the database
$post1 = new Post("Adam", "This is a blog post");

$blog->insert($post1);


// there is nothing restricting the type of the "author" field, so we can make 
// it a nested object
$author = array("name" => "Fred", "karma" => 42);
$post2 = new Post($author, "This is another blog post.");

// we create an extra field by setting the title
$post2->setTitle("Second Post");

$blog->insert($post2);

?>
]]>
 </programlisting>
 </para>

 <para>
  From the database shell, this will look something like:
 <programlisting>
<![CDATA[
> db.blog.find()
{ "_id" : ObjectId("4b06c263edb87a281e09dad8"), "author" : "Adam", "content" : "This is a blog post", "comments" : [ ], "date" : "Fri Nov 20 2009 11:22:59 GMT-0500 (EST)" }
{ "_id" : ObjectId("4b06c282edb87a281e09dad9"), "author" : { "name" : "Fred", "karma" : 42 }, "content" : "This is a blog post", "comments" : [ ], "date" : "Fri Nov 20 2009 11:23:30 GMT-0500 (EST)", "title" : "Second Post" }
]]>
 </programlisting>
 </para>

 <para>
  The Mongo PHP driver also defines a few new types to use with the database:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <classname>MongoId</classname>
   </para>
   <para>
    Unique document id.
   </para>
  </listitem>
  <listitem>
   <para>
    <classname>MongoDate</classname>
   </para>
   <para>
    Dates and times.
   </para>
  </listitem>
  <listitem>
   <para>
    <classname>MongoRegex</classname>
   </para>
   <para>
    Regular expressions.
   </para>
  </listitem>
  <listitem>
   <para>
    <classname>MongoCode</classname>
   </para>
   <para>
    JavaScript code.
   </para>
  </listitem>
  <listitem>
   <para>
    <classname>MongoBinData</classname>
   </para>
   <para>
    Binary data.
   </para>
  </listitem>
  <listitem>
   <para>
    <classname>MongoMinKey</classname>
   </para>
   <para>
    Always smaller than any other value.
   </para>
  </listitem>
  <listitem>
   <para>
    <classname>MongoMaxKey</classname>
   </para>
   <para>
    Always larger than any other value.
   </para>
  </listitem>
 </itemizedlist>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
