<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongo.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Mongo::__construct</refname>
  <refpurpose>Creates a new database connection object</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <methodname>Mongo::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>server</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>boolean</type><parameter>connect</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>boolean</type><parameter>persistent</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>boolean</type><parameter>paired</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   If no parameters are passed, this connects to "localhost:27017" and returns.
  </para>
  <para>
   If you elect not to connect immediately (<parameter>$connect</parameter> is
   &false;), you will need to call <function>connect</function>, 
   <function>persistConnect</function>, <function>pairConnect</function>, or 
   <function>pairPersistConnect</function> before doing any database operations.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$mongo = new Mongo("localhost", false);

// throws a MongoException, as $mongo has not been fully initialized yet
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

// okay
$mongo->connect();
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

?>
]]>
   </programlisting>
  </informalexample>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>server</parameter>
     </term>
     <listitem>
      <para>
       The server name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>connect</parameter>
     </term>
     <listitem>
      <para>
       If the constructor should connect to the database now.  If this is
       &false;, the constructor will return without connecting to the database.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>persistent</parameter>
     </term>
     <listitem>
      <para>
       If the connection should be persistent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>paired</parameter>
     </term>
     <listitem>
      <para>
       If the connection should be paired.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a new database connection object.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws MongoConnectionException if it tries and fails to connect to the database.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Mongo::__construct</function> paired connection example</title>
   <para>
    This example shows how to connect the driver to a replica pair of Mongo 
    servers.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// pass a comma-separated list of server names to the constructor
$m = new Mongo("www.example1.com,www.example2.com", false);
$m->pairConnect();

// if the database servers are not running on the default port (27017),
// you'll need to specify the port
$m2 = new Mongo("www.example1.com:12345,www.example.com:54321", false);
$m2->pairConnect();

// you can also do a paired connection in one line of code
$m3 = new Mongo("www.example1.com,www.example.com", true, false, true);

?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>Mongo::__construct</function> persistent connection example</title>
   <para>
    A persistent connection will last for more than one request (usually... 
    milage may vary depending on server).  It can save significant time to 
    reuse connections, as creating a connection is a time-intensive process.
   </para>
   <para>
    A persistent connection is identified by the server string and optional
    "username" and "password" strings.  These strings are arbitrary and should
    not be sensitive (i.e., a real password).  They are merely indended as 
    unique identifiers for a connection.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// creates a persistent connection
$m1 = new Mongo("localhost", true, true);

// uses the same connection as $m1
$m2 = new Mongo("localhost", false);
$m2->persistConnect();

// creates a new connection
$m3 = new Mongo("127.0.0.1", false);
$m3->persistConnect();

// creates a new connection
$m4 = new Mongo("127.0.0.1:27017", false);
$m4->persistConnect();

// creates a new connection
$m5 = new Mongo("localhost", false);
$m5->persistConnect("foo");

// uses the $m5 connection
$m6 = new Mongo("localhost", false);
$m6->persistConnect("foo");

// creates a new connection
$m7 = new Mongo("localhost", false);
$m7->persistConnect("foo", "bar");

?>
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
