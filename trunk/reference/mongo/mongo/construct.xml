<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongo.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Mongo::__construct</refname>
  <refpurpose>Creates a new database connection object</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <methodname>Mongo::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>server</parameter><initializer>"mongodb://localhost:27017"</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array("connect" => &true;)</initializer></methodparam>
  </methodsynopsis>
  <para>
   If no parameters are passed, this connects to "localhost:27017" (or whatever
   was specified in php.ini for 
   <link linkend="ini.mongo.default-host">mongo.default_host</link> and 
   <link linkend="ini.mongo.default-port">mongo.default_port</link>).
  </para>
  <para>
   As of version 1.0.2, <parameter>server</parameter> can have a special form: 
   <literal>mongodb://[username:password@]host1[:port1][,host2[:port2:],...]</literal>.
   Breaking this down, it starts with <literal>mongodb://</literal>, to indicate
   it is in this form. If <literal>username</literal> and <literal>password</literal>
   are specified, the constructor will attempt to authenticate the connection 
   with the admin database before returning.  Username and password are optional
   and must be followed by an <literal>@</literal>, if specified.  At least one 
   host must be given (port optional, always defaulting to 27017) and as many
   hosts as desired may be connected to.  Host names are comma-separated and the
   constructor will return successfully if it connected to at least one host. If
   it could not connect to any of the hosts, it will throw a 
   <classname>MongoConnectionException</classname>.
  </para>
  <para>
   If you elect not to connect immediately (you pass the option 
   <literal>array("connect" => false)</literal>), you will need to call 
   <function>Mongo::connect</function> before doing any database operations.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$mongo = new Mongo("mongodb://localhost", array("connect" => false);

// throws a MongoException, as $mongo has not been fully initialized yet
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

// okay
$mongo->connect();
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

?>
]]>
   </programlisting>
  </informalexample>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>server</parameter>
     </term>
     <listitem>
      <para>
       The server name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       An array of options for the connection.  Currently available options
       include:
       <itemizedlist>
        <listitem>
         <para>
          <literal>"connect"</literal>
         </para>
         <para>
          If the constructor should connect before returning.  Default is 
          &true;.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"persist"</literal>
         </para>
         <para>
          If the connection should be persistent.  If set, the connection will 
          be persistent.  The string representation of the value is used as an
          id for the connection, so two instances of 
          <classname>Mongo</classname> that are initialized with
          <literal>array("persist" => "foobar")</literal> will share the same
          database connection, whereas an instance initialized with 
          <literal>array("persist" => "barbaz")</literal> will use a different
          database connection.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a new database connection object.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>MongoConnectionException</classname> if it tries and fails 
   to connect to the database for all hostnames given.  It will also throw a
   <classname>MongoConnnectionException</classname> if an invalid username or
   password is given.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.2</entry>
       <entry>
        Changed constructor to take an array of options.  Pre-1.0.2, the
        constructor took the following parameters:
        <variablelist>
         <varlistentry>
          <term>
           <parameter>server</parameter>
          </term>
          <listitem>
           <para>
            The server name.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>connect</parameter>
          </term>
          <listitem>
           <para>
            Optional boolean parameter specifying if the constructor should 
            connect to the database before returning.  Defaults to &true;.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>persistent</parameter>
          </term>
          <listitem>
           <para>
            If the connection should be persistent.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>paired</parameter>
          </term>
          <listitem>
           <para>
            If the connection should be paired.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Mongo::__construct</function> paired connection example</title>
   <para>
    This example shows how to connect the driver to a replica pair of Mongo 
    servers.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// pass a comma-separated list of server names to the constructor
$m1 = new Mongo("mongodb://www.example1.com,www.example2.com");

// if the database servers are not running on the default port (27017),
// you'll need to specify the port
$m2 = new Mongo("mongodb://www.example1.com:12345,www.example.com:54321");

// you can connect to more that two, as well
$m3 = new Mongo("mongodb://localhost:27017,localhost:27018,localhost:27019");

?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>Mongo::__construct</function> persistent connection example</title>
   <para>
    A persistent connection will last for more than one request (usually... 
    milage may vary depending on server).  It can save significant time to 
    reuse connections, as creating a connection is a time-intensive process.
   </para>
   <para>
    A persistent connection is identified by the server string and and id 
    string. 
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// creates a persistent connection
$m1 = new Mongo("mongodb://localhost", array("persist" => ""));

// uses the same connection as $m1
$m2 = new Mongo("mongodb://localhost", array("persist" => ""));

// creates a new connection
$m3 = new Mongo("mongodb://127.0.0.1", array("persist" => ""));

// creates a new connection
$m4 = new Mongo("mongodb://127.0.0.1:27017", array("persist" => ""));

// creates a new connection
$m5 = new Mongo("mongodb://localhost", array("persist" => "foo"));

// uses the $m5 connection
$m6 = new Mongo("mongodb://localhost", array("persist" => "foo"));

?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>Mongo::__construct</function> authentication example</title>
   <para>
    A user must exist in the admin database before attempting to use 
    authentication.  You can create one with the Mongo shell by running:
   </para>
   <programlisting>
<![CDATA[
> use admin
switched to db admin
> db.addUser("testUser", "testPass");
{
        "_id" : ObjectId("4b21272fd9ab21611d19095c"),
        "user" : "testUser",
        "pwd" : "03b9b27e0abf1865e2f6fcbd9845dd59"
}
>
]]>
   </programlisting>
   <para>
    After creating a user with, in this case, username "testUser" and password
    "testPass", you can create an authenticated connection:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://testUser:testPass@localhost");

?>
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
