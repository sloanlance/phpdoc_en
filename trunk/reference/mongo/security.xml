<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<section xml:id="mongo.security" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Security</title>

 <section>
  <title>Request Injection Attacks</title>
  <para>
   If you are passing <literal>$_GET</literal> parameters to your queries, make 
   sure that they are cast to strings first.  Users can insert associative 
   arrays in GET requests, which could then become unwanted $-queries.
  </para>

  <para>
   A fairly innocuous example: suppose you are looking up a user's information
   with the request <emphasis>http://www.example.com?username=bob</emphasis>. 
   Your application does the query 
   <literal>$collection->find(array("username" => $_GET['username']))</literal>. 
  </para>

  <para>
   Someone could subvert this by getting 
   <emphasis>http://www.example.com?password[$ne]=foo</emphasis>, which PHP 
   will magically turn into an associative array, turning your query into
   <literal>$collection->find(array("username" => array('$ne' => "foo")))</literal>,
   which will return all users not named "foo" (all of your users, probably).
  </para>

  <para>
   This is a fairly easy attack to defend against: make sure $_GET's parameters
   are the type you expect before you send them to the database (cast them to
   strings, in this case).
  </para>

  <para>
   Thanks to <link xlink:href="&url.mongodb.injection;">Phil</link> for pointing this out.
  </para>
 </section>

</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

