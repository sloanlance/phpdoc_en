<?xml version="1.0" encoding="utf-8"?>

<!-- $Revision$ -->
<refentry xml:id="mongocollection.update" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::update</refname>
  <refpurpose>Update records based on a given criteria</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>boolean</type><methodname>MongoCollection::update</methodname>
   <methodparam><type>array</type><parameter>criteria</parameter></methodparam>
   <methodparam><type>array</type><parameter>newobj</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>criteria</parameter>
     </term>
     <listitem>
      <para>
       Description of the objects to update.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>newobj</parameter>
     </term>
     <listitem>
      <para>
       The object with which to update the matching records.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       This parameter is an associative array of the form 
       <literal>array("optionname" => &lt;boolean&gt;, ...)</literal>. Currently 
       supported options are: 
       <itemizedlist>
        <listitem>
         <para>
          <literal>"upsert"</literal>
         </para>
         <para>
          If no document matches $criteria, a new document will be created from 
          $criteria and $newobj (see upsert example below).
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"multiple"</literal>
         </para>
         <para>
          All documents matching $criteria will be updated.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns if the update was successfully sent to the database.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::update</function></title>
   <para>
    Adding an address field to a document.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->insert(array("firstname" => "Bob", "lastname" => "Jones" ));
$newdata = array('$set' => array("address" => "1 Smith Lane"));
$c->update(array("firstname" => "Bob"), $newdata);

var_dump($c->findOne(array("firstname" => "Bob")));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["firstname"]=>
  string(3) "Bob"
  ["lastname"]=>
  string(5) "Jones"
  ["address"]=>
  string(12) "1 Smith Lane"
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoCollection::update</function> upsert example</title>
   <para>
    Upserts can simplify code, as a single line can create the object if it does
    not exist yet and update it if it does.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(array("uri" => "/summer_pics"), array("page hits" => array('$inc' => 1)), array("upsert" => true));
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#9 (0) {
  }
  ["uri"]=>
  string(12) "/summer_pics"
  ["page hits"]=>
  int(1)
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoCollection::update</function> multiple example</title>
   <para>
    By default, <function>MongoCollection::update</function> will only update
    the first document matching $criteria that it finds.  Using the "multiple"
    option can override this behavior, if needed.
   </para>
   <para>
    This example adds a "gift" field to every person whose birthday is in the
    next day.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$today = array('$gt' => new MongoDate(), '$lt' => new MongoDate(strtotime("+1 day")));
$people->update("birthday" => $today), array('$set' => array('gift' => $surprise), array("multiple" => true));

?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
