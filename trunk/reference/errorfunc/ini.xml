<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.22 $ -->
<section id="errorfunc.configuration">
 &reftitle.runtime;
 &extension.runtime;
 <para>
  <table>
   <title>Errors and Logging Configuration Options</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Name</entry>
      <entry>Default</entry>
      <entry>Changeable</entry>
     </row>
    </thead>
    <tbody>
    <row>
     <entry>error_reporting</entry>
     <entry>E_ALL &amp; ~E_NOTICE</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>display_errors</entry>
     <entry>"1"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>display_startup_errors</entry>
     <entry>"0"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>log_errors</entry>
     <entry>"0"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>log_errors_max_len</entry>
     <entry>"1024"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>ignore_repeated_errors</entry>
     <entry>"0"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>ignore_repeated_source</entry>
     <entry>"0"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>report_memleaks</entry>
     <entry>"1"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>track_errors</entry>
     <entry>"0"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>html_errors</entry>
     <entry>"1"</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>docref_root</entry>
     <entry>""</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>docref_ext</entry>
     <entry>""</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>error_prepend_string</entry>
     <entry>NULL</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>error_append_string</entry>
     <entry>NULL</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>error_log</entry>
     <entry>NULL</entry>
     <entry>PHP_INI_ALL</entry>
    </row>
    <row>
     <entry>warn_plus_overloading</entry>
     <entry>NULL</entry>
     <entry>PHP_INI??</entry>
    </row>
    </tbody>
   </tgroup>
  </table>
  For further details and definition of the PHP_INI_* constants see
  <function>ini_set</function>.
 </para>

 &ini.descriptions.title;

 <para>
  <variablelist>
   <varlistentry id="ini.error-reporting">
    <term>
     <parameter>error_reporting</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Set the error reporting level. The parameter is either an integer
      representing a bit field, or named constants. The error_reporting
      levels and constants are described in
      <link linkend="errorfunc.constants">Predefined Constants</link>,
      and in &php.ini;. To set at runtime, use the
      <function>error_reporting</function> function. See also the
      <link linkend="ini.display-errors">display_errors</link> directive.
     </para>
     <para>
      In PHP 4 and PHP 5 the default value is E_ALL &amp; ~E_NOTICE. This
      setting does not show <constant>E_NOTICE</constant> level errors. You
      may want to show them during development.
     </para>
     <note>
      <para>Enabling <constant>E_NOTICE</constant> during development has
      some benefits. For debugging purposes: NOTICE messages will warn you
      about possible bugs in your code. For example, use of unassigned values
      is warned. It is extremely useful to find typos and
      to save time for debugging. NOTICE messages will warn you about bad style.
      For example, $arr[item] is better to be written as $arr['item'] since
      PHP tries to treat "item" as constant. If it is not a constant, PHP assumes
      it is a string index for the array.
      </para>
     </note>
     <note>
      <para>
       In PHP 5 a new error level <constant>E_STRICT</constant> is available.
       As <constant>E_STRICT</constant> is not included within
       <constant>E_ALL</constant> you have to explicitly enable this kind of
       error level. Enabling <constant>E_STRICT</constant> during development
       has some benefits. STRICT messages will help you to use the latest and
       greatest suggested method of coding, for example warn you about using
       deprecated functions.
      </para>
     </note>
     <para>
      In PHP 3, the default setting is
      <literal>(E_ERROR | E_WARNING | E_PARSE)</literal>,
      meaning the same thing. Note, however, that since constants are not
      supported in PHP 3's <filename>php3.ini</filename>, the error_reporting
      setting there must be numeric; hence, it is <literal>7</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.display-errors">
    <term>
     <parameter>display_errors</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      This determines whether errors should be printed to the screen
      as part of the output or if they should be hidden from the user.
     </para>
     <note>
      <para>
      This is a feature to support your development and should never be used 
      on production systems (e.g. systems connected to the internet).
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.display-startup-errors">
    <term>
     <parameter>display_startup_errors</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Even when display_errors is on, errors that occur during PHP's startup
      sequence are not displayed. It's strongly recommended to keep
      display_startup_errors off, except for debugging.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.log-errors">
    <term>
     <parameter>log_errors</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Tells whether script error messages should be logged to the
      server's error log or <link linkend="ini.error-log">error_log</link>.
      This option is thus server-specific.
     </para>
     <note>
      <para>
       You're strongly advised to use error logging in place of
       error displaying on production web sites.
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.log-errors-max-len">
    <term>
     <parameter>log_errors_max_len</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Set the maximum length of log_errors in bytes. In
      <link linkend="ini.error-log">error_log</link> information about
      the source is added. The default is 1024 and 0 allows to not apply
      any maximum length at all.
      This length is applied to logged errors, displayed errors and also to
      <link linkend="reserved.variables.phperrormsg">$php_errormsg</link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.ignore-repeated-errors">
    <term>
     <parameter>ignore_repeated_errors</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Do not log repeated messages. Repeated errors must occur in the same
      file on the same line until
      <link linkend="ini.ignore-repeated-source">ignore_repeated_source</link>
      is set true.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.ignore-repeated-source">
    <term>
     <parameter>ignore_repeated_source</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Ignore source of message when ignoring repeated messages. When this setting
      is On you will not log errors with repeated messages from different files or
      sourcelines.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.report-memleaks">
    <term>
     <parameter>report_memleaks</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      If this parameter is set to Off, then memory leaks will not be shown (on
      stdout or in the log). This has only effect in a debug compile, and if 
      <link linkend="ini.error-reporting">error_reporting</link> includes
      E_WARNING in the allowed list
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.track-errors">
    <term>
     <parameter>track_errors</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      If enabled, the last error message will always be present in the
      variable <link linkend="reserved.variables.phperrormsg">$php_errormsg</link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.html-errors">
    <term>
     <parameter>html_errors</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Turn off HTML tags in error messages. The new format for HTML errors
      produces clickable messages that direct the user to a page describing
      the error or function in causing the error. These references are
      affected by
      <link linkend="ini.docref-root">docref_root</link> and
      <link linkend="ini.docref-ext">docref_ext</link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.docref-root">
    <term>
     <parameter>docref_root</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      The new error format contains a reference to a page describing the error or 
      function causing the error. In case of manual pages you can download the 
      manual in your language and set this ini directive to the URL of your local
      copy. If your local copy of the manual can be reached by '/manual/' you can
      simply use <userinput>docref_root=/manual/</userinput>. Additional you have 
      to set docref_ext to match the fileextensions of your copy 
      <userinput>docref_ext=.html</userinput>. It is possible to use external 
      references. For example you can use 
      <userinput>docref_root=http://manual/en/</userinput> or
      <userinput>docref_root="http://landonize.it/?how=url&amp;theme=classic&amp;filter=Landon
      &amp;url=http%3A%2F%2Fwww.php.net%2F"</userinput>
     </para>
     <para>
      Most of the time you want the docref_root value to end with a slash '/'.
      But see the second example above which does not have nor need it.
     </para>
     <note>
      <para>
       This is a feature to support your development since it makes it easy to 
       lookup a function description. However it should never be used on 
       production systems (e.g. systems connected to the internet).
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.docref-ext">
    <term>
     <parameter>docref_ext</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      See <link linkend="ini.docref-root">docref_root</link>.
     </para>
     <note>
      <para>
       The value of docref_ext must begin with a dot '.'.
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.error-prepend-string">
    <term>
     <parameter>error_prepend_string</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      String to output before an error message.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.error-append-string">
    <term>
     <parameter>error_append_string</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      String to output after an error message.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.error-log">
    <term>
     <parameter>error_log</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      Name of the file where script errors should be logged. If the
      special value <literal>syslog</literal> is used, the errors
      are sent to the system logger instead. On Unix, this means
      syslog(3) and on Windows NT it means the event log. The
      system logger is not supported on Windows 95. See also:
      <function>syslog</function>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="ini.warn-plus-overloading">
    <term>
     <parameter>warn_plus_overloading</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      If enabled, this option makes PHP output a warning when the
      plus (<literal>+</literal>) operator is used on strings.
      This is to make it easier to find scripts that need to be
      rewritten to using the string concatenator instead
      (<literal>.</literal>).
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
