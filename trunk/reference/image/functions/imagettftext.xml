<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 1.20 $ -->
<refentry id="function.imagettftext">
 <refnamediv>
  <refname>imagettftext</refname>
  <refpurpose>Write text to the image using TrueType fonts</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>array</type><methodname>imagettftext</methodname>
   <methodparam><type>resource</type><parameter>image</parameter></methodparam>
   <methodparam><type>float</type><parameter>size</parameter></methodparam>
   <methodparam><type>float</type><parameter>angle</parameter></methodparam>
   <methodparam><type>int</type><parameter>x</parameter></methodparam>
   <methodparam><type>int</type><parameter>y</parameter></methodparam>
   <methodparam><type>int</type><parameter>color</parameter></methodparam>
   <methodparam><type>string</type><parameter>fontfile</parameter></methodparam>
   <methodparam><type>string</type><parameter>text</parameter></methodparam>
  </methodsynopsis>
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>image</parameter></term>
     <listitem>
      <simpara>
       The image resource. See <function>imagecreatetruecolor</function>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>size</parameter></term>
     <listitem>
      <simpara>
       The font size. Depending on your version of GD, this should be
       specified as the pixel size (GD1) or point size (GD2).
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>angle</parameter></term>
     <listitem>
      <simpara>
       The angle in degrees, with 0 degrees being left-to-right reading text.
       Higher values represent a counter-clockwise rotation. For example,
       a value of 90 would result in bottom-to-top reading text.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>x</parameter></term>
     <listitem>
      <simpara>
       The coordinates given by <parameter>x</parameter> and
       <parameter>y</parameter> will define the basepoint of the first
       character (roughly the lower-left corner of the character). This
       is different from the <function>imagestring</function>, where
       <parameter>x</parameter> and <parameter>y</parameter> define the
       upper-left corner of the first character. For example, "top left"
       is 0, 0.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>y</parameter></term>
     <listitem>
      <simpara>
       The y-ordinate. This sets the position of the fonts baseline, not
       the very bottom of the character.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>color</parameter></term>
     <listitem>
      <simpara>
       The color index. Using the negative of a color index has
       the effect of turning off antialiasing.
       See <function>imagecolorallocate</function>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fontfile</parameter></term>
     <listitem>
      <simpara>
       The path to the TrueType font you wish to use.
      </simpara>
      <simpara>
       Depending on which version of the GD library PHP is using, <emphasis>when
       <parameter>fontfile</parameter> does not begin with a leading
       <literal>/</literal> then <literal>.ttf</literal> will be appended</emphasis>
       to the filename and the library will attempt to search for that
       filename along a library-defined font path.
      </simpara>
      <simpara>
       When using versions of the GD library lower than 2.0.18, a <literal>space</literal> character,
       rather than a semicolon, was used as the 'path separator' for different font files.
       Unintentional use of this feature will result in the warning message:
       <literal>Warning: Could not find/open font</literal>. For these affected versions, the
       only solution is moving the font to a path which does not contain spaces.
      </simpara>
      <para>
       In many cases where a font resides in the same directory as the script using it
       the following trick will alleviate any include problems.
       <programlisting role="php">
<![CDATA[
<?php
// Set the enviroment variable for GD
putenv('GDFONTPATH=' . realpath('.'));

// Name the font to be used (note the lack of the .ttf extension)
$font = 'SomeFont';
?>
]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>text</parameter></term>
     <listitem>
      <simpara>
       The text string.
      </simpara>
      <simpara>
       May include decimal numeric character references (of the form:
       &amp;#8364;) to access characters in a font beyond position 127.
       The hexadecimal format (like &amp;#xA9;) is supported as of PHP 5.2.0.
       Strings in UTF-8 encoding can be passed directly.
      </simpara>
      <simpara>
       Named entities, such as &amp;copy;, are not supported. Consider using <function>html_entity_decode</function>
       to decode these named entities into UTF-8 strings (html_entity_decode() supports this as of PHP 5.0.0).
      </simpara>
      <simpara>
       If a character is used in the string which is not supported by the
       font, a hollow rectangle will replace the character.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   <function>imagettftext</function> returns an array with 8
   elements representing four points making the bounding box of the
   text. The order of the points is lower left, lower right, upper
   right, upper left. The points are relative to the text
   regardless of the angle, so "upper left" means in the top
   left-hand corner when you see the text horizontally.
  </para>
  <para>
   <example>
    <title><function>imagettftext</function> example</title>
    <para>
     This example script will produce a white PNG 400x30 pixels, with
     the words "Testing..." in black (with grey shadow), in the font Arial.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Set the content-type
header("Content-type: image/png");

// Create the image
$im = imagecreatetruecolor(400, 30);

// Create some colors
$white = imagecolorallocate($im, 255, 255, 255);
$grey = imagecolorallocate($im, 128, 128, 128);
$black = imagecolorallocate($im, 0, 0, 0);
imagefilledrectangle($im, 0, 0, 399, 29, $white);

// The text to draw
$text = 'Testing...';
// Replace path by your own font path
$font = 'arial.ttf';

// Add some shadow to the text
imagettftext($im, 20, 0, 11, 21, $grey, $font, $text);

// Add the text
imagettftext($im, 20, 0, 10, 20, $black, $font, $text);

// Using imagepng() results in clearer text compared with imagejpeg()
imagepng($im);
imagedestroy($im);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   This function requires both the GD library and the <ulink
   url="&url.freetype;">FreeType</ulink> library.
  </para>
  <para>
   See also <function>imagettfbbox</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
