<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.1 $ -->
<!-- Purpose: xml -->
<!-- Membership: pecl -->

<reference id="ref.sca">
 <title>SCA Functions</title>
 <titleabbrev>SCA</titleabbrev>
 
 <partintro>
  <section id="SCA.intro">
   &reftitle.intro;
   <para> SCA for PHP makes it possible for a PHP programmer to write
    reusable components, which can be called in a variety of ways, with an
    identical interface and with a minimum of fuss. At present
    components can call each other either locally or via Web services,
    but in the future it is expected that other ways will be possible. It
    provides the programmer with a way of doing this which will look as
    natural as possible in PHP. </para>
   
   <para> SCA components use phpDocumentor-style (see
    http://www.phpdoc.org/) annotations to declare dependencies on
    other SCA components or Web services. The SCA for PHP runtime
    resolves these dependencies at runtime on behalf of the components,
    and thus allows the PHP programmer to focus on the business logic
    rather than on locating and obtaining references to dependencies.
    </para>
   
   <para> The SCA for PHP programming model can be extended to support a
    number of service types, such as REST and Atompub, however, Web
    services (more accurately, WSDL defined, SOAP/HTTP services), are
    the only type currently specified. </para>
   
   <para> Components also use annotations to define the interface which
    they expose as a service. The SCA for PHP runtime will automatically
    generate WSDL from these annotations, so that an SCA component is
    easily exposed as a web service. These annotations are a natural
    extension to those provided by phpDocumentor. Deploying a Web
    service can be as simple as placing a PHP component under the document
    root of a web server. </para>
   
   <para> Components also use annotations to specify data structures
    (expressed using XML schema complex types) which are then handled
    using Service Data Objects (SDOs). </para>
   
   <para> A PHP script which is not an SCA component and which contains no
    annotations can use the services of an SCA component. A PHP script or
    component can make calls to a web service that is not an SCA component,
    but using the same system of annotations to obtain a reference.
    </para>
   </section>
   
   <section id="SCA.intro.glossary">
    <title>Glossary</title>
    <para>The following terms are used throughout this
     document:</para>
    <itemizedlist>
     <listitem>
      <para> Component: the name "component" is used in this document to
       refer to an implementation artifact (a PHP script containing a
       PHP class) which provides a Service to other components. This is
       consistent with the SCA use of the term "component" to describe a
       configured instance of an implementation, since the script
       contains both the implementation of the business logic,
       expressed in PHP code, and the configuration information,
       expressed through annotations. </para>
     </listitem>
     <listitem>
      <para> Service: A service is a set of one or more operations made
       available for calling by other components. These might be
       operations which can be called locally (i.e. PHP script directly
       to PHP script), or operations callable remotely via a Web
       service. </para>
     </listitem>
     <listitem>
      <para> Service Component: Used as a synonym for Component.
       </para>
     </listitem>
     <listitem>
      <para> Web service: Unless stated otherwise, the term Web service
       is used to refer to a service described by WSDL and callable via
       SOAP/HTTP. </para>
     </listitem>
    </itemizedlist>
   </section>
   
   <section id="SCA.requirements">
    &reftitle.required;
    <para> If you want to use SCA to consume or produce Web services then
     you need PHP 5.2.0 or later, built with the soap extension enabled.
     If you just want to use local components, and do not wish to use the Web
     service bindings, then this version of SCA for PHP will also run with
     PHP 5.1.6. </para>
   </section>
   
   <section id="SCA.installation">
    &reftitle.install;
    <para> See http://www.php.net/sdo#sdo.installation for
     installing the SCA_SDO package from PECL. The SCA code must be on the
     include path of your PHP installation, for example if it is
     installed as /usr/local/lib/php/SCA, the include_path
     directive must include /usr/local/lib/php </para>
   </section>
   
  
<!--  &reference.SCA.constants;-->
  
 </partintro>
 
<!-- &reference.SCA.functions;-->
 
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->