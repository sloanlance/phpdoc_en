<?xml version='1.0' encoding='iso-8859-1' ?>
<!-- $Revision: 1.3 $ -->
<!-- splitted from ./en/functions/hwapi.xml, last change in rev 1.1 -->
  <refentry id="function.hwapi-checkin">
   <refnamediv>
    <refname>hw_api->checkin</refname>
    <refpurpose>Archive un objet</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>object</type><methodname>checkin</methodname>
     <methodparam><type>array</type><parameter>parameter</parameter></methodparam>
    </methodsynopsis>
    <para>
     <methodname>hw_api->checkin</methodname> archive un objet ou 
     une hi&eacute;rarchie d'objets. Le param&egrave;tre obligatoire
     <parameter>parameter</parameter> contient un 'objectIdentifier' 
     et les &eacute;l&eacute;ments optionnels 'version', 'comment', 'mode' et
     'objectQuery'. 'version' sp&eacute;cifie la version de l'objet.
     Elle est constitu&eacute;e de version majeure et mineure, s&eacute;par&eacute;e par des
     virgules. Si une version n'existe pas, la version mineure est incr&eacute;ment&eacute;e.
     'mode' peut &ecirc;tre l'une des constantes suivantes : 
     <variablelist>
      <varlistentry>
       <term><constant>HW_API_CHECKIN_NORMAL</constant></term>
       <listitem>
        <simpara>
         Archive et valide l'objet. L'objet doit &ecirc;tre un document.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><constant>HW_API_CHECKIN_RECURSIVE</constant></term>
       <listitem>
        <simpara>
         Si l'objet &agrave; archiver est une collection, tous les fils seront
         v&eacute;rifi&eacute; r&eacute;cursivement, si ils sont des documents. Tenter d'archiver
         une collectoin g&eacute;n&eacute;rera une erreur.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><constant>HW_API_CHECKIN_FORCE_VERSION_CONTROL</constant></term>
       <listitem>
        <simpara>
         Archive un objet m&ecirc;me si il ne passe pas sous le contr&ocirc;le de
         versions.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><constant>HW_API_CHECKIN_REVERT_IF_NOT_CHANGED</constant></term>
       <listitem>
        <simpara>
         V&eacute;rifie si il existe une version diff&eacute;rente de la derni&egrave;re version.
         A moins que cela ne soit le cas, l'objet sera alors archiv&eacute;.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><constant>HW_API_CHECKIN_KEEP_TIME_MODIFIED</constant></term>
       <listitem>
        <simpara>
         Conserve la date de modification du plus r&eacute;cent objet.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><constant>HW_API_CHECKIN_NO_AUTO_COMMIT</constant></term>
       <listitem>
        <simpara>
         L'objet n'est pas automatiquement valid&eacute; lors de l'archivage.
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Voir aussi
     <function>hwapi_checkout</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
