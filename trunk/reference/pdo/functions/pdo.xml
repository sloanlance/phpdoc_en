<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision -->
<refentry id='function.pdo'>
 <refnamediv>
  <refname>PDO</refname>
  <refpurpose>Creates a PDO instance to represent a connection to a
   database.</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>object</type> <methodname>PDO</methodname>
   <methodparam><type>String</type> <parameter>DSN</parameter></methodparam>
   <methodparam choice='opt'><type>String</type> <parameter>username</parameter></methodparam>
   <methodparam choice='opt'><type>String</type> <parameter>password</parameter></methodparam>
  </methodsynopsis>
  &warn.experimental.func;
  <para>
   The format of the Data Source Name (DSN) parameter is:
   <itemizedlist>
    <listitem><para>PDO driver, followed by a colon</para></listitem>
    <listitem><para>followed by optional driver-specific
      information</para></listitem>
   </itemizedlist>
  </para>
  <para>
   To close a database connection:
   <itemizedlist>
    <listitem><para>assign a &null; value to the PDO object</para></listitem>
    <listitem><para>let the PDO object go out of scope</para></listitem>
   </itemizedlist>
  </para>
  <para> 
   Connections are automatically in autocommit mode. Invoke the
   <function>beginTransaction</function> method to turn off autocommit, and
   call <function>commit</function> or <function>rollback</function> to end
   the transaction. PDO automatically rolls back transactions that are ended
   by a closed connection handle.
  </para>
  <example><title>Create a connection</title>
   <programlisting role='php'><![CDATA[
$database = 'SAMPLE';
$user = 'db2inst1';
$password = 'ibmdb2';
try {
    $dbh = new PDO("ODBC:$database", $user, $password);
}
catch (PDOException $e) {
    echo "Could not connect to database '$database' as user '$user'.";
    echo $e->getMessage();
}
]]>
</programlisting>
</example>
 </refsect1>
</refentry>

