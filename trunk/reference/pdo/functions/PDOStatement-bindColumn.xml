<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.9 $ -->
<refentry id="function.PDOStatement-bindColumn">
 <refnamediv>
  <refname>PDOStatement::bindColumn</refname>
  <refpurpose>
   Bind a column to a PHP variable
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>PDOStatement::bindColumn</methodname>
   <methodparam><type>mixed</type><parameter>column</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">param</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>PDOStatement::bindColumn</function> arranges to have a
   particular variable bound to a given column in the result-set from a
   query.  Each call to <function>PDOStatement::fetch</function> or
   <function>PDOStatement::fetchAll</function> will update all the variables
   that are bound to columns.
  </para>
  <note>
   <para>
    Since information about the columns is not always available to PDO until
    the statement is executed, portable applications should call this
    function <emphasis>after</emphasis> <function>PDO::execute</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
      <listitem>
       <para>
        Number of the column (1-indexed) or name of the column in the result set.
        If using the column name, be aware that the name should match the
        case of the column, as returned by the driver.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>param</parameter></term>
      <listitem>
       <para>
        Name of the PHP variable to which the column will be bound.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        Data type of the parameter, specified by the PDO::PARAM_* constants.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Binding result set output to PHP variables</title>
    <para>
     Binding columns in the result set to PHP variables is an effective
     way to make the data contained in each row immediately available to
     your application. The following example demonstrates how PDO allows
     you to bind and retrieve columns with a variety of options and with
     intelligent defaults.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function readData($dbh) {
  $sql = 'SELECT name, colour, calories FROM fruit';
  try {
    $stmt = $dbh->prepare($sql);
    $stmt->execute();

    /* Bind by column number */
    $stmt->bindColumn(1, $name);
    $stmt->bindColumn(2, $colour);
    
    /* Bind by column name */
    $stmt->bindColumn('calories', $cals);

    while ($row = $stmt->fetch(PDO::FETCH_BOUND)) {
      $data = $name . "\t" . $colour . "\t" . $cals . "\n";
      print $data;
    }
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
readData($dbh);
?>
  ]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
apple   red     150
banana  yellow  175
kiwi    green   75
orange  orange  150
mango   red     200
strawberry      red     25
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
