<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.4 $ -->
<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
  <refentry id="function.PDO-prepare">
   <refnamediv>
    <refname>PDO::prepare</refname>
    <refpurpose>
     Prepares a statement for execution and returns a statement object
    </refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
    <methodsynopsis>
     <type>PDOStatement</type><methodname>PDO::prepare</methodname>
     <methodparam><type>string</type><parameter>statement</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter>driver_options</parameter></methodparam>
    </methodsynopsis>

    &warn.experimental.func;
    <para>
     Prepares an SQL statement to be executed by the
     <function>PDOStatement::execute</function> method. The SQL statement can
     contain zero or more named (:name) or question mark (?) parameter markers
     for which real values will be substituted when the statement is executed.
    </para>
    <para>
     Calling <function>PDO::prepare</function> and <function>PDOStatement::execute</function>
     for statements that will be issued multiple times with different parameter
     values optimizes the performance of your application and helps prevent SQL
     injection attacks.
    </para>
   </refsect1>
   <refsect1 role="parameters">
    &reftitle.parameters;
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>statement</parameter></term>
       <listitem>
        <para>
         This must be a valid SQL statement for the target database server.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>driver_options</parameter></term>
       <listitem>
        <para>
         This array holds one or more key=&gt;value pairs to set
         attribute values for the PDOStatement object that this method
         returns. You would most commonly use this to set the
         <literal>PDO_ATTR_CURSOR</literal> value to
         <literal>PDO_CURSOR_SCROLL</literal> to request a scrollable cursor.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>

   <refsect1 role="returnvalues">
    &reftitle.returnvalues;
    <para>
     If the database server successfully prepares the statement,
     <function>PDO::prepare</function> returns a PDOStatement object.
    </para>
   </refsect1>

   <refsect1 role="examples">
    &reftitle.examples;
    <para>
     <example><title>Prepare an SQL statement with named parameters</title>
      <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by passing an array of values */
$sql = 'SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour'
$sth = $dbh->prepare($sql, array(PDO_ATTR_CURSOR, PDO_CURSOR_FWDONLY));
$sth->execute(array(':calories' => 150, ':colour' => 'red'));
$red = $sth->fetchAll();
$sth->execute(array(':calories' => 175, ':colour' => 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Prepare an SQL statement with question mark parameters</title>
      <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by passing an array of values */
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute(array(150, 'red'));
$red = $sth->fetchAll();
$sth->execute(array(175, 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>

   <refsect1 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><function>PDO::exec</function></member>
      <member><function>PDO::query</function></member>
      <member><function>PDOStatement::execute</function></member>
     </simplelist>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
