<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.15 $ -->
<refentry id="function.PDO-prepare">
 <refnamediv>
  <refname>PDO->prepare()</refname>
  <refpurpose>
   Prepares a statement for execution and returns a statement object
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>PDO</classname></ooclass>
   <methodsynopsis>
    <type>PDOStatement</type><methodname>prepare</methodname>
    <methodparam><type>string</type><parameter>statement</parameter></methodparam>
    <methodparam choice="opt"><type>array</type><parameter>driver_options</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>

  <para>
   Prepares an SQL statement to be executed by the
   <xref linkend="function.PDOStatement-execute" /> method. The SQL statement can
   contain zero or more named (:name) or question mark (?) parameter markers
   for which real values will be substituted when the statement is executed.
   You cannot use both named and question mark parameter markers within the same
   SQL statement; pick one or the other parameter style.
  </para>
  <para>
   You must include a unique parameter marker for each value you wish to pass
   in to the statement when you call <xref linkend="function.PDOStatement-execute" />.
   You cannot use a named parameter marker of the same name twice in a prepared
   statement. You cannot bind multiple values to a single named parameter in,
   for example, the IN() clause of an SQL statement.
  </para>
  <para>
   Calling <xref linkend="function.PDO-prepare" /> and
   <xref linkend="function.PDOStatement-execute" /> for statements that will be
   issued multiple times with different parameter values optimizes the
   performance of your application by allowing the driver to negotiate
   client and/or server side caching of the query plan and meta information,
   and helps to prevent SQL injection attacks by eliminating the need to
   manually quote the parameters.
  </para>
  <para>
   PDO will emulate prepared statements/bound parameters for drivers that do
   not natively support them, and can also rewrite named or question mark
   style parameter markers to something more appropriate, if the driver
   supports one style but not the other.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       This must be a valid SQL statement for the target database server.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>driver_options</parameter></term>
     <listitem>
      <para>
       This array holds one or more key=&gt;value pairs to set
       attribute values for the PDOStatement object that this method
       returns. You would most commonly use this to set the
       <literal>PDO::ATTR_CURSOR</literal> value to
       <literal>PDO::CURSOR_SCROLL</literal> to request a scrollable cursor.
       Some drivers have driver specific options that may be set at
       prepare-time.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   If the database server successfully prepares the statement,
   <xref linkend="function.PDO-prepare" /> returns a PDOStatement object.
   If the database server cannot successfully prepare the statement,
   <xref linkend="function.PDO-prepare" /> returns &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Prepare an SQL statement with named parameters</title>
    <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by passing an array of values */
$sql = 'SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour';
$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
$sth->execute(array(':calories' => 150, ':colour' => 'red'));
$red = $sth->fetchAll();
$sth->execute(array('calories' => 175, 'colour' => 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Prepare an SQL statement with question mark parameters</title>
    <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by passing an array of values */
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute(array(150, 'red'));
$red = $sth->fetchAll();
$sth->execute(array(175, 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="function.PDO-exec" /></member>
    <member><xref linkend="function.PDO-query" /></member>
    <member><xref linkend="function.PDOStatement-execute" /></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
