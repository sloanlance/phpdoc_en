<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.1 $ -->
<refentry xml:id="function.PDOStatement-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement->execute()</refname>
  <refpurpose>
   Executes a prepared statement
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>PDOStatement</classname></ooclass>
   <methodsynopsis>
    <type>bool</type><methodname>execute</methodname>
    <methodparam choice="opt"><type>array</type><parameter>input_parameters</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   Execute the prepared statement. If the prepared statement included
   parameter markers, you must either:
   <itemizedlist>
    <listitem><para>call <xref linkend="function.PDOStatement-bindParam" /> to bind PHP variables
    to the parameter markers: bound variables pass their value as input and receive the
    output value, if any, of their associated parameter markers</para></listitem>
    <listitem><para>or pass an array of input-only parameter values</para></listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>input_parameters</parameter></term>
     <listitem>
      <para>
       An array of values with as many elements as there are bound
       parameters in the SQL statement being executed.
      </para>
      <para>
       You cannot bind multiple values to a single parameter; for example,
       you cannot bind two values to a single named parameter in an IN()
       clause.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example><title>Execute a prepared statement with bound variables</title>
   <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by binding PHP variables */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO::PARAM_INT);
$sth->bindParam(':colour', $colour, PDO::PARAM_STR, 12);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

  <example><title>Execute a prepared statement with an array of insert values (named parameters)</title>
   <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by passing an array of insert values */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->execute(array(':calories' => $calories, ':colour' => $colour));
?>
]]>
   </programlisting>
  </example>

  <example><title>Execute a prepared statement with an array of insert values (placeholders)</title>
   <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by passing an array of insert values */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute(array($calories, $colour));
?>
]]>
   </programlisting>
  </example>


  <example><title>Execute a prepared statement with question mark placeholders</title>
   <programlisting role='php'>
<![CDATA[
<?php
/* Execute a prepared statement by binding PHP variables */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $colour, PDO::PARAM_STR, 12);
$sth->execute();
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="function.PDO-prepare" /></member>
    <member><xref linkend="function.PDOStatement-bindParam" /></member>
    <member><xref linkend="function.PDOStatement-fetch" /></member>
    <member><xref linkend="function.PDOStatement-fetchAll" /></member>
    <member><xref linkend="function.PDOStatement-fetchColumn" /></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
