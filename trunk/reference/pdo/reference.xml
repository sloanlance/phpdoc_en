<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.2 $ -->
<reference id='ref.pdo'>
 <title>PHP Data Objects</title>
 <titleabbrev>PDO</titleabbrev>
 <partintro>
  <section id='pdo.intro'>
   &reftitle.intro;
   <para>
   &warn.experimental;
    The PDO extension defines a lightweight, consistent interface
    for accessing databases in PHP. Each database driver that
    implements the PDO interface can expose database-specific
    features as regular extension functions.
   </para>
  </section>
  <!--
  &reference.pdo.configure;
  &reference.pdo.ini;
  -->
  <section id='pdo.classes'>
   &reftitle.classes;
   <section id='pdo.class.pdo'>
    <title><classname>PDO</classname></title>
    <para>
     Represents a connection between PHP and a database server.
    </para>
    <section id='pdo.class.pdo.constructor'>
     &reftitle.constructor;
     <itemizedlist>
      <listitem>
       <para><link linkend='function.pdo'>PDO</link> - constructs a new PDO
        object</para>
      </listitem>
     </itemizedlist>
    </section>
    <section id='pdo.class.pdo.methods'>
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para><link linkend='function.pdo-beginTransaction'>beginTransaction
       </link> - begins a transaction</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-commit'>commit</link> - commits a
        transaction</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-errorInfo'>errorInfo</link> -
        retrieves an array of error information, if any, from the
        database</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-getMessage'>getMessage</link> -
        retrieves an error message, if any, from the database</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-prepare'>prepare</link> - prepares
        an SQL statement for execution</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-rollback'>rollback</link> - roll
        back a transaction</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-setAttribute'>setAttribute</link> -
        sets a database connection attribute</para>
      </listitem>
     </itemizedlist>
    </section>
   </section>
   <section id='pdo.class.Statement'>
    <title><classname>Statement</classname></title>
    <para>Represents a prepared statement and, after the statement is
     executed, an associated result set.</para>
    <section id='pdo.class.Statement.methods'>
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para><link linkend='function.pdo-bindParam'>bindParam</link> - binds a
        PHP variable to a parameter in the prepared statement</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-execute'>execute</link> - executes a
        prepared statement</para>
      </listitem>
      <listitem>
       <para><link linkend='function.pdo-fetch'>fetch</link> - fetches a
        row from a result set</para>
      </listitem>
     </itemizedlist>
    </section>
   </section>
  </section>
 </partintro>
 &reference.pdo.functions;
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
