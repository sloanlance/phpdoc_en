<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<refentry xml:id="function.PDO-exec" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO->exec()</refname>
  <refpurpose>
   Execute an SQL statement and return the number of affected rows
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>PDO</classname></ooclass>
   <methodsynopsis>
    <type>int</type><methodname>exec</methodname>
    <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>

  <para>
   <xref linkend="function.PDO-exec" /> executes an SQL statement in
   a single function call, returning the number of rows affected by the
   statement.
  </para>
  <para>
   <xref linkend="function.PDO-exec" /> does not return results from a SELECT
   statement. For a SELECT statement that you only need to issue once
   during your program, consider issuing <xref linkend="function.PDO-query" />.
   For a statement that you need to issue multiple times, prepare 
   a PDOStatement object with <xref linkend="function.PDO-prepare" /> and issue
   the statement with <xref linkend="function.PDOStatement-execute" />.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
      <listitem>
       <para>
        The SQL statement to prepare and execute.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <xref linkend="function.PDO-exec" /> returns the number of rows that were modified
   or deleted by the SQL statement you issued. If no rows were affected, 
   <xref linkend="function.PDO-exec" /> returns <literal>0</literal>. 
  </para>

  &return.falseproblem;
  <para>
   The following example incorrectly relies on the return value of
   <xref linkend="function.PDO-exec" />, wherein a statement that affected 0 rows
   results in a call to <function>die</function>:
   <programlisting role="php">
<![CDATA[
<?php
$db->exec() or die($db->errorInfo());
?>
]]>
   </programlisting>
  </para>

 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Issuing a DELETE statement</title>
    <para>
     Count the number of rows deleted by a DELETE statement with no WHERE
     clause.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');

/* Delete all rows from the FRUIT table */
$count = $dbh->exec("DELETE FROM fruit WHERE colour = 'red'");

/* Return number of rows that were deleted */
print("Deleted $count rows.\n");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Deleted 1 rows.
]]>
    </screen>
   </example>
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="function.PDO-prepare" /></member>
    <member><xref linkend="function.PDO-query" /></member>
    <member><xref linkend="function.PDOStatement-execute" /></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
