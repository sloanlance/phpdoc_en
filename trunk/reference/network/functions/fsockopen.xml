<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- splitted from ./en/functions/network.xml, last change in rev 1.2 -->
  <refentry id="function.fsockopen">
   <refnamediv>
    <refname>fsockopen</refname>
    <refpurpose>
     Open Internet or Unix domain socket connection
    </refpurpose> 
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>resource</type><methodname>fsockopen</methodname>
      <methodparam><type>string</type><parameter>target</parameter></methodparam>
      <methodparam><type>int</type><parameter>port</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>errno</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>errstr</parameter></methodparam>
      <methodparam choice="opt"><type>float</type><parameter>timeout</parameter></methodparam>
     </methodsynopsis>
    <para>
     Initiates a socket connection to the resource specified by
     <parameter>target</parameter>.  <literal>PHP</literal> supports
     targets in the Internet and Unix domains as described in
     <xref linkend="transports"/>.  A list of supported transports
     can also be retrieved using <function>stream_get_transports</function>.
    </para>
    <note>
     <simpara>
      If you need to set a timeout for reading/writing data over the socket,
      use <function>stream_set_timeout</function>, as the <parameter>timeout</parameter>
      parameter to <function>fsockopen</function> only applies while
      connecting the socket.
     </simpara>
    </note>
    <para>
     As of PHP 4.3.0, if you have compiled in OpenSSL support, you may
     prefix the <parameter>hostname</parameter> with either
     '<literal>ssl://</literal>' or '<literal>tls://</literal>' to
     use an SSL or TLS client connection over TCP/IP to connect
     to the remote host.
    </para>
    <para>
     <function>fsockopen</function> returns a file pointer which may
     be used together with the other file functions (such as
     <function>fgets</function>, <function>fgetss</function>,
     <function>fputs</function>, <function>fclose</function>, and
     <function>feof</function>).
    </para>
    <para>
     If the call fails, it will return &false; and if the optional
     <parameter>errno</parameter> and <parameter>errstr</parameter>
     arguments are present they will be set to indicate the actual
     system level error that occurred in the system-level
     <literal>connect()</literal> call. If the value returned in
     <parameter>errno</parameter> is <literal>0</literal> and the
     function returned &false;, it is an indication that the error
     occurred before the <literal>connect()</literal> call. This is
     most likely due to a problem initializing the socket. Note that
     the <parameter>errno</parameter> and
     <parameter>errstr</parameter> arguments will always be passed by
     reference.
    </para>
    <para>
     Depending on the environment, the Unix domain or the optional
     connect timeout may not be available.
    </para>
    <para>
     The socket will by default be opened in blocking mode.  You can
     switch it to non-blocking mode by using
     <function>stream_set_blocking</function>.
     <example>
      <title><function>fsockopen</function> Example</title>
      <programlisting role="php">
<![CDATA[
<?php
$fp = fsockopen("www.example.com", 80, $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    $out = "GET / HTTP/1.1\r\n";
    $out .= "Host: www.example.com\r\n";
    $out .= "Connection: Close\r\n\r\n";

    fputs($fp, $out);
    while (!feof($fp)) {
        echo fgets($fp, 128);
    }
    fclose($fp);
}
?>
]]>
      </programlisting>
     </example>
     The example below shows how to retrieve the day and time
     from the UDP service "daytime" (port 13) in your own machine.
     <example>
     <title>Using UDP connection</title>
     <programlisting role="php">
<![CDATA[
<?php
$fp = fsockopen("udp://127.0.0.1", 13, $errno, $errstr);
if (!$fp) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($fp, "\n");
    echo fread($fp, 26);
    fclose($fp);
}
?>
]]>
     </programlisting>
     </example>
     <warning>
      <simpara>
        UDP sockets will sometimes appear to have opened without an error,
        even if the remote host is unreachable.  The error will only
        become apparent when you read or write data to/from the socket.
        The reason for this is because UDP is a "connectionless" protocol,
        which means that the operating system does not try to establish
        a link for the socket until it actually needs to send or receive data.
      </simpara>
     </warning>
     &ipv6.brackets;
     <note>
      <para>The timeout parameter was introduced in PHP 3.0.9 and
      UDP support was added in PHP 4.
      </para>
     </note>
     See also <function>pfsockopen</function>, 
     <function>stream_set_blocking</function>,
     <function>stream_set_timeout</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>fputs</function>,
     <function>fclose</function>, <function>feof</function>, and
     the <link linkend="ref.curl">Curl extension</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
