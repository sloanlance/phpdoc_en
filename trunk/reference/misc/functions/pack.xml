<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./en/functions/misc.xml, last change in rev 1.4 -->
  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>Pack data into binary string.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>string</type><methodname>pack</methodname>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <para>
     Pack given arguments into binary string according to
     <parameter>format</parameter>. Returns binary string containing
     data.
    </para>
    <para>
     The idea to this function was taken from Perl and all formatting
     codes work the same as there, however, there are some formatting
     codes that are missing such as Perl's "u" format code. The format
     string consists of format codes followed by an optional repeater
     argument. The repeater argument can be either an integer value or
     * for repeating to the end of the input data. For a, A, h, H the
     repeat count specifies how many characters of one data argument
     are taken, for @ it is the absolute position where to put the
     next data, for everything else the repeat count specifies how
     many data arguments are consumed and packed into the resulting
     binary string. Currently implemented are
     <itemizedlist>
      <listitem>
       <simpara>
    a NUL-padded string
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    A SPACE-padded string
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    h Hex string, low nibble first
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    H Hex string, high nibble first
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    c signed char
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    C unsigned char
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    s signed short (always 16 bit, machine byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    S unsigned short (always 16 bit, machine byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    n unsigned short (always 16 bit, big endian byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    v unsigned short (always 16 bit, little endian byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    i signed integer (machine dependent size and byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    I unsigned integer (machine dependent size and byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    l signed long (always 32 bit, machine byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    L unsigned long (always 32 bit, machine byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    N unsigned long (always 32 bit, big endian byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    V unsigned long (always 32 bit, little endian byte order)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    f float (machine dependent size and representation)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    d double (machine dependent size and representation)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    x NUL byte
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    X Back up one byte
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    @ NUL-fill to absolute position
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title><function>pack</function> format string</title>
      <programlisting role="php">
<![CDATA[
$binarydata = pack ("nvc*", 0x1234, 0x5678, 65, 66);
]]>
      </programlisting>
      <para>
       The resulting binary string will be 6 bytes long and contain
       the byte sequence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
      </para>
     </example>
    </para>
    <para>
     Note that the distinction between signed and unsigned values only 
     affects the function <function>unpack</function>, where as
     function <function>pack</function> gives the same result for
     signed and unsigned format codes.
    </para>
    <para>
     Also note that PHP internally stores <type>integer</type> values as
     signed values of a machine dependent size. If you give it an unsigned
     integer value too large to be stored that way it is converted to a
     <type>float</type> which often yields an undesired result.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
