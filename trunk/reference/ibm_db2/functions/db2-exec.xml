<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry id="function.db2-exec">
 <refnamediv>
  <refname>db2_exec</refname>
  <refpurpose>
   Executes an SQL statement directly
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>db2_exec</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>

  &warn.experimental.func;

  <para>
   Prepares and executes an SQL statement.
  </para>
  <para>
   If you plan to interpolate PHP variables into the SQL statement, understand
   that this is one of the more common security exposures. Consider calling
   <function>db2_prepare</function> to prepare an SQL statement with parameter
   markers for input values. Then you can call <function>db2_execute</function>
   to pass in the input values and avoid SQL injection attacks.
  </para>
  <para>
   If you plan to repeatedly issue the same SQL statement with different
   parameters, consider calling <function>db2_prepare</function> and
   <function>db2_execute</function> to enable the database server to reuse its
   access plan and increase the efficiency of your database access.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       A valid database connection resource variable as returned from
       <function>db2_connect</function> or <function>db2_pconnect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       An SQL statement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       An associative array containing statement options. You can use this
       parameter to request a scrollable cursor on database servers that
       support this functionality.
       <variablelist>
        <varlistentry>
         <term><parameter>cursor</parameter></term>
         <listitem>
          <para>
           Passing the <literal>DB2_FORWARD_ONLY</literal> value requests a
           forward-only cursor for this SQL statement. This is the default
           type of cursor, and it is supported by all database servers. It is
           also much faster than a scrollable cursor.
          </para>
          <para>
           Passing the <literal>DB2_SCROLLABLE</literal> value requests a
           scrollable cursor for this SQL statement. This type of cursor
           enables you to fetch rows non-sequentially from the database
           server. However, it is only supported by DB2 servers, and is much
           slower than forward-only cursors.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a statement resource if the SQL statement was issued successfully,
   or &false; if the database failed to execute the SQL statement.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Creating a table with <function>db2_exec</function></title>
    <para>
     The following example uses <function>db2_exec</function> to issue a set
     of DDL statements in the process of creating a table.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);

// Create the test table
$create = 'CREATE TABLE animals (id INTEGER, breed VARCHAR(32),
    name CHAR(16), weight DECIMAL(7,2))';
$result = db2_exec($conn, $create);
if ($result) {
    print "Successfully created the table.\n";
}

// Populate the test table
$animals = array(
    array(0, 'cat', 'Pook', 3.2),
    array(1, 'dog', 'Peaches', 12.3),
    array(2, 'horse', 'Smarty', 350.0),
    array(3, 'gold fish', 'Bubbles', 0.1),
    array(4, 'budgerigar', 'Gizmo', 0.2),
    array(5, 'goat', 'Rickety Ride', 9.7),
    array(6, 'llama', 'Sweater', 150)
);

foreach ($animals as $animal) {
    $rc = db2_exec($conn, "INSERT INTO animals (id, breed, name, weight)
      VALUES ('{$animal[0]}', '{$animal[1]}', '{$animal[2]}', {$animal[3]})");
    if ($rc) {
        print "Insert... ";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Successfully created the table.
Insert... Insert... Insert... Insert... Insert... Insert... Insert... 
]]>
    </screen>
   </example>

   <example>
    <title>Executing a SELECT statement with a scrollable cursor</title>
    <para>
     The following example demonstrates how to request a scrollable cursor for
     an SQL statement issued by <function>db2_exec</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);
$sql = "SELECT name FROM animals
    WHERE weight < 10.0
    ORDER BY name";
if ($conn) {
    require_once('prepare.inc');
    $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));
    while ($row = db2_fetch_into($stmt)) {
        print "$row[0]\n";
    }
} 
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Bubbles
Gizmo
Pook
Rickety Ride
]]>
    </screen>
   </example>
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_setoption</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
