<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- splitted from ./en/functions/info.xml, last change in rev 1.2 -->
  <refentry id="function.version-compare">
   <refnamediv>
    <refname>version_compare</refname>
    <refpurpose>
     Compares two "PHP-standardized" version number strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>version_compare</methodname>
      <methodparam><type>string</type><parameter>version1</parameter></methodparam>
      <methodparam><type>string</type><parameter>version2</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>
        operator
       </parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>version_compare</function> compares two
     "PHP-standardized" version number strings. This is useful if you
     would like to write programs working only on some versions of
     PHP.
    </para>
    <para>
     <function>version_compare</function> returns -1 if the first
     version is lower than the second, 0 if they are equal, and +1 if
     the second is lower.
    </para>
    <para>
     The function first replaces <literal>_</literal>, <literal>-</literal>
     and <literal>+</literal> with a dot <literal>.</literal> in the version 
     strings and also inserts dots <literal>.</literal> before and after any 
     non number so that for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it 
     splits the results like if you were using explode('.', $ver). Then it 
     compares the parts starting from left to right. If a part contains 
     special version strings these are handled in the following order: 
     <literal>dev</literal> &lt; <literal>alpha</literal> = 
     <literal>a</literal> &lt; <literal>beta</literal> = 
     <literal>b</literal> &lt; <literal>RC</literal> &lt; 
     <literal>pl</literal>. This way not only versions with different levels
     like '4.1' and '4.1.2' can be compared but also any PHP specific version
     containing development state.
    </para>
    <para>
     If you specify the third optional <parameter>operator</parameter>
     argument, you can test for a particular relationship. The
     possible operators are: <literal>&lt;</literal>,
     <literal>lt</literal>, <literal>&lt;=</literal>,
     <literal>le</literal>, <literal>&gt;</literal>,
     <literal>gt</literal>, <literal>&gt;=</literal>,
     <literal>ge</literal>, <literal>==</literal>,
     <literal>=</literal>, <literal>eq</literal>,
     <literal>!=</literal>, <literal>&lt;&gt;</literal>,
     <literal>ne</literal> respectively. Using this argument, the
     function will return &true; if the relationship is the one specified
     by the operator, &false; otherwise.
    </para>
    <note>
     <para>
      <constant>PHP_VERSION</constant> constant holds current PHP version.
     </para>
    </note>
    <para>
     <example>
      <title><function>version_compare</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
// prints -1
echo version_compare("4.0.4", "4.0.6");

// these all print 1
echo version_compare("4.0.4", "4.0.6", "<");
echo version_compare("4.0.6", "4.0.6", "eq");
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
