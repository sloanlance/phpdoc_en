<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- splitted from ./en/functions/info.xml, last change in rev 1.64 -->
  <refentry id="function.ini-get">
   <refnamediv>
    <refname>ini_get</refname>
    <refpurpose>Gets the value of a configuration option</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>string</type><methodname>ini_get</methodname>
      <methodparam><type>string</type><parameter>varname</parameter></methodparam>
     </methodsynopsis>
    <para>
     Returns the value of the configuration option on success.  Failure, such
     as querying for a non-existent value, will return an empty string.
    </para>
    <note>
     <title>When querying boolean values</title>
     <para>
      A boolean ini value of <literal>off</literal> will be returned as an
      empty string or "0" while a boolean ini value of <literal>on</literal> will
      be returned as "1".
     </para>
    </note>
    <note>
     <title>When querying memory size values</title>
     <para>
      Many ini memory size values, such as 
      <link linkend="ini.upload-max-filesize">upload_max_filesize</link>, are 
      stored in the &php.ini; file in shorthand notation.  
      <function>ini_get</function> will return the exact string stored in the 
      &php.ini; file and <emphasis>NOT</emphasis> its <type>integer</type> 
      equivalent.  Attempting normal arithmetic functions on these values
      will not have otherwise expected results.  The example below shows one
      way to convert shorthand notation into bytes, much like how the PHP
      source does it.
     </para>
    </note>
    <para>
     <example>
      <title>A few <function>ini_get</function> examples</title>
      <programlisting role="php">
<![CDATA[
<?php
/*
Our php.ini contains the following settings:

display_errors = On
register_globals = Off
post_max_size = 8M
*/

echo 'display_errors = ' . ini_get('display_errors') . "\n";
echo 'register_globals = ' . ini_get('register_globals') . "\n";
echo 'post_max_size = ' . ini_get('post_max_size') . "\n";
echo 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . "\n"; 
echo 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));

function return_bytes($val) {
    $val = trim($val);
    $last = strtolower($val{strlen($val)-1});
    switch($last) {
        case 'k':
            return (int) $val * 1024;
            break;
        case 'm':
            return (int) $val * 1048576;
            break;
        // The 'G' modifier is available since PHP 5.1.0
        case 'g':
            return (int) $val * 1073741824;
            break;
        default:
            return $val;
    }
}

?>
]]>
       </programlisting>
       <para>
        This script will produce:
       </para>
       <screen>
<![CDATA[

display_errors = 1
register_globals = 0
post_max_size = 8M
post_max_size+1 = 9
post_max_size in bytes = 8388608

]]>
       </screen>
      </example>
     </para>
    <para>
     See also 
     <function>get_cfg_var</function>,
     <function>ini_get_all</function>,
     <function>ini_restore</function>, and
     <function>ini_set</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
