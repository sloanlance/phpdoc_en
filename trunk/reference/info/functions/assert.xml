<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- splitted from ./en/functions/info.xml, last change in rev 1.51 -->
  <refentry id="function.assert">
   <refnamediv>
    <refname>assert</refname>
    <refpurpose>Checks if assertion is &false;</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>assert</methodname>
      <methodparam><type>string|bool</type><parameter>assertion</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>assert</function> will check the given
     <parameter>assertion</parameter> and take appropriate action if
     its result is &false;.
    </para>
    <para>
     If the <parameter>assertion</parameter> is given as a string it
     will be evaluated as PHP code by <function>assert</function>.
     The advantages of a string <parameter>assertion</parameter> are
     less overhead when assertion checking is off and messages
     containing the <parameter>assertion</parameter> expression when
     an assertion fails. This means that if you pass a boolean condition
     as <parameter>assertion</parameter> this condition will not show up as
     parameter to the assertion function which you may have defined with the
     <function>assert_options</function> function, the condition is converted
     to a string before calling that handler function, and the boolean &false;
     is converted as the empty string.
    </para>
    <para>
     Assertions should be used as a debugging feature only. You may
     use them for sanity-checks that test for conditions that should
     always be &true; and that indicate some programming errors if not
     or to check for the presence of certain features like extension
     functions or certain system limits and features.
    </para>
    <para>
     Assertions should not be used for normal runtime operations like
     input parameter checks. As a rule of thumb your code should
     always be able to work correctly if assertion checking is not
     activated.
    </para>
    <para>
     The behavior of <function>assert</function> may be configured by
     <function>assert_options</function> or by .ini-settings described
     in that functions manual page.
    </para>
    <para>
     The <function>assert_options</function> function and/or
     ASSERT_CALLBACK configuration directive allow a callback function
     to be set to handle failed assertions.
    </para>
    <para>
     <function>assert</function> callbacks are particularly useful for
     building automated test suites because they allow you to easily
     capture the code passed to the assertion, along with information
     on where the assertion was made. While this information can be
     captured via other methods, using assertions makes it much faster
     and easier!
    </para>
    <para>
     The callback function should accept three arguments. The first
     argument will contain the file the assertion failed in. The
     second argument will contain the line the assertion failed on and
     the third argument will contain the expression that failed (if
     any - literal values such as 1 or "two" will not be passed via
     this argument)
    </para>
    <para>
     <example>
      <title>Handle a failed assertion with a custom handler</title>
      <programlisting role="php">
<![CDATA[
<?php
// Active assert and make it quiet
assert_options (ASSERT_ACTIVE, 1);
assert_options (ASSERT_WARNING, 0);
assert_options (ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler ($file, $line, $code) {
    echo "<hr>Assertion Failed:
        File '$file'<br>
        Line '$line'<br>
        Code '$code'<br><hr>";
}

// Set up the callback
assert_options (ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert ('mysql_query ("")');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
