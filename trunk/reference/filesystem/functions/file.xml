<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.21 $ -->
<!-- splitted from ./en/functions/filesystem.xml, last change in rev 1.2 -->
<refentry id="function.file">
 <refnamediv>
  <refname>file</refname>
  <refpurpose>Reads entire file into an array</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>array</type><methodname>file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Similiar to <function>file_get_contents</function>, except that
   <function>file</function> returns the file in an array. Each
   element of the array corresponds to a line in the file, with the
   newline still attached.  Upon failure, <function>file</function>
   returns &false;.
  </para>
  <para>
   The optional parameter <parameter>flags</parameter> can be one, or more, of
   the following constants:
   <variablelist>
    <varlistentry>
     <term>
      <constant>FILE_USE_INCLUDE_PATH</constant>
     </term>
     <listitem>
      <simpara>
       Search for the file in the <link linkend="ini.include-path">include_path</link>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>FILE_IGNORE_NEW_LINES</constant>
     </term>
     <listitem>
      <simpara>
       Do not add newline at the end of each array element
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>FILE_SKIP_EMPTY_LINES</constant>
     </term>
     <listitem>
      <simpara>
       Skip empty lines
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <note>
   <para>
    Prior to PHP 5.0.0 the <parameter>flags</parameter> parameter only
    covered <link linkend="ini.include-path">include_path</link> and was
    enabled with 1.
   </para>
  </note>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
// Get a file into an array.  In this example we'll go through HTTP to get
// the HTML source of a URL.
$lines = file('http://www.example.com/');

// Loop through our array, show HTML source as HTML source; and line numbers too.
foreach ($lines as $line_num => $line) {
    echo "Line #<b>{$line_num}</b> : " . htmlspecialchars($line) . "<br />\n";
}

// Another example, let's get a web page into a string.  See also file_get_contents().
$html = implode('', file('http://www.example.com/'));
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &tip.fopen-wrapper;
  <note>
   <para>
    Each line in the resulting array will include the line ending, unless FILE_IGNORE_NEW_LINES is used, so you
    still need to use <function>rtrim</function> if you do not want the line
    ending present.
   </para>
  </note>
  &note.line-endings;
  <note>
   <para>
    As of PHP 4.3.0 you can use <function>file_get_contents</function> to
    return the contents of a file as a string.
   </para>
   <para>
    In PHP 4.3.0 <function>file</function> became binary safe.
   </para>
  </note>
  &note.context-support;
  &warn.ssl-non-standard;
  <para>
   See also <function>readfile</function>,
   <function>fopen</function>, <function>fsockopen</function>,
   <function>popen</function>, <function>file_get_contents</function>,
   <function>include</function>, and
   <function>stream_context_create</function>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
