<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.flock">
 <refnamediv>
  <refname>flock</refname>
  <refpurpose>Portable advisory file locking</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>flock</methodname>
   <methodparam><type>resource</type><parameter>handle</parameter></methodparam>
   <methodparam><type>int</type><parameter>operation</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">wouldblock</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>flock</function> allows you to perform a simple reader/writer
   model which can be used on virtually every platform (including most Unix
   derivatives and even Windows).
  </para>
  <para>
   The lock is released also by <function>fclose</function> (which is also
   called automatically when script finished).
  </para>
  <para>
   PHP supports a portable way of locking complete files in an advisory way
   (which means all accessing programs have to use the same way of locking or
   it will not work).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>handle</parameter></term>
     <listitem>
      <para>
       An open file pointer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operation</parameter></term>
     <listitem>
      <para>
       <parameter>operation</parameter> is one of the following:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>LOCK_SH</constant> to acquire a shared lock (reader).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_EX</constant> to acquire an exclusive lock (writer).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_UN</constant> to release a lock (shared or exclusive).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>LOCK_NB</constant> if you don't want
          <function>flock</function> to block while locking.
          (not supported on Windows)
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>wouldblock</parameter></term>
     <listitem>
      <para>
       The optional third argument is set to &true; if the lock would block
       (EWOULDBLOCK errno condition).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.1</entry>
       <entry>
        The <literal>LOCK_XXX</literal> constants were added. Prior to that
        you must use 1 for <constant>LOCK_SH</constant>, 2 for
        <constant>LOCK_EX</constant>, 3 for <constant>LOCK_UN</constant> and
        4 for <constant>LOCK_NB</constant>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>flock</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php

$fp = fopen("/tmp/lock.txt", "w");

if (flock($fp, LOCK_EX)) { // do an exclusive lock
    ftruncate($fp, 0);  // truncate file
    fwrite($fp, "Write something here\n");
    flock($fp, LOCK_UN); // release the lock
} else {
    echo "Couldn't get the lock!";
}

fclose($fp);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>flock</function> locks mandatory under Windows.
   </para>
  </note>
  <note>
   <para>
    Because <function>flock</function> requires a file pointer, you may have
    to use a special lock file to protect access to a file that you intend
    to truncate by opening it in write mode (with a "w" or "w+" argument to
    <function>fopen</function>).
   </para>
  </note>
  <warning>
   <para>
    <function>flock</function> will not work on NFS and many other networked
    file systems. Check your operating system documentation for more
    details.
   </para>
   <para>
    On some operating systems <function>flock</function> is implemented at
    the process level. When using a multithreaded server API like ISAPI you
    may not be able to rely on <function>flock</function> to protect files
    against other PHP scripts running in parallel threads of the same server
    instance!
   </para>
   <para>
    <function>flock</function> is not supported on antiquated filesystems like
    <literal>FAT</literal> and its derivates and will therefore always
    return &false; under this environments (this is especially true for
    Windows 98 users).
   </para>
  </warning>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
