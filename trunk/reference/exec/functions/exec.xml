<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16 $ -->
<!-- splitted from ./en/functions/exec.xml, last change in rev 1.2 -->
<refentry id="function.exec">
 <refnamediv>
  <refname>exec</refname>
  <refpurpose>Execute an external program</refpurpose>
 </refnamediv>
 <refsect1>
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>exec</methodname>
   <methodparam><type>string</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">output</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">return_var</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>exec</function> executes the given
   <parameter>command</parameter>, however it does not output
   anything.  It simply returns the last line from the result of the
   command.  If you need to execute a command and have all the data
   from the command passed directly back without any interference,
   use the <function>passthru</function> function.
  </para>
  <para>
   If the <parameter>output</parameter> argument is present, then the
   specified array will be filled with every line of output from the
   command.  Line endings, such as <literal>\n</literal>, are not
   included in this array.  Note that if the array already contains some
   elements, <function>exec</function> will append to the end of the array.
   If you do not want the function to append elements, call
   <function>unset</function> on the array before passing it to
   <function>exec</function>.
  </para>
  <para>
   If the <parameter>return_var</parameter> argument is present
   along with the <parameter>output</parameter> argument, then the
   return status of the executed command will be written to this
   variable.
  </para>
  <para>
   <example>
    <title>An <function>exec</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// outputs the username that owns the running php/httpd process
// (on a system with the "whoami" executable in the path)
echo exec('whoami');
?>
]]>
    </programlisting>
   </example>
  </para>
  &warn.escapeshell;
  &note.exec-bg;
  &note.exec-path;
  &warn.sm.exec;
  <para>
   See also <function>system</function>,
   <function>passthru</function>, <function>popen</function>,
   <function>escapeshellcmd</function>
   <function>pcntl_exec</function>, and the <link
   linkend="language.operators.execution">backtick operator</link>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
