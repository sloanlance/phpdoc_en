<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.7 $ -->
<refentry id="function.sqlite-fetch-column-types">
 <refnamediv>
  <refname>sqlite_fetch_column_types</refname>
  <refname>SQLiteDatabase->fetchColumnTypes</refname>
  <refpurpose>
   Return an array of column types from a particular table
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>array</type><methodname>sqlite_fetch_column_types</methodname>
   <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
  </methodsynopsis>
  <para>Object oriented style (method):</para>
  <classsynopsis>
   <ooclass><classname>SQLiteDatabase</classname></ooclass>
   <methodsynopsis>
    <type>array</type><methodname>fetchColumnTypes</methodname>
    <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   <function>sqlite_fetch_column_types</function> returns an array of column
   data types from the specified <parameter>table_name</parameter> table.
  </para>
  <para>
   The optional <parameter>result_type</parameter> parameter accepts a
   constant and determines how the returned array will be indexed. Using
   <constant>SQLITE_ASSOC</constant> will return only associative indices
   (named fields) while <constant>SQLITE_NUM</constant> will return only
   numerical indices (ordinal field numbers). <constant>SQLITE_BOTH</constant>
   will return both associative and numerical indices.
   <constant>SQLITE_ASSOC</constant> is the default for this function.
  </para>
  &sqlite.case-fold;
  <para>
   <example>
    <title><function>sqlite_fetch_column_types</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
$db = sqlite_open('mysqlitedb');
sqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');
$cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Column: $column  Type: $type";
}
/*  Output:
 * Column: bar  Type: VARCHAR
 * Column: arf  Type: TEXT
*/

/* OO Example */
$db = new SQLiteDatabase('mysqlitedb');
$db->query('CREATE TABLE foo (bar varchar(10), arf text)');
$cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Column: $column  Type: $type";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
