<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<refentry id="function.sqlite-create-function">
 <refnamediv>
  <refname>sqlite_create_function</refname>
  <refpurpose>
   Registers a "regular" User Defined Function for use in SQL statements
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>bool</type><methodname>sqlite_create_function</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_create_function</function> allows you to register a PHP
   function with SQLite as an <acronym>UDF</acronym> (User Defined
   Function), so that it can be called from within your SQL
   statements.
  </para>
  <para>
   <parameter>dbhandle</parameter> specifies the database handle that you
   wish to extend, <parameter>function_name</parameter> specifies the name
   of the function that you will use in your SQL statements,
   <parameter>callback</parameter> is any valid PHP callback to specify a
   PHP function that should be called to handle the SQL function.
   The optional parameter <parameter>num_args</parameter> is used as a hint
   by the SQLite expression parser/evaluator.  It is recommended that you
   specify a value if your function will only ever accept a fixed number of
   parameters.
  </para>
  <para>
   The UDF can be used in any SQL statement that can call functions, such as
   SELECT and UPDATE statements and also in triggers.
  </para>
  <para>
   <example>
    <title><function>sqlite_create_function</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_and_reverse($string) 
{
    return strrev(md5($string));
}

if ($dbhandle = sqlite_open('mysqlitedb', 0666, $sqliteerror)) {
    
    sqlite_create_function($dbhandle, 'md5rev', 'md5_and_reverse', 1);
    
    $sql  = 'SELECT md5rev(filename) FROM files';
    $rows = sqlite_array_query($dbhandle, $sql);
} else {
    echo 'Error opening sqlite db: ' . $sqliteerror;
    exit;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In this example, we have a function that calculates the md5 sum of a
   string, and then reverses it.  When the SQL statement executes, it
   returns the value of the filename transformed by our function.  The data
   returned in <parameter>$rows</parameter> contains the processed result.
  </para>
  <para>
   The beauty of this technique is that you do not need to process the
   result using a foreach() loop after you have queried for the data.
  </para>
  <para>
   PHP registers a special function named <literal>php</literal> when the
   database is first opened.  The php function can be used to call any PHP
   function without having to register it first.
  </para>
  <para>
   <example>
    <title>Example of using the PHP function</title>
    <programlisting role="php">
<![CDATA[
<?php
$rows = sqlite_array_query($dbhandle, "SELECT php('md5', filename) from files");
?>
]]>
    </programlisting>
    <para>
     This example will call the <function>md5</function> on each
     <literal>filename</literal> column in the database and return the result
     into <parameter>$rows</parameter>
    </para>
   </example>
  </para>
  <note>
   <para>
    For performance reasons, PHP will not automatically encode/decode binary
    data passed to and from your UDF's.  You need to manually encode/decode
    the parameters and return values if you need to process binary data in
    this way.  Take a look at <function>sqlite_udf_encode_binary</function>
    and <function>sqlite_udf_decode_binary</function> for more details.
   </para>
  </note>
  <tip>
   <para>
    It is not recommended to use UDF's to handle processing of
    binary data, unless high performance is not a key requirement of your
    application.
   </para>
  </tip>
  <tip>
   <para>
    You can use <function>sqlite_create_function</function> and
    <function>sqlite_create_aggregate</function> to override SQLite native
    SQL functions.
   </para>
  </tip>
  <para>
   See also <function>sqlite_create_aggregate</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
