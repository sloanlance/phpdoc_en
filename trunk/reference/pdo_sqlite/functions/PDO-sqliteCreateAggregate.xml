<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.4 $ -->
<refentry id="function.PDO-sqliteCreateAggregate">
 <refnamediv>
  <refname>PDO::sqliteCreateAggregate</refname>
  <refpurpose>
   Registers an aggregating User Defined Function for use in SQL statements
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>PDO::sqliteCreateAggregate</methodname>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>callback</type><parameter>step_func</parameter></methodparam>
   <methodparam><type>callback</type><parameter>finalize_func</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  &warn.experimental.func;
  <para>
   <function>PDO::sqliteCreateAggregate</function> is similar to
   <function>PDO::sqliteCreateFunction</function> except that it registers
   functions that can be used to calculate a result aggregated across all the
   rows of a query.
  </para>
  <para>
   The key difference between this function and
   <function>PDO::sqliteCreateFunction</function> is that two functions are
   required to manage the aggregate; <parameter>step_func</parameter> is
   called for each row of the result set.  Your PHP function should
   accumulate the result and store it into the aggregation context.
   Once all the rows have been processed,
   <parameter>finalize_func</parameter> will be called and it should then
   take the data from the aggregation context and return the result.
   Callback functions should return a type understood by SQLite (i.e.
   <link linkend="language.types.intro">scalar type</link>).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       The name of the function used in SQL statements.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>step_func</parameter></term>
     <listitem>
      <para>
       Callback function called for each row of the result set.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>finalize_func</parameter></term>
     <listitem>
      <para>
       Callback function to aggregate the "stepped" data from each row.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       Hint to the SQLite parser if the callback function accepts a
       predetermined number of arguments.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>max_length aggregation function example</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$db = new PDO('sqlite::memory:');
$db->exec("CREATE TABLE strings(a)");
$insert = $db->prepare('INSERT INTO strings VALUES (?)');
foreach ($data as $str) {
    $insert->execute(array($str));
}
$insert = null;

function max_len_step(&$context, $string) 
{
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
}

function max_len_finalize(&$context) 
{
    return $context;
}

$db->sqliteCreateAggregate('max_len', 'max_len_step', 'max_len_finalize');

var_dump($db->query('SELECT max_len(a) from strings')->fetchAll());

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In this example, we are creating an aggregating function that will
   calculate the length of the longest string in one of the columns of the
   table.  For each row, the <literal>max_len_step</literal> function is
   called and passed a <parameter>context</parameter> parameter.  The context
   parameter is just like any other PHP variable and be set to hold an array
   or even an object value.  In this example, we are simply using it to hold
   the maximum length we have seen so far; if the
   <parameter>string</parameter> has a length longer than the current
   maximum, we update the context to hold this new maximum length.
  </para>
  <para>
   After all of the rows have been processed, SQLite calls the
   <literal>max_len_finalize</literal> function to determine the aggregate
   result.  Here, we could perform some kind of calculation based on the
   data found in the <parameter>context</parameter>.  In our simple example
   though, we have been calculating the result as the query progressed, so we
   simply need to return the context value.
  </para>
  <tip>
   <para>
    It is NOT recommended for you to store a copy of the values in the context
    and then process them at the end, as you would cause SQLite to use a lot of
    memory to process the query - just think of how much memory you would need
    if a million rows were stored in memory, each containing a string 32 bytes
    in length.
   </para>
  </tip>
  <tip>
   <para>
    You can use <function>PDO::sqliteCreateFunction</function> and
    <function>PDO::sqliteCreateAggregate</function> to override SQLite native
    SQL functions.
   </para>
  </tip>
  <note>
   <para>
    This method is not available with the SQLite2 driver.
    Use the old style sqlite API for that instead.
   </para>
  </note>

 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::sqliteCreateFunction</function></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
