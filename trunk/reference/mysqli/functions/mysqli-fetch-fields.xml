<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
  <refentry id="function.mysqli-fetch-fields">
   <refnamediv>
    <refname>mysqli_fetch_fields</refname>
    <refname>result->fetch_fields</refname>
    <refpurpose>Returns an array of objects representing the fields in a result set</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <para>Procedural Style:</para>
     <methodsynopsis>
      <type>mixed</type><methodname>mysqli_fetch_fields</methodname>
      <methodparam><type>object</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
     <para>Object oriented style (method):</para>
     <classsynopsis>
      <ooclass><classname>result</classname></ooclass>
      <methodsynopsis>
       <type>mixed</type>
       <methodname>fetch_fields</methodname>
       <methodparam><type>int</type><parameter>fieldnr</parameter></methodparam>
      </methodsynopsis>
     </classsynopsis>
    <para>
     This function serves an identical purpose to the <function>mysqli_fetch_field</function>
     function with the single difference that, instead of returning one object at a time for
     each field, the columns are returned as an array of objects. For a description of the
     attributes of each object and their meaning, see the <function>mysqli_fetch_field</function>
     function.
    </para>
   </refsect1>
   <refsect1>
    <title>Return values</title>
    <para>
     Returns an array of objects which contains field definition informations or &false; if no field information
     is available.
    </para>
    <para>
    <table>
     <title>Object attributes</title>
     <tgroup cols='2'>
      <thead>
       <row>
        <entry>Attribute</entry>
        <entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>name</entry>
        <entry>The name of the column</entry>
       </row>
       <row>
        <entry>orgname</entry>
        <entry>Original column name if an alias was specified</entry>
       </row>
       <row>
        <entry>table</entry>
        <entry>The name of the table this field belongs to (if not calculated)</entry>
       </row>
       <row>
        <entry>orgtable</entry>
        <entry>Original table name if an alias was specified</entry>
       </row>
       <row>
        <entry>def</entry>
        <entry>The default value for this field, represented as a string</entry>
       </row>
       <row>       
        <entry>max_length</entry>
        <entry>The maximum width of the field for the result set.</entry>
       </row>
       <row>
        <entry>flags</entry>
        <entry>An integer representing the bit-flags for the field.</entry>
       </row>
       <row>
        <entry>type</entry>
        <entry>The data type used for this field</entry>
       </row>
       <row>
        <entry>decimals</entry>
        <entry>The number of decimals used (for integer fields)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    </para>
   </refsect1>
   <refsect1>
    <title>See also</title>
    <para>
     <function>mysqli_num_fields</function>
     <function>mysqli_fetch_field</function>
     <function>mysqli_fetch_field_direct</function>
    </para>
   </refsect1>
   <refsect1>
    <title>Example</title>
    <para>
     <example>
      <title>Object oriented style</title>
      <programlisting role='php'>
<![CDATA[
<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "test");

mysqli_query($link, "DROP TABLE IF EXISTS friends"); 
mysqli_query($link, "CREATE TABLE friends (id int, name varchar(20))"); 
 
mysqli_query($link, "INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')");

$result = mysqli_query($link, "SELECT id, name FROM friends");

/* Get field informations */
$finfo = mysqli_fetch_fields($result);

for ($i=0; $i < count($finfo); $i++) {
    printf("Name:     %s\n", $finfo[$i]->name);
    printf("Table:    %s\n", $finfo[$i]->table);
    printf("Default:  %s\n", $finfo[$i]->def);
    printf("max. Len: %d\n", $finfo[$i]->max_length);
    printf("Flags:    %d\n", $finfo[$i]->flags);
    printf("Type:     %d\n", $finfo[$i]->type);
}

mysqli_free_result($result);

mysqli_close($link);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Procedural style</title>
      <programlisting role='php'>
<![CDATA[
<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "test");

$mysqli->query( "DROP TABLE IF EXISTS friends"); 
$mysqli->query( "CREATE TABLE friends (id int, name varchar(20))"); 
 
$mysqli->query( "INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')");

$result = $mysqli->query( "SELECT id, name FROM friends");

/* Get field information for column 'name' */
$finfo = $result->fetch_fields();

for ($i=0; $i < count($finfo); $i++) {
    printf("Name:     %s\n", $finfo[$i]->name);
    printf("Table:    %s\n", $finfo[$i]->table);
    printf("Default:  %s\n", $finfo[$i]->def);
    printf("max. Len: %d\n", $finfo[$i]->max_length);
    printf("Flags:    %d\n", $finfo[$i]->flags);
    printf("Type:     %d\n", $finfo[$i]->type);
}
 
$result->close();

$mysqli->close();
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
