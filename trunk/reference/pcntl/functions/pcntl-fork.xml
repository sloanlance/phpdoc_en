<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- splitted from ./en/functions/pcntl.xml, last change in rev 1.1 -->
 <refentry id="function.pcntl-fork">
  <refnamediv>
   <refname>pcntl_fork</refname>
   <refpurpose>Forks the currently running process</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>int</type><methodname>pcntl_fork</methodname>
     <void/>
    </methodsynopsis>
   <para>
    The <function>pcntl_fork</function> function creates a child
    process that differs from the parent process only in it's PID and
    PPID. Please see your system's fork(2) man page for specific details as to
    how fork works on your system.
   </para>
   <para>
    On success, the PID of the child process is returned in the
    parent's thread of execution, and a 0 is returned in the child's
    thread of execution.  On failure, a -1 will be returned in the
    parent's context, no child process will be created, and a PHP
    error is raised.
   </para>
   <example>
    <title><function>pcntl_fork</function> Example</title>
    <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
if ($pid == -1) {
     die("could not fork");
} else if ($pid) {
     // we are the parent
} else {
     // we are the child
}

?>
]]>
    </programlisting>
   </example>
   <para>
    See also <function>pcntl_waitpid</function> and
    <function>pcntl_signal</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
