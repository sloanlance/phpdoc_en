<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
 <reference id="ref.pcntl">
  <title>Process Control Functions</title>
  <titleabbrev>PCNTL</titleabbrev>
  <partintro>
   <para>
    Process Control support in PHP implements the Unix style of
    process creation, program execution, signal handling and process
    termination.  Process Control should not be enabled within a
    webserver environment and unexpected results may happen if any
    Process Control functions are used within a webserver environment.
   </para>
   <para>
    This documentation is intended to explain the general usage of
    each of the Process Control functions.  For detailed information
    about Unix process control you are encouraged to consult your
    systems documentation including fork(2), waitpid(2) and signal(2)
    or a comprehensive reference such as Advanced Programming in the
    UNIX Environment by W. Richard Stevens (Addison-Wesley).
   </para>
   <para>
    Process Control support in PHP is not enabled by default.  You
    will need to use the <link
    linkend="install.configure.enable-pcntl">--enable-pcntl</link>
    configuration option when compiling PHP to enable Process Control
    support.
   </para>
   <note>
    <para>
     Currently, this module will not function on non-Unix platforms
     (Windows).
    </para>
   </note>
   <para>
    The following list of signals are supported by the Process Control
    functions.  Please see your systems signal(7) man page for details
    of the default behavior of these signals.
   <table>
    <title>Supported Signals</title>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry><literal>SIGFPE</literal></entry>
       <entry><literal>SIGCONT</literal></entry>
       <entry><literal>SIGKILL</literal></entry>
      </row>
      <row>
       <entry><literal>SIGSTOP</literal></entry>
       <entry><literal>SIGUSR1</literal></entry>
       <entry><literal>SIGTSTP</literal></entry>
      </row>
      <row>
       <entry><literal>SIGHUP</literal></entry>
       <entry><literal>SIGUSR2</literal></entry>
       <entry><literal>SIGTTIN</literal></entry>
      </row>
      <row>
       <entry><literal>SIGINT</literal></entry>
       <entry><literal>SIGSEGV</literal></entry>
       <entry><literal>SIGTTOU</literal></entry>
      </row>
      <row>
       <entry><literal>SIGQUIT</literal></entry>
       <entry><literal>SIGPIPE</literal></entry>
       <entry><literal>SIGURG</literal></entry>
      </row>
      <row>
       <entry><literal>SIGILL</literal></entry>
       <entry><literal>SIGALRM</literal></entry>
       <entry><literal>SIGXCPU</literal></entry>
      </row>
      <row>
       <entry><literal>SIGTRAP</literal></entry>
       <entry><literal>SIGTERM</literal></entry>
       <entry><literal>SIGXFSZ</literal></entry>
      </row>
      <row>
       <entry><literal>SIGABRT</literal></entry>
       <entry><literal>SIGSTKFLT</literal></entry>
       <entry><literal>SIGVTALRM</literal></entry>
      </row>
      <row>
       <entry><literal>SIGIOT</literal></entry>
       <entry><literal>SIGCHLD</literal></entry>
       <entry><literal>SIGPROF</literal></entry>
      </row>
      <row>
       <entry><literal>SIGBUS</literal></entry>
       <entry><literal>SIGCLD</literal></entry>
       <entry><literal>SIGWINCH</literal></entry>
      </row>
      <row>
       <entry><literal>SIGPOLL</literal></entry>
       <entry><literal>SIGIO</literal></entry>
       <entry><literal>SIGPWR</literal></entry>
      </row>
      <row>
       <entry><literal>SIGSYS</literal></entry>
       <entry><literal></literal></entry>
       <entry><literal></literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   </para>

   <section id="pcntl-example">
    <title>Process Control Example</title>
    <para>
     This example forks off a daemon process with a signal handler.
    </para>
    <example>
     <title>Process Control Example</title>
     <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
if ($pid == -1) {
     die("could not fork"); 
} else if ($pid) {
     exit(); // we are the parent 
} else {
     // we are the child
}

// detatch from the controlling terminal
if (!posix_setsid()) {
    die("could not detach from terminal");
}

// setup signal handlers
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");

// loop forever performing tasks
while(1) {

    // do something interesting here

}

function sig_handler($signo) {

     switch($signo) {
         case SIGTERM:
             // handle shutdown tasks
             exit;
             break;
         case SIGHUP:
             // handle restart tasks
             break;
         default:
             // handle all other signals
     }

}

?>
]]>
     </programlisting>
    </example>
   </section>
  </partintro>

&reference.pcntl.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

