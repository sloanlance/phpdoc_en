<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
  <refentry id="function.stream-register-filter">
   <refnamediv>
    <refname>stream_register_filter</refname>
    <refpurpose>Register a stream filter implemented as a PHP class derived from <literal>php_user_filter</literal></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>bool</type><methodname>stream_register_filter</methodname>
     <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
     <methodparam><type>string</type><parameter>classname</parameter></methodparam>
    </methodsynopsis>
    <para>
     <function>stream_register_filter</function> allows you to implement
     your own filter on any registered stream used with all the other
     filesystem functions (such as <function>fopen</function>,
     <function>fread</function> etc.).
    </para>
    <para>
     To implement a filter, you need to define a class as an extension of
     <literal>php_user_filter</literal> with a number of member functions 
     as defined below. When performing read/write operations on the stream
     to which your filter is attached, PHP will pass the data through your
     filter (and any other filters attached to that stream) so that the
     data may be modified as desired. You must implement the methods
     exactly as described below - doing otherwise will lead to undefined
     behaviour.
    </para>
    <para>
     <function>stream_register_filter</function> will return &false; if the
     <parameter>filtername</parameter> is already defined.
    </para>

    <methodsynopsis>
     <type>int</type><methodname>filter</methodname>
     <methodparam><type>resource</type><parameter>in</parameter></methodparam>
     <methodparam><type>resource</type><parameter>out</parameter></methodparam>
     <methodparam><type>int</type><parameter>&amp;consumed</parameter></methodparam>
     <methodparam><type>boolean</type><parameter>closing</parameter></methodparam>
    </methodsynopsis>
    <para>
     This method is called whenever data is read from or written to 
     the attached stream (such as with <function>fread</function> or <function>fwrite</function>).  
     <parameter>in</parameter> is a resource pointing to a <literal>bucket brigade</literal>
     which contains one or more <literal>bucket</literal> objects containing data to be filtered.
     <parameter>out</parameter> is a resource pointing to a second <literal>bucket brigade</literal>
     into which your modified buckets should be placed.
     <parameter>consumed</parameter>, which must <emphasis>always</emphasis>
     be declared by reference, should be incremented by the length of the data
     which your filter reads in and alters.  In most cases this means you will
     increment <parameter>consumed</parameter> by $bucket->datalen for each $bucket.
     If the stream is in the process of closing (and therefore this is the last pass
     through the filterchain), the <parameter>closing</parameter> parameter will be
     set to &true;  The <methodname>filter</methodname> method must return one of
     three values upon completion.  <constant>PSFS_PASS_ON</constant> indicates
     success with data available in the <parameter>out</parameter> <literal>bucket brigade</literal>.
     <constant>PSFS_FEED_ME</constant> indicates that the filter has no data
     available to return and requires additional data from the stream.
     <constant>PSFS_ERR_FATAL</constant> indicates that the filter experienced an
     unrecoverable error and cannot continue.  If no value is returned by this method,
     <constant>PSFS_ERR_FATAL</constant> will be assumed.
    </para>

    <methodsynopsis>
     <type>void</type><methodname>oncreate</methodname>
     <void/>
    </methodsynopsis>
    <para>
     This method is called during instantiation of the filter class
     object.  If your filter allocates or initializes any other resources
     (such as a buffer), this is the place to do it.
    </para>

    <methodsynopsis>
     <type>void</type><methodname>onclose</methodname>
     <void/>
    </methodsynopsis>
    <para>
     This method is called upon filter shutdown (typically, this is also
     during stream shutdown), and is executed <emphasis>after</emphasis>
     the <literal>flush</literal> method is called.  If any resources
     were allocated or initialzed during <literal>oncreate</literal>
     this would be the time to destroy or dispose of them.
    </para>

    <para>
     The example below implements a filter named <literal>strtoupper</literal>
     on the <literal>foo-bar.txt</literal> stream which will capitalize
     all letter characters written to/read from that stream.

     <example> 
      <title>Filter for capitalizing characters on foo-bar.txt stream</title>
      <programlisting role="php">
<![CDATA[
<?php

/* Define our filter class */
class strtoupper_filter extends php_user_filter {
  function filter($in, $out, &$consumed, $closing) {
    while ($bucket = stream_bucket_make_writeable($in)) {
      $bucket->data = strtoupper($bucket->data);
      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }
} 

/* Register our filter with PHP */
stream_register_filter("strtoupper", "strtoupper_filter")
    or die("Failed to register filter");

$fp = fopen("foo-bar.txt", "w");

/* Attach the registered filter to the stream just opened */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* Read the contents back out
 */
readfile("foo-bar.txt");

/* Output
 * ------

LINE1
WORD - 2
EASY AS 123

 */
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     See Also:
     <function>stream_register_wrapper</function>,
     <function>stream_filter_prepend</function>, and
     <function>stream_filter_append</function>
    </simpara>
   </refsect1>
  </refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
