<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- splitted from ./en/functions/ming.xml, last change in rev 1.24 -->
  <refentry id="function.swfmorph">
   <refnamediv>
    <refname>SWFMorph</refname>
    <refpurpose>Creates a new SWFMorph object.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>new</type><methodname>swfmorph</methodname>
      <void/>
     </methodsynopsis>
    &warn.experimental.func;
    <para>
     <function>swfmorph</function> creates a new SWFMorph object. 
    </para>
    <para>
     Also called a "shape tween". This thing lets you make those tacky 
     twisting things that make your computer choke. Oh, joy! 
    </para>
    <para>
     The methods here are sort of weird. It would make more sense to just 
     have newSWFMorph(shape1, shape2);, but as things are now, shape2 needs
     to know that it's the second part of a morph. (This, because it starts
     writing its output as soon as it gets drawing commands- if it kept its
     own description of its shapes and wrote on completion this and some 
     other things would be much easier.) 
    </para>
    <simpara>
     SWFMorph has the following methods : <function>swfmorph->getshape1</function>
     and <function>swfmorph->getshape1</function>.
    </simpara>
    <para>
     This simple example will morph a big red square into a smaller
     blue black-bordered square.
     <example>
      <title><function>swfmorph</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
  $p = new SWFMorph();

  $s = $p->getShape1();
  $s->setLine(0, 0, 0, 0);

  /* Note that this is backwards from normal shapes (left instead of right).
     I have no idea why, but this seems to work.. */

  $s->setLeftFill($s->addFill(0xff, 0, 0));
  $s->movePenTo(-1000,-1000);
  $s->drawLine(2000,0);
  $s->drawLine(0,2000);
  $s->drawLine(-2000,0);
  $s->drawLine(0,-2000);

  $s = $p->getShape2();
  $s->setLine(60,0,0,0);
  $s->setLeftFill($s->addFill(0, 0, 0xff));
  $s->movePenTo(0,-1000);
  $s->drawLine(1000,1000);
  $s->drawLine(-1000,1000);
  $s->drawLine(-1000,-1000);
  $s->drawLine(1000,-1000);

  $m = new SWFMovie();
  $m->setDimension(3000,2000);
  $m->setBackground(0xff, 0xff, 0xff);

  $i = $m->add($p);
  $i->moveTo(1500,1000);

  for ($r=0.0; $r<=1.0; $r+=0.1) {
    $i->setRatio($r);
    $m->nextFrame();
  }

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
