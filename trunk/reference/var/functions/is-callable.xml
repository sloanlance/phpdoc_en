<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.87 -->
  <refentry id="function.is-callable">
   <refnamediv>
    <refname>is_callable</refname>
    <refpurpose>
     Verify that the contents of a variable can be called as a function
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_callable</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter></methodparam>
     </methodsynopsis>
    <para>
     Verify that the contents of a variable can be called as a function.
     This can check that a simple variable contains the name of a valid
     function, or that an array contains a properly encoded object and
     function name.
    </para>
    <para>
     The <parameter>var</parameter> parameter can be either the name of a function stored in
     a string variable, or an object and the name of a method within the
     object, like this: 
     <screen>array($SomeObject, 'MethodName')</screen>
    </para>
    <para>
     If the <parameter>syntax_only</parameter> argument is &true; the
     function only verifies that <parameter>var</parameter> might be a
     function or method. It will only reject simple variables that are
     not strings, or an array that does not have a valid structure to be
     used as a callback. The valid ones are supposed to have only 2
     entries, the first of which is an object or a string, and the
     second a string.
    </para>
    <para>
     The <parameter>callable_name</parameter> argument receives the
     "callable name".  In the example below it's
     "someClass:someMethod".  Note, however, that despite the
     implication that someClass::SomeMethod() is a callable static
     method, this is not the case.
    </para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
//  How to check a variable to see if it can be called
//  as a function.

//
//  Simple variable containing a function
//

function someFunction() 
{
}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));  // bool(true)

echo $callable_name, "\n";  // someFunction

//
//  Array containing a method
//

class someClass {

  function someMethod() 
  {
  }

}

$anObject = new someClass();

$methodVariable = array($anObject, 'someMethod');

var_dump(is_callable($methodVariable, true, $callable_name));  //  bool(true)

echo $callable_name, "\n";  //  someClass:someMethod

?>
]]>
     </programlisting>
    </informalexample>   
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
