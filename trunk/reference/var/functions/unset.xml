<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.2 -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Unset a given variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>

    <para>
     <function>unset</function> destroys the specified variables. Note
     that in PHP 3, <function>unset</function> will always return &true;
     (actually, the integer value 1). In PHP 4, however,
     <function>unset</function> is no longer a true function: it is
     now a statement. As such no value is returned, and attempting to
     take the value of <function>unset</function> results in a parse
     error.
    </para>
    <para>
     <example>
      <title><function>unset</function> example</title>
      <programlisting role="php">
<![CDATA[
<?php
// destroy a single variable
unset($foo);

// destroy a single element of an array
unset($bar['quux']);

// destroy more than one variable
unset($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     The behavior of <function>unset</function> inside of a function
     can vary depending on what type of variable you are attempting to
     destroy.
    </para>
    <para>
     If a globalized variable is <function>unset</function> inside of
     a function, only the local variable is destroyed.  The variable
     in the calling environment will retain the same value as before
     <function>unset</function> was called.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo() 
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     If a variable that is PASSED BY REFERENCE is
     <function>unset</function> inside of a function, only the local
     variable is destroyed.  The variable in the calling environment
     will retain the same value as before <function>unset</function>
     was called.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     If a static variable is <function>unset</function> inside of a
     function, <function>unset</function> destroys the variable and all 
     its references.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    static $a;
    $a++;
    echo "$a\n";
    unset($a);
}

foo();
foo();
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
1
2
3
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     If you would like to <function>unset</function> a global variable
     inside of a function, you can use
     the <varname>$GLOBALS</varname> array to do so:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    
    &note.language-construct;
    
    <para>
     See also <function>isset</function>,
     <function>empty</function>, and
     <function>array_splice</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
