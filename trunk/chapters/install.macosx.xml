<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
<sect1 id="install.macosx">
 <title>Unix/Mac OS X installs</title>
 <para>
  This section contains notes and hints specific to installing
  PHP on Mac OS X Server.
 </para>
 <sect2 id="install.macosx.packages">
  <title>Using Packages</title>
  <simpara>
   There are a few pre-packaged and pre-compiled versions of PHP for
   Mac OS X. This can help in setting up a standard
   configuration, but if you need to have a different set of features
   (such as a secure server, or a different database driver), you may
   need to build PHP and/or your web server yourself. If you are unfamiliar
   with building and compiling your own software, it's worth
   checking whether somebody has already built a packaged
   version of PHP with the features you need.
  </simpara>
 </sect2>
 <sect2 id="install.macosx.compile">
  <title>Compiling for OS X server</title>
  <simpara>
   There are two slightly different versions of Mac OS X, client and
   server. The following is for OS X Server.
  </simpara>
  <formalpara id="install.macosx.compile.example">
   <title>Mac OS X server install</title>
   <para>
    <orderedlist>
     <listitem>
      <simpara>Get the latest distributions of Apache and PHP.</simpara>
     </listitem>
     <listitem>
      <para>
       Untar them, and run the <command>configure</command> program on Apache
       like so.
       <programlisting role="shell">
<![CDATA[
./configure --exec-prefix=/usr \
--localstatedir=/var \
--mandir=/usr/share/man \
--libexecdir=/System/Library/Apache/Modules \
--iconsdir=/System/Library/Apache/Icons \
--includedir=/System/Library/Frameworks/Apache.framework/Versions/1.3/Headers \
--enable-shared=max \
--enable-module=most \
--target=apache
]]>
       </programlisting>
      </para>
     </listitem>
     <listitem>
      <para>
       If you want the compiler to do some optimization., you may also want to
       add this line:
       <programlisting role="shell">
<![CDATA[
setenv OPTIM=-O2
]]>
       </programlisting>
      </para>
     </listitem>
     <listitem>
      <para>
       Next, go to the PHP 4 source directory and configure it.
       <programlisting role="shell">
<![CDATA[
./configure --prefix=/usr \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --mandir=/usr/share/man \
    --with-xml \
    --with-apache=/src/apache_1.3.12
]]>
       </programlisting>
       If you have any other additions (MySQL, GD, etc.), be sure to add them
       here. For the <option role="configure">--with-apache</option> string, put
       in the path to your apache source directory, for example
       <filename class="directory">/src/apache_1.3.12</filename>.
      </para>
     </listitem>
     <listitem>
      <simpara>
       Type <command>make</command> and <command>make install</command>. This
       will add a directory to your Apache source directory under
       <filename class="directory">src/modules/php4</filename>.
      </simpara>
     </listitem>
     <listitem>
      <para>
       Now, reconfigure Apache to build in PHP 4.
       <programlisting role="shell">
<![CDATA[
./configure --exec-prefix=/usr \
--localstatedir=/var \
--mandir=/usr/share/man \
--libexecdir=/System/Library/Apache/Modules \
--iconsdir=/System/Library/Apache/Icons \
--includedir=/System/Library/Frameworks/Apache.framework/Versions/1.3/Headers \
--enable-shared=max \
--enable-module=most \
--target=apache \
--activate-module=src/modules/php4/libphp4.a
]]>
       </programlisting>
       You may get a message telling you that libmodphp4.a is out of date. If
       so, go to the <filename class="directory">src/modules/php4</filename>
       directory inside your apache source directory and run this command: 
       <command>ranlib libmodphp4.a</command>. Then go back to the root of the
       apache source directory and run the above <command>configure</command>
       command again. That'll bring the link table up to date. Run
       <command>make</command> and <command>make install</command> again.
      </para>
     </listitem>
     <listitem>
      <simpara>
       Copy and rename the <filename>php.ini-dist</filename> file to your
       <filename class="directory">bin</filename> directory from your PHP 4
       source directory: 
       <userinput>cp php.ini-dist /usr/local/bin/php.ini</userinput>
       or (if your don't have a local directory)
       <userinput>cp php.ini-dist /usr/bin/php.ini</userinput>.
      </simpara>
     </listitem>
    </orderedlist>
   </para>
  </formalpara>
  <!--
  <simpara>
  TODO: Someone with Mac OS X skills needs to improve this DOC
        Also, these links are 404 and outdated anyways and
        stepwise doesn't support PHP anymore.

        See also bug #14732

   Other examples for
   <ulink url="&url.stepwise.macosx-client;">Mac OS X client</ulink>
   and
   <ulink url="&url.stepwise.macosx-client;">Mac OS X server</ulink>
   are available at <ulink url="&url.stepwise;">Stepwise</ulink>.
  </simpara>
  -->
  
 </sect2>
 <sect2 id="install.macosx.client">
  <title>Compiling for MacOS X client</title>
  <simpara>
   Those tips are graciously provided by <ulink url="&url.macosx;">Marc Liyanage</ulink>.
  </simpara>
  <simpara>
   The PHP module for the Apache web server included in Mac OS X.
   This version includes support for the MySQL and PostgreSQL databases.
  </simpara>
  <simpara>
   NOTE: Be careful when you do this, you could screw up your Apache web server!
  </simpara>
  <para>
   Do this to install:
   <orderedlist>
    <listitem>
     <simpara>
      Open a terminal window.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Type
      <userinput>wget http://www.diax.ch/users/liyanage/software/macosx/libphp4.so.gz</userinput>,
      wait for the download to finish.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Type <userinput>gunzip libphp4.so.gz</userinput>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Type <userinput>sudo apxs -i -a -n php4 libphp4.so</userinput>
     </simpara>
    </listitem>
    <listitem>
     <para>
      Now type <userinput>sudo open -a TextEdit /etc/httpd/httpd.conf</userinput>.
      TextEdit will open with the web server configuration file. Locate these 
      two lines towards the end of the file: (Use the Find command)
      <programlisting role="apache">
<![CDATA[
#AddType application/x-httpd-php .php 
#AddType application/x-httpd-php-source .phps
]]>
      </programlisting>
       Remove the two hash marks (<literal>#</literal>), then save the file and
       quit TextEdit.
      </para>
    </listitem>
    <listitem>
     <simpara>
      Finally, type <userinput>sudo apachectl graceful</userinput> to restart
      the web server.
     </simpara>
    </listitem>
   </orderedlist>
  </para>
  <para>
   PHP should now be up and running. You can test it by dropping a file into 
   your <filename class="directory">Sites</filename> folder which is called
   <filename>test.php</filename>. Into that file, write this line:
   <literal>&lt;?php phpinfo() ?&gt;</literal>.
  </para>
  <para>
   Now open up <literal>127.0.0.1/~your_username/test.php</literal> in your web
   browser. You should see a status table with information about the PHP module.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
