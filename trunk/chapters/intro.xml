<?xml encoding="iso-8859-1"?>
<!-- $Revision: 1.23 $ -->
 <chapter id="introduction">
  <title>Introduction</title>

  <sect1 id="intro-whatis">
   <title>What is PHP?</title>
   <para>
    PHP (recursive acronym for "PHP: Hypertext Preprocessor")
    is an open-source server-side HTML-embedded scripting language.
   </para>
   <para>
    Simple answer, but what does that mean? An example:
   </para>
   <para>
    <example>
     <title>An introductory example</title>
     <programlisting role="php">
<![CDATA[
<html>
    <head>
        <title>Example</title>
    </head>
    <body>

        <?php 
        echo "Hi, I'm a PHP script!"; 
        ?>

    </body>
</html>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Notice how this is different from a script written in other
    languages like Perl or C -- instead of writing a program with lots
    of commands to output HTML, you write an HTML script with some
    embedded code to do something (in this case, output some
    text). The PHP code is enclosed in special <link
    linkend="language.basic-syntax.phpmode">start and end tags</link>
    that allow you to jump into and out of "PHP mode".
   </para>
   <para>
    What distinguishes PHP from something like client-side JavaScript
    is that the code is executed on the server. If you were to have a
    script similar to the above on your server, the client would receive
    the results of running that script, with no way of determining what
    the underlying code may be. You can even configure your web server
    to process all your HTML files with PHP, and then there's really no
    way that users can tell what you have up your sleeve.
   </para>
   <para>
    The best things in using PHP are that it is extremely simple
    for a newcomer, but offers many advanced features for
    a professional programmer. Don't be afraid reading the long
    list of PHP's features. You can jump in, in a short time, and
    start writing simple scripts in a few hours.
   </para>
   <para>
    Although PHP's development is focused on server-side scripting,
    you can do much more with it. Read on, and see more in the
    <link linkend="intro-whatcando">What can PHP do?</link> section.
   </para>
  </sect1>

  <sect1 id="intro-whatcando">
   <title>What can PHP do?</title>
   <para>
    Anything. PHP is mainly focused on server-side scripting,
    so you can do anything any other CGI program can do, such
    as collect form data, generate dynamic page content, or
    send and receive cookies. But PHP can do much more.
   </para>
   <para>
    There are three main fields where PHP scripts are used.
    <itemizedlist>
     <listitem>
      <simpara>
       Server-side scripting. This is the most traditional
       and main target field for PHP. You need three things
       to make this work. The PHP parser (CGI or server
       module), a webserver and a web browser. You need to
       run the webserver, with a connected PHP installation.
       You can access the PHP program output with a web browser,
       viewing the PHP page through the server. See the
       <link linkend="installation">installation instructions</link>
       section for more information.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Command line scripting. You can make a PHP script
       to run it without any server and any browser.
       You only need the PHP parser to use it this way.
       This type of usage is ideal for scripts regularly
       executed using cron (task sheduler on Windows),
       or simple text processing tasks. See the section about
       <link linkend="commandline">Command line usage
       of PHP</link> for more information.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Writing client-side GUI applications. PHP is probably
       not the very best language to write windowing
       applications, but if you know PHP very well, and
       would like to use some advanced PHP features in
       your client-side applications you can also use
       PHP-GTK to write such programs. You also have the
       ability to write cross-platform applications this way.
       PHP-GTK is an extension to PHP, not available in
       the main distribution. If you are interested
       in PHP-GTK, visit <ulink url="&url.php.gtk;">it's
       own website</ulink>.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHP can be used on all major operating systems, including
    Linux, many Unix variants (including HP-UX, Solaris and OpenBSD),
    Microsoft Windows, Mac OS X, RISC OS, and probably others.
    PHP has also support for most of the web servers today. This
    includes Apache, Microsoft Internet Information Server,
    Personal Web Server, Netscape and iPlanet servers, Oreilly
    Website Pro server, Caudium, Xitami, OmniHTTPd, and many
    others. For the majority of the servers PHP has a module,
    for the others supporting the CGI standard, PHP can work
    as a CGI processor.
   </para>
   <para>
    So with PHP, you have the freedom of choosing an operating
    system and a web server. Furthermore, you also have the choice
    of using procedural programming or object oriented
    programming, or a mixture of them. Although not every
    standard OOP feature is realized in the current version
    of PHP, many code libraries and large applications (including the
    <link linkend="pear">PEAR library</link>) are written only
    using OOP code.
   </para>
   <para>
    With PHP you are not limited to output HTML. PHP's abilities
    includes outputing images, PDF files and even Flash movies
    (using libswf and Ming) generated on the fly. You can also
    output easily any text, such as XHTML and any other XML file.
    PHP can autogenerate these files, and save them in the file
    system, instead of printing it out, forming a server-side
    cache for your dynamic content.
   </para>
   <para>
    One of the strongest and most significant feature in PHP is its
    support for a wide range of databases. Writing a database-enabled
    web page is incredibly simple. The following databases are currently
    supported:
    <blockquote>
     <simplelist columns="3">
      <member>Adabas D</member>
      <member>dBase</member>
      <member>Empress</member>
      <member>FilePro (read-only)</member>
      <member>Hyperwave</member>
      <member>IBM DB2</member>
      <member>Informix</member>
      <member>Ingres</member>
      <member>InterBase</member>
      <member>FrontBase</member>
      <member>mSQL</member>
      <member>Direct MS-SQL</member>
      <member>MySQL</member>
      <member>ODBC</member>
      <member>Oracle (OCI7 and OCI8)</member>
      <member>Ovrimos</member>
      <member>PostgreSQL</member>
      <member>Solid</member>
      <member>Sybase</member>
      <member>Velocis</member>
      <member>Unix dbm</member>
     </simplelist>
    </blockquote>
    We also have a DBX database abstraction extension allowing you
    to transparently use any database supported by that extension.
    Additionally PHP supports ODBC, the Open Database Connection
    standard, so you can connect to any other database supporting
    this world standard.
   </para>
   <para>
    PHP also has support for talking to other services using protocols
    such as LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (on Windows) and
    countless others. You can also open raw network sockets and
    interact using any other protocol. PHP has support for the WDDX
    complex data exchange between virtually all Web programming
    languages. Talking about interconnection, PHP has support for
    instantiation of Java objects and using them transparently
    as PHP objects. You can also use our CORBA extension to
    access remote objects.
   </para>
   <para>
    PHP has extremely useful text processing features, from the
    POSIX Extended or Perl regular expressions to parsing XML
    documents. For parsing and accessing XML documents, we
    support the SAX and DOM standards. You can use our XSLT
    extension to transform XML documents.
   </para>
   <para>
    While using PHP in the ecommerce field, you'll find
    the Cybercash payment, CyberMUT, Verysign Payflow
    Pro and CCVS functions useful for your online payment
    programs.
   </para>
   <para>
    At last but not least, we have many other interesting
    extensions, the mnoGoSearch search engine functions,
    the IRC Gateway functions, many compression utilities
    (gzip, bz2), calendar conversion, translation...
   </para>
   <para>
    As you can see this page is not enough to list all
    the features and benefits PHP can offer. Read on in
    the sections about <link linkend="installation">installing
    PHP</link>, and see the <link linkend="funcref">function
    reference</link> part for explanation of the extensions
    mentioned here.
   </para>
  </sect1>

  <sect1 id="intro-history">
   <title>A brief history of PHP</title>
   <simpara>
    PHP was conceived sometime in the fall of 1994 by &link.rasmus;.
    Early non-released versions were used on his home page to keep
    track of who was looking at his online resume.  The first version
    used by others was available sometime in early 1995 and was known
    as the Personal Home Page Tools.  It consisted of a very
    simplistic parser engine that only understood a few special macros
    and a number of utilities that were in common use on home pages
    back then.  A guestbook, a counter and some other stuff.  The
    parser was rewritten in mid-1995 and named PHP/FI Version 2.  The
    FI came from another package Rasmus had written which interpreted
    html form data.  He combined the Personal Home Page tools scripts
    with the Form Interpreter and added mSQL support and PHP/FI was
    born.  PHP/FI grew at an amazing pace and people started
    contributing code to it.
   </simpara>
   <simpara>
    It is difficult to give any hard statistics, but it is estimated
    that by late 1996 PHP/FI was in use on at least 15,000 web sites
    around the world.  By mid-1997 this number had grown to over
    50,000.  Mid-1997 also saw a change in the development of PHP.  It
    changed from being Rasmus' own pet project that a handful of
    people had contributed to, to being a much more organized team
    effort. The parser was rewritten from scratch by Zeev Suraski and
    Andi Gutmans and this new parser formed the basis for PHP Version
    3.  A lot of the utility code from PHP/FI was ported over to PHP 3
    and a lot of it was completely rewritten.
   </simpara>
   <simpara>
    The latest version (PHP 4) uses the <ulink
    url="&url.zend;">Zend</ulink> scripting engine to deliver higher
    performance, supports an even wider array of third-party libraries
    and extensions, and runs as a native server module with all of the
    popular web servers.
   </simpara>
   <simpara>
    Today (1/2001) PHP 3 or PHP 4 now ships with a number of
    commercial products such as Red Hat's Stronghold web server.
    A conservative estimate based on an extrapolation from
    numbers provided by <ulink url="&url.netcraft;">Netcraft</ulink>
    (see also <ulink url="&url.netcraft-survey;">Netcraft Web Server
    Survey</ulink>) would be that PHP is in use on over 5,100,000
    sites around the world.  To put that in perspective, that is
    slightly more sites than run Microsoft's IIS server on the Internet
    (5.03 million).
   </simpara>
<!--
   <figure>
    <title>NetCraft Webserver Survey</title>
    <graphic fileref="&url.php.stats;"/>
   </figure>
-->
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
