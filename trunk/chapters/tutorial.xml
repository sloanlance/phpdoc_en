<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.40 $ -->
 <chapter id="tutorial">
  <title>A simple tutorial</title>

  <para>
   Here we would like to show the very basics of PHP in a short, simple
   tutorial. This text only deals with dynamic webpage creation with
   PHP, though PHP is not only capable of creating webpages. See
   the section titled <link linkend="intro-whatcando">What can PHP
   do</link> for more information.
  </para>
  <para>
   PHP-enabled web pages are treated just like regular HTML pages and
   you can create and edit them the same way you normally create
   regular HTML pages.
  </para>

  <sect1 id="tutorial.requirements">
   <title>What do I need?</title>
   <para>
    In this tutorial we assume that your server has activated support 
    for PHP and that all files ending in <filename>.php</filename>
    are handled by PHP. On most servers, this is the default extension
    for PHP files, but ask your server administrator to be sure. If
    your server supports PHP, then you do not need to do anything. Just
    create your <filename>.php</filename> files, put them in your
    web directory and the server will automatically parse them for you.
    There is no need to compile anything nor do you need to install
    any extra tools. Think of these PHP-enabled files as simple HTML
    files with a whole new family of magical tags that let you do all
    sorts of things.  Most web hosts offer PHP support, but if your
    host does not, consider reading the <ulink url="&url.php.links;">
    PHP Links</ulink> section for resources on finding PHP enabled
    web hosts.
   </para>
   <para>
    Let us say you want to save precious bandwidth and develop locally.  
    In this case, you will want to install a web server, such as 
    <ulink url="&url.apache;">Apache</ulink>, and of course 
    <ulink url="&url.php.downloads;">PHP</ulink>. You will most likely 
    want to install a database as well, such as 
    <ulink url="&url.mysql.docs;">MySQL</ulink>.
   </para>
   <para>
    You can either install these individually or choose a simpler way. Our
    manual has <link linkend="install">installation instructions for
    PHP</link> (assuming you already have some webserver set up). In case
    you have problems with installing PHP yourself, we would suggest you ask
    your questions on our <ulink url="&url.php.mailing-lists;">installation
    mailing list</ulink>. If you choose to go on the simpler route, then
    <ulink url="&url.installkits;">locate a pre-configured package</ulink>
    for your operating system,  which automatically installs all of these
    with just a few mouse clicks. It is easy to setup a web server with PHP
    support on any operating system, including MacOSX, Linux and Windows.
    On Linux, you may find <ulink url="&url.rpmfind;">rpmfind</ulink> and
    <ulink url="&url.rpmfind.pbone;">PBone</ulink> helpful for
    locating RPMs. You may also want to visit <ulink
     url="&url.apt-get;">apt-get</ulink> to find packages for Debian.
   </para>
  </sect1>

  <sect1 id="tutorial.firstpage">
   <title>Your first PHP-enabled page</title>
   <para>
    Create a file named <filename>hello.php</filename> and put it
    in your web server's root directory (<varname>DOCUMENT_ROOT</varname>) 
    with the following content:
   </para>
   <para>
    <example>
     <title>Our first PHP script: <filename>hello.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <?php echo '<p>Hello World</p>'; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Use your browser to access the file with your web server's URL, ending
      with the "/hello.php" file reference. When developing locally this
      URL will be something like <literal>http://localhost/hello.php</literal> 
      or <literal>http://127.0.0.1/hello.php</literal> but this depends on the
      web server's configuration. If everything is configured correctly, this
      file will be parsed by PHP and the following output will be sent to
      your browser:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <p>Hello World</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    This program is extremely simple and you really did not need to use
    PHP to create a page like this. All it does is display:
    <literal>Hello World</literal> using the PHP <function>echo</function>
    statement. Note that the file <emphasis>does not need to be executable</emphasis>
    or special in any way. The server finds out that this file needs to be interpreted
    by PHP because you used the ".php" extension, which the server is configured
    to pass on to PHP. Think of this as a normal HTML file which happens to have
    a set of special tags available to you that do a lot of interesting things.
   </para>
   <para>
    If you tried this example and it did not output anything, it prompted 
    for download, or you see the whole file as text, chances are that the 
    server you are on does not have PHP enabled, or is not configured properly.
    Ask your administrator to enable it for you using the
    <link linkend="install">Installation</link> chapter 
    of the manual. If you are developing locally, also read the
    installation chapter to make sure everything is configured
    properly. Make sure that you access the file via http with the server
    providing you the output. If you just call up the file from your file
    system, then it will not be parsed by PHP. If the problems persist anyway,
    do not hesitate to use one of the many
    <ulink url="&url.php.support;">PHP support</ulink> options.
   </para>
   <para>
    The point of the example is to show the special PHP tag format.
    In this example we used <literal>&lt;?php</literal> to indicate the
    start of a PHP tag. Then we put the PHP statement and left PHP mode by
    adding the closing tag, <literal>?&gt;</literal>. You may jump in
    and out of PHP mode in an HTML file like this anywhere you want.  For more
    details, read the manual section on the <link linkend="language.basic-syntax">
    basic PHP syntax</link>.
   </para>
   
   <note>
    <title>A Note on Text Editors</title>
    <para>
     There are many text editors and Integrated Development Environments (IDEs)
     that you can use to create, edit and manage PHP files. A partial list of 
     these tools is maintained at <ulink url="&url.phpeditorlist;">PHP Editors
     List</ulink>. If you wish to recommend an editor, please visit the above
     page and ask the page maintainer to add the editor to the list.  Having
     an editor with syntax highlighting can be helpful.
    </para>
   </note>
   
   <note>
    <title>A Note on Word Processors</title>
    <para>
     Word processors such as StarOffice Writer, Microsoft Word and Abiword are
     not optimal for editing PHP files.  If you wish to use one for this 
     test script, you must ensure that you save the file as <emphasis>plain
     text</emphasis> or PHP will not be able to read and execute the script.
    </para>
   </note>
   
   <note>
    <title>A Note on Windows Notepad</title>
    <para>
<<<<<<< tutorial.xml
    PHP betiklerinizi Windows Not Defteri ile yazýyorsanýz, dosyalarýnýzýn .php uzantýsý
    ile kaydedildiðinden emin olmalýsýnýz (Notepad birazdan bahsedeceðimiz önlemleri
    almadýðýnýz takdirde dosyalarýn sonuna otomatik olarak .txt uzantýsý ekler).
    Dosyayý kaydetmek istediðinizde, sizden dosyanýz için bir isim belirtmeniz istenecektir.
    Dosya ismi olarak týrnak içinde (örn. "<filename>hello.php</filename>") yazýn.
    Alternatif olarak, &apos;Kaydet&apos; iletiþim kutusunun içindeki &apos;Metin Belgeleri&apos; açýlýr menüsüne
    týkladýktan sonra buradaki deðeri "Tüm Dosyalar" olarak deðiþtirin. Artýk dosya isminizi
    týrnak iþareti kullanmadan yazabilirsiniz.
=======
     If you are writing your PHP scripts using Windows Notepad, you will need
     to ensure that your files are saved with the .php extension. (Notepad adds
     a .txt extension to files automatically unless you take one of the
     following steps to prevent it.)  When you save the file and are prompted
     to provide a name for the file, place the filename in quotes 
     (i.e. "<filename>hello.php</filename>").  Alternatively, you can click on the 
     'Text Documents' drop-down menu in the 'Save' dialog box and change the setting 
     to "All Files". You can then enter your filename without quotes.
>>>>>>> 1.39
    </para>
   </note>
  
   <para>
   Artýk çalýþýr bir PHP betiðini baþarýyla yarattýðýnýza göre, PHP betiklerinin
   en ünlüsünü yaratma zamaný geldi demektir! <function>Phpinfo</function>
   fonksiyonunu çalýþtýracaðýz ve sisteminizle ve yapýlandýrmanýzla ilgili
   <link linkend="language.variables.predefined">öntanýmlý deðiþkenler</link>,
   yüklü PHP modülleri ve <link linkend="configuration">yapýlandýrma</link>
   ayarlarý gibi konularda faydalý birçok bilgiye ulaþacaðýz. Bu önemli bilgiler için
   biraz vakit ayýrmanýzý ve bunlarý incelemenizi öneririz.
   </para>
   <para>
    <example>
     <title>PHP ile sistem bilgisine ulaþmak</title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </sect1>

  <sect1 id="tutorial.useful">
   <title>Ýþe yarar bir þey</title>
   <para>
   Þimdi daha iþe yarar bir þey yapalým. Kullanýcýnýzýn hangi tarayýcýyý
   kullandýðýný tespit edelim. Bunun için, HHTP isteði ile birlikte kullanýcýnýzýn
   tarayýcý tarafýndan gönderilen karakter dizisi (string) deðerini inceleyeceðiz.
   Bu deðer bir <link linkend="language.variables">deðiþken</link> içinde
   depolanmýþtýr. Deðiþkenler PHP&apos;de her zaman dolar iþareti ile baþlar.
   Bizim þu an için ilgilendiðimiz deðiþken <varname>$_SERVER[&apos;HTTP_USER_AGENT&apos;]</varname>
   deðiþkenidir.
   </para>
   <note>
    <para>
     <link linkend="reserved.variables.server">$_SERVER</link> özel saklanmýþ
     bir PHP deðiþkenidir. Bu deðiþken tüm web sunucusu bilgilerini içerir. Autoglobal
     (ya da superglobal - süper evrensel) olarak da bilinir. Kýlavuzdaki 
     <link linkend="language.variables.superglobals">Superglobals</link>
     bölümünden bu konu ile ilgili daha fazla bilgiye ulaþabilirsiniz. Bu özel deðiþkenler
     PHP <ulink url="&url.php.release4.1.0;">4.1.0</ulink> sürümü ile birlikte
     kullanýlmaya baþlanmýþtýr. Daha öncesinde, <varname>$HTTP_SERVER_VARS</varname>
     gibi eski <varname>$HTTP_*_VARS</varname> dizileri (array) kullanýlmaktaydý.
     Ömrünü doldurmuþ olsa da, bu eski tip deðiþkenler hala mevcuttur. (<link linkend="tutorial.oldcode">Eski kod</link>
     bölümüne de bakýnýz.)
    </para>
   </note>
   <para>
   Bu deðiþkeni görüntülemek için yapmanýz gereken basitçe:
   </para>
   <para>
    <example>
    <title>Bir deðiþkeni yazdýrmak (Dizi öðesi)</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER['HTTP_USER_AGENT']; ?>
]]>
    </programlisting>
    <para>
    Bu betikten alýnabilecek kýsa sonuç:
    </para>
    <screen role="html">
	Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
    </screen>
   </example>
   </para>
   <para>
   PHP&apos; birçok farklý deðiþken <link linkend="language.types">tipi</link>
   mevcuttur. Yukardaki örnekte bir <link linkend="language.types.array">dizi</link>ye
   ait bir öðeyi yazdýrdýk. Diziler çok kullanýþlý olabilirler.
   </para>
   <para>
    <varname>$_SERVER</varname> size PHP tarafýndan otomatik olarak saðlanan
    bir deðiþkendir. Kullaným kýlavuzunun 
    <link linkend="reserved.variables">Rezerve Deðiþkenler</link> bölümünden
    tümünün bir listesine ulaþabilirsiniz ya da önceki örnekte kullandýðýmýz
    <function>phpinfo</function> fonksiyonu ile üretilen çýktýya bakarak bütün
    listeye ulaþabilirsiniz.
   </para>
   <para>
   PHP etiketinin içine birden çok PHP komutu koyabilir ve tek bir echo komutundan
   daha fazlasýný yapan küçük kod bloklarý yaratabilirsiniz. Örneðin, Internet Explorer için
   bir kontrol yapmak istiyorsanýz þunu yapabilirsiniz:
   </para>
   <para>
    <example>
     <title><link linkend="language.control-structures">Kontrol yapýlarý 
     </link>nýn ve <link linkend="language.functions">fonksiyonlar</link>ýn kullanýmýna örnek</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'Internet Explorer kullanmaktasýnýz.<br />';
}
?>
]]>
     </programlisting>
     <para>
     Bu betikten alýnabilecek örnek sonuç:
     </para>
     <screen role="html">
<![CDATA[
Internet Explorer kullanýyorsunuz.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
   Nurada birkaç yeni kavramý devreye soktuk. Bir <link linkend="control-structures.if">if</link>
   komutumuz var. Eðer C dilinde kullanýlan temel sözdizimine aþinalýðýnýz varsa, bu kullaným
   size tanýdýk gelecektir. Aksi takdirde, giriþ düzeyinde bir PHP kitabý almanýz ve ilk birkaç bölümünü
   okumanýz ya da kýlavuzun <link linkend="langref">Dil Baþvuru Kaynaðý</link> bölümünü
   okumanýz faydalý olacaktýr. PHP kitaplarýnýn bir listesine <ulink url="&url.php.books;">&url.php.books;</ulink>
   adresinden ulaþabilirsiniz.
   </para>
   <para>
   Ýkinci devreye aldýðýmýz kavram <function>strpos</function> fonksiyonu ile yaptýðýmýz çaðrý oldu.
   <function>Strpos</function> fonksiyonu PHP içine yerleþik olan, bir karakter dizisini diðer karakter dizisinin
   içinde aramayý saðlayan bir fonksiyondur. Kendi durumumuzda biz <varname>$_SERVER[&apos;HTTP_USER_AGENT&apos;]</varname>
   (haystack - aramaya konu olan parça olarak da adlandýrýlýr) deðiþkeni içersinde <literal>&apos;MSIE&apos;</literal> (needle - aranan parça olarak da adlandýrýlýr)
   parçasýný aratmaktayýz. Aranan parça, aramaya konu olan parça içinde bulunursa, fonksiyon aramaya konu olan parçanýn baþlangýç noktasýna
   göreceli olarak aranan parçanýn bulunduðu noktanýn yerini döndürür. Aksi durumda, &false; döndürür. &false; döndürmezse, 
   <link linkend="control-structures.if">if</link> komutunun sonucu &true; olarak deðerlendirilir ve {köþeli parantezler} içindeki kod çalýþtýrýlýr.
   Aksi durumda kod çalýþtýrýlmaz. <link linkend="control-structures.if">If</link>, <link linkend="control-structures.else">else</link> gibi
   kontrol yapýlarýnýn ve <function>strtoupper</function> ve <function>strlen</function> gibi fonksiyonlarýn kullanarak siz kendiniz de benzer
   örnekler yaratabilirsiniz. Ýlgili her kýlavuz sayfasý ayný zamanda örnekler de içermektedir. Bu fonksiyonlarý nasýl kullanmanýz gerektiðinden
   emin deðilseniz, kýlavuzdaki <link linkend="about.prototypes">bir fonksiyon tanýmý nasýl okunur</link> ve <link linkend="language.functions">PHP fonksiyonlarý</link>
   bölümlerini okuyabilirsiniz.
   </para>
   <para>
   Bunu bir adým öteye taþýyabilir ve bir PHP bloðunun tam ortasýndayken bile PHP kipine nasýl girip çýkabileceðimize bakabiliriz:
   </para>
   <para>
    <example>
     <title>HTML ve PHP kiplerini karýþtýrmak</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos() false olmayan bir deðer döndürmelidir</h3>
<p>Internet Explorer kullanmaktasýnýz</p>
<?php
} else {
?>
<h3>strpos() false döndürmelidir</h3>
<p>Internet Explorer kullanmýyorsunuz</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
     Bu betikten elde edilebilecek örnek sonuç:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos() false olmayan bir deðer döndürmelidir</h3>
<p>Internet Explorer kullanýyorsunuz</p>
]]>
     </screen>
    </example>
   </para>
   <para>
   Bir çýktý üretmek için PHP echo komutunu kullanmak yerine, PHP kipinden
   çýktýk ve sadece düz HTML gönderdik. Burada dikkat edilmesi gereken önemli
   nokta, betiðin mantýksal akýþýnýn deðiþmiyor olmasýdýr. <function>Strpos</function>
   fonksiyonundan edinilen sonuca göre HTML bloklarýndan yalnýzca biri görüntüleyiciye
   gönderilmektedir. Baþka bir deyiþle, bu iþleyiþ <literal>MSIE</literal> deðiþkeninin
   bulunup bulunmamasýna baðlýdýr.
   </para>
  </sect1>
   
  <sect1 id="tutorial.forms">
   <title>Form Kullanýmý</title>
   <para>
   PHP&apos;nin en güçlü özelliklerinden biri HTML formlarýna yaklaþým biçimidir.
   Bilinmesi gereken ilk önemli durum, form içindeki tüm elemanlar PHP tarafýndan
   otomatik olarak kullanýlabilir olacaktýr. Bu konu ile ilgili kýlavuzdaki
   <link linkend="language.variables.external">PHP&apos;nin dýþýndan gelen
   deðiþkenler</link> bölümünü okuyabilirsiniz. Örnek bir HTML formu:
   </para>
   <para>
    <example>
     <title>Örnek bir HTML formu</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>Ýsminiz: <input type="text" name="isim" /></p>
 <p>Yaþýnýz: <input type="text" name="yas" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
   Bu form ile ilgili özel hiçbir þey yoktur. Hiçbir özel etiket içermeyen düz bir
   HTML formudur. Kullanýcý formu doldurup gönder tuþuna bastýðýnda, 
   <filename>action.php</filename> sayfasý çaðrýlýr. Bu dosyaya aþaðýdakileri
   yazabiliriz:
   </para>
   <para>
    <example>
     <title>Formdan veri yazdýrmak</title>
     <programlisting role="php">
<![CDATA[
Merhaba <?php echo $_POST['isim']; ?>.
Siz <?php echo $_POST['yas']; ?> yaþýndasýnýz.
]]>
     </programlisting>
     <para>
     Bu betikten elde edilecek örnek çýktý:
     </para>
     <screen role="html">
<![CDATA[
Merhaba Ahmet. Siz 22 yaþýndasýnýz.
]]>
     </screen>
    </example>
   </para>
   <para>
   Yapýlan iþ oldukça açýk. <varname>$_POST[&apos;isim&apos;]</varname> deðiþkeni
   ve <varname>$_POST[&apos;yas&apos;]</varname> deðiþkeni PHP tarafýndan otomatik
   olarak yaratýldý. Daha önce <varname>$_SERVER</varname> autoglobal
   deðiþkenini kullanmýþtýk, yukarýda <link linkend="reserved.variables.post">$_POST</link>
   autoglobal deðiþkenini tanýmýþ olduk. Bu deðiþken POST yöntemi ile gönderilen tüm
   veriyi içermektedir. Formumuz için tanýmlý <emphasis>yöntem (method)</emphasis>in
   POST olduðuna dikkat edin. <emphasis>GET</emphasis> yöntemini kullanmýþ olsaydýk,
   form bilgilerimiz <link linkend="reserved.variables.get">$_GET</link> autoglobal
   deðiþkenine tanýmlanmýþ olacaktý. Bunlarýn haricinde, istemciden gelen verinin hangi kaynaktan
   geldiði sizin için önemli deðilse <link linkend="reserved.variables.request">$_REQUEST</link>
   autoglobal deðiþkenini de kullanabilirsiniz. Bu deðiþken GET, POST ve COOKIE verilerinin
   birleþiminden oluþur. Daha fazla bilgi için <function>import_request_variables</function>
   fonksiyonunu inceleyebilirsiniz.
   </para>
   <para>
   PHP içinde XForms öðelerini de kullanabilirsiniz, ancak baþlangýç aþamasýnda
   çok iyi desteklenen HTML formlarý sizin iþinizi görecektir. XForms ile çalýþmak yeni baþlayanlar
   için uygun olmasa da, ilginizi çekebilir. <link linkend="features.xforms">XForms ile elde edilen
   verilerin iþlenmesi</link> ile ilgili metinden bu konu ile ilgili daha fazla bilgiye ulaþabilirsiniz.
   </para>
  </sect1>

  <sect1 id="tutorial.oldcode">
   <title>PHP&apos;nin yeni sürümleri ile eski kod yapýsýný kullanmak</title>
   <para>
   PHP&apos; popüler bir betik dili olmasýyla birlikte, hazýr kullanabileceðiniz
   kodlar üreten birçok kamuya açýk depo ve kütüphane oluþturuldu. PHP geliþtiricileri
   geriye dönük uyumluluðu mümkün olduðunca korumaya çalýþtýlar, dolayýsýyla
   eski bir PHP sürümü ile birlikte yazýlmýþ bir PHP kodu hiçbir deðiþiklik yapýlmasýna
   gerek duyulmadan (ideal olarak) yeni PHP sürümleri ile çalýþabilir halde kaldý.
   Ancak pratikte, bazý deðiþikliklerin yapýlmasý gerekebilir.
    usually be needed.
   </para>
   <para>
   Eski kodlarý etkileyen yakýn geçmiþe ait iki önemli deðiþiklik aþaðýdaki gibidir:
    <itemizedlist>
     <listitem>
      <simpara>
      Eski <varname>$HTTP_*_VARS</varname> tipi deðiþkenler ömürlerini
      doldurdular (bu deðiþkenler bir fonksiyon ya da metod içersinde kullanýlmadan
      önce tanýmlanmalýydýlar). Takip eden 
       <link linkend="language.variables.superglobals">autoglobal dizileri</link>
       PHP&apos;nin <ulink url="&url.php.release4.1.0;">4.1.0</ulink> sürümü ile
       birlikte kullanýma açýlmýþtýr. 
       Bunlar: <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_FILES</varname>, <varname>$_ENV</varname>,
       <varname>$_REQUEST</varname> ve <varname>$_SESSION</varname>
       dizileridir. Daha eski, <varname>$HTTP_POST_VARS</varname> gibi
       <varname>$HTTP_*_VARS</varname> dizileri, PHP 3&apos;teki ayný kullaným
       biçimi ile mevcutturlar.
       &avail.register-long-arrays;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
      Dýþ deðiþkenler artýk global kapsamda öntanýmlý olarak yaratýlmamaktadýrlar.
      Baþka bir deyiþle, PHP
       <ulink url="&url.php.release4.2.0;">4.2.0</ulink> sürümü ile birlikte &php.ini;
       içersindeki bir PHP direktifi olan
       <link linkend="ini.register-globals">register_globals</link>, öntanýmlý olarak
       <emphasis>off (kapalý)</emphasis>hale getirildi. Bu deðerlere eriþim için
       tercih edilen autoglobal dizi kullanýmý yönteminden yukarýda bahsettik. Eski
       betikler, kitaplar ve eðitmenler bu direktifin açýk olduðu kabul edilerek yazýlmýþ olabilir.
       Bu direktif açýk olduðunda, örneðin <literal>http://www.example.com/foo.php?id=42</literal>
       URL&apos;sinden gelen bir istek ile otomatik olarak <varname>$id</varname>
       deðiþkeni oluþturulur. Bu direktifin açýk ya da kapalý olduðuna bakýlmazsýzýn,
       <varname>$_GET[&apos;id&apos;]</varname> deðiþkeni yaratýlýr.
       </simpara>
     </listitem>
    </itemizedlist>
    Bu deðiþiklikler ile ilgili daha fazla bilgi için,
    <link linkend="language.variables.predefined">öntanýmlý deðiþkenler</link> bölümünden
    ve buradaki diðer baðlantýlardan faydalanabilirsiniz.
   </para>
  </sect1>
  
  <sect1 id="tutorial.whatsnext">
   <title>Sonraki adým nedir?</title>
   <para>
   Sahip olduðunuz yeni bilgilerle kýlavuzun birçok bölümünü anlayabilir
   ve örnek arþivinde bulunan birçok betiði okuyabilir hale gelmiþ olmalýsýnýz.
   <ulink url="&url.php.links;">&url.php.links;</ulink> baðlantýsýndan
   inceleyebileceðiniz baþka örneklere ulaþabilirsiniz.
   </para>
   <para>
   PHP ile neler yapabileceðiniz ile ilgili baþka sunumlara ulaþmak isterseniz,
   <ulink url="&url.php.conf;">&url.php.conf;</ulink> ve
   <ulink url="&url.php.talks;">&url.php.talks;</ulink>
   adreslerindeki PHP Konferans Materyalleri Siteleri&apos;ni ziyaret edebilirsiniz.
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

