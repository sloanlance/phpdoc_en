<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.similar-text">
   <refnamediv>
    <refname>similar_text</refname>
    <refpurpose>
     Calculate the similarity between two strings
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>similar_text</methodname>
      <methodparam><type>string</type><parameter>first</parameter></methodparam>
      <methodparam><type>string</type><parameter>second</parameter></methodparam>
      <methodparam choice="opt"><type>float</type><parameter role="reference">percent</parameter></methodparam>
     </methodsynopsis>
    <para>
     This calculates the similarity between two strings as described
     in Oliver [1993]. Note that this implementation does not use a
     stack as in Oliver's pseudo code, but recursive calls which may
     or may not speed up the whole process. Note also that the
     complexity of this algorithm is O(N**3) where N is the length of
     the longest string.
    </para>
    <para>
     By passing a reference as third argument,
     <function>similar_text</function> will calculate the similarity
     in percent for you. It returns the number of matching chars in
     both strings.
    </para>
    <simpara>
     See also <function>levenshtein</function>, and <function>soundex</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
