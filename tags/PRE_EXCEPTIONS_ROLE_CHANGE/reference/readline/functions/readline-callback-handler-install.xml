<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
  <refentry id="function.readline-callback-handler-install">
   <refnamediv>
    <refname>readline_callback_handler_install</refname>
    <refpurpose>Initializes the readline callback interface and terminal, prints the prompt and returns immediately</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>bool</type><methodname>readline_callback_handler_install</methodname>
      <methodparam><type>string</type><parameter>prompt</parameter></methodparam>
      <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
     </methodsynopsis>
    <para>
     Sets up a readline callback interface then prints
     <parameter>prompt</parameter> and immediately returns. The
     <parameter>callback</parameter> function takes one parameter; the user
     input returned. Calling this function twice without removing the previous
     callback interface will automatically and conveniently overwrite the old
     interface.
    </para>
    <para>
     The callback feature is useful when combined with
     <function>stream_select</function> as it allows interleaving of IO and
     user input, unlike <function>readline</function>.
    </para>
   </refsect1>
   <refsect1>
    &reftitle.returnvalues;
    <para>
     &return.success;
    </para>
   </refsect1>
   <refsect1>
    &reftitle.examples;
    <para>
     <example>
      <title>Readline Callback Interface Example</title>
      <programlisting role="php">
<![CDATA[
<?php
function rl_callback($ret)
{
    global $c, $prompting;

    echo "You entered: $ret\n";
    $c++;

    if ($c > 10) {
        $prompting = false;
        readline_callback_handler_remove();
    } else {
        readline_callback_handler_install("[$c] Enter something: ", 'rl_callback');
    }
}

$c = 1;
$prompting = true;

readline_callback_handler_install("[$c] Enter something: ", 'rl_callback');

while ($prompting) {
    $n = stream_select($r = array(STDIN), $w = null, $e = null, null);
    if ($n && in_array(STDIN, $r)) {
        // read a character, will call the callback when a newline is entered
        readline_callback_read_char();
    }
}

echo "Prompting disabled. All done.\n";
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
   <refsect1>
    &reftitle.seealso;
    <para>
     <function>readline_callback_handler_remove</function>,
     <function>readline_callback_read_char</function>&listendand;
     <function>stream_select</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
