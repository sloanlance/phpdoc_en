<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.20 $ -->
<!-- splitted from ./en/functions/pcre.xml, last change in rev 1.2 -->
  <refentry id="function.preg-match">
   <refnamediv>
    <refname>preg_match</refname>
    <refpurpose>Perform a regular expression match</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>preg_match</methodname>
      <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
      <methodparam><type>string</type><parameter>subject</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
    <para>
     Searches <parameter>subject</parameter> for a match to the regular
     expression given in <parameter>pattern</parameter>.
    </para>
    <para>
     If <parameter>matches</parameter> is provided, then it is filled with the
     results of search. <varname>$matches[0]</varname> will contain the text
     that matched the full pattern, <varname>$matches[1]</varname> will have
     the text that matched the first captured parenthesized subpattern, and so
     on.
    </para>
    <para>
     <parameter>flags</parameter> can be the following flag:
     <variablelist>
      <varlistentry>
       <term>PREG_OFFSET_CAPTURE</term>
       <listitem>
        <simpara>
         If this flag is passed, for every occurring match the appendant string
         offset will also be returned. Note that this changes the return value
         in an array where every element is an array consisting of the matched
         string at offset <literal>0</literal> and its string offset into
         <parameter>subject</parameter> at offset <literal>1</literal>. This
         flag is available since PHP 4.3.0 .
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
     The <parameter>flags</parameter> parameter is available since
     PHP 4.3.0.
    </para>

    <para>
     Normally, the search starts from the beginning of the subject string. The
     optional parameter <parameter>offset</parameter> can be used to specify
     the alternate place from which to start the search.
     The <parameter>offset</parameter> parameter is available since
     PHP 4.3.3.
    </para>
    <note>
     <para>
      Using <parameter>offset</parameter> is not equivalent to
      passing <literal>substr($subject, $offset)</literal> to
      <function>preg_match</function> in place of the subject string, because
      <parameter>pattern</parameter> can contain assertions such as
      <emphasis>^</emphasis>, <emphasis>$</emphasis> or
      <emphasis>(?&lt;=x)</emphasis>. Compare:
     </para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
print_r($matches);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
)
]]>
      </screen>
      <para>
       while this example
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
      </programlisting>
      <para>
       will produce
      </para>
      <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )

)
]]>
      </screen>
     </informalexample>
    </note>

    <para>
     <function>preg_match</function> returns the number of times 
     <parameter>pattern</parameter> matches. That will be either 0 times
     (no match) or 1 time because <function>preg_match</function> will stop
     searching after the first match. <function>preg_match_all</function>
     on the contrary will continue until it reaches the end of 
     <parameter>subject</parameter>.
     <function>preg_match</function> returns &false; if an error occurred.
    </para>
    <tip>
     <para>
      Do not use <function>preg_match</function> if you only want to check if
      one string is contained in another string. Use
      <function>strpos</function> or <function>strstr</function> instead as
      they will be faster.
     </para>
    </tip>
    <para>
     <example>
      <title>Find the string of text "php"</title>
      <programlisting role="php">
<![CDATA[
<?php
// The "i" after the pattern delimiter indicates a case-insensitive search
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Find the word "web"</title>
      <programlisting role="php">
<![CDATA[
<?php
/* The \b in the pattern indicates a word boundary, so only the distinct
 * word "web" is matched, and not a word partial like "webbing" or "cobweb" */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}

if (preg_match("/\bweb\b/i", "PHP is the website scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Getting the domain name out of a URL</title>
      <programlisting role="php">
<![CDATA[
<?php
// get host name from URL
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $matches);
$host = $matches[1];

// get last two segments of host name
preg_match('/[^.]+\.[^.]+$/', $host, $matches);
echo "domain name is: {$matches[0]}\n";
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
domain name is: php.net
]]>
      </screen>
     </example>
    </para>
    <para>
     See also <function>preg_match_all</function>, 
     <function>preg_replace</function>, and
     <function>preg_split</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
