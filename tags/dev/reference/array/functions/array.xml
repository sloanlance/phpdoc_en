<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.110 -->
  <refentry id="function.array">
   <refnamediv>
    <refname>array</refname>
    <refpurpose>
     Create an array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>array</type><methodname>array</methodname>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     Returns an array of the parameters.  The parameters can be given
     an index with the <literal>=&gt;</literal> operator.
    </para>
    <para>
     <note>
      <para>
       <function>array</function> is a language construct used to
       represent literal arrays, and not a regular function.
      </para>
     </note>
    </para>
    <para>
     Syntax "index =&gt; values", separated by commas, define index
     and values. index may be of type string or numeric. When index is
     omitted, a integer index is automatically generated, starting
     at 0. If index is an integer, next generated index will
     be the biggest integer index + 1. Note that when two identical
     index are defined, the last overwrite the first.
    </para>
    <para>
     The following example demonstrates how to create a
     two-dimensional array, how to specify keys for associative
     arrays, and how to skip-and-continue numeric indices in normal
     arrays.
     <example>
      <title><function>array</function> example</title>
      <programlisting role="php">
<![CDATA[
$fruits = array (
    "fruits"  => array ("a"=>"orange", "b"=>"banana", "c"=>"apple"),
    "numbers" => array (1, 2, 3, 4, 5, 6),
    "holes"   => array ("first", 5 => "second", "third")
);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Automatic index with <function>array</function></title>
      <programlisting role="php">
<![CDATA[
$array = array( 1, 1, 1, 1,  1, 8=>1,  4=>1, 19, 3=>13);
print_r($array);
]]>
      </programlisting>
      <para>
       will display :
       <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
       </screen>
      </para>
     </example>
     Note that index '3' is defined twice, and keep its final value of 13.
     Index 4 is defined after index 8, and next generated index (value 19)
     is 9, since biggest index was 8.
    </para>
    <para>
     This example creates a 1-based array.
     <example>
      <title>1-based index with <function>array</function></title>
      <programlisting role="php">
<![CDATA[
$firstquarter  = array(1 => 'January', 'February', 'March');
print_r($firstquarter);
]]>
      </programlisting>
      <para>
       will display :
       <screen>
<![CDATA[
Array
(
    [1] => 'January'
    [2] => 'February'
    [3] => 'March'
)
]]>
       </screen>
      </para>
     </example>
    </para>
    <para>
     See also <function>array_pad</function>,
     <function>list</function>, and <function>range</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
